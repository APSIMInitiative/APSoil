<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FarPoint.Win</name>
    </assembly>
    <members>
        <member name="T:FarPoint.Win.CaptionsArrayList">
            <summary>
            Represents an array of textual captions.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CaptionsArrayList.#ctor">
            <summary>
            Creates an array representing the captions that
            are available for the user.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CaptionsArrayList.Find(System.String)">
            <summary>
            Finds a caption in the array that matches the specified name.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CaptionsArrayList.Add(System.String)">
            <summary>
            Adds a caption to the array and returns its index.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CaptionsArrayList.Count">
            <summary>
            Gets the number of captions in the array.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CaptionsArrayList.Item(System.Int32)">
            <summary>
            Gets the caption at the specified index within the array.
            </summary>
        </member>
        <member name="T:FarPoint.Win.EnumeratedType">
            <summary>
            Specifies the type of cell.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.General">
            <summary>
            General cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.DateTime">
            <summary>
            Date-time-formatted cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.Number">
            <summary>
            Numeric cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.PicMask">
            <summary>
            Mask input cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.Button">
            <summary>
            Button cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.CheckBox">
            <summary>
            Check box cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.Slider">
            <summary>
            Slider (task bar) cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.Combo">
            <summary>
            Combo box cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.Hyperlink">
            <summary>
            Hyperlink cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.Progress">
            <summary>
            Progress indicator cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.MultiOption">
            <summary>
            Multiple option button cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.Percent">
            <summary>
            Percent-formatted numeric cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.Currency">
            <summary>
            Currency-formatted numeric cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.Text">
            <summary>
            Text cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.ColumnHeader">
            <summary>
            Column header cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.RowHeader">
            <summary>
            Row header cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.RichText">
            <summary>
            RichText cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.CustomBase">
            <summary>
            Custom cell
            </summary>
        </member>
        <member name="T:FarPoint.Win.CustomTypes">
            <summary>
            Represents a collection of custom cell types.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CustomTypes.#ctor">
            <summary>
            Creates a collection representing the custom editors that
            are available for the user.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CustomTypes.Clear">
            <summary>
            Adds a custom cell type to the collection and returns its index.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CustomTypes.Count">
            <summary>
            Gets the number of custom cell types in the collection.
            </summary>
        </member>
        <member name="T:FarPoint.Win.RadioOrientation">
            <summary>
            Specifies the orientation of the option buttons in the control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.RadioOrientation.Horizontal">
            <summary>
            Displays the option buttons horizontally
            </summary>
        </member>
        <member name="F:FarPoint.Win.RadioOrientation.Vertical">
            <summary>
            Displays the option buttons vertically
            </summary>
        </member>
        <member name="T:FarPoint.Win.RadioPictureType">
            <summary>
            Specifies the state of the individual option in the multiple options button control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.RadioPictureType.PictureFalse">
            <summary>
            Uses the picture for the false state
            </summary>
        </member>
        <member name="F:FarPoint.Win.RadioPictureType.PictureFalsePressed">
            <summary>
            Uses the picture for the false and pressed state
            </summary>
        </member>
        <member name="F:FarPoint.Win.RadioPictureType.PictureTrue">
            <summary>
            Uses the picture for the true state
            </summary>
        </member>
        <member name="F:FarPoint.Win.RadioPictureType.PictureTruePressed">
            <summary>
            Uses the picture for the true and pressed state
            </summary>
        </member>
        <member name="T:FarPoint.Win.RadioPictureConverter">
            <summary>
            Converts CheckBoxPicture objects from one type to another.
            </summary>
        </member>
        <member name="M:FarPoint.Win.RadioPictureConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an object of this type by using a specified set of
            property values for the object.
            </summary>
            <param name="context">Context</param>
            <param name="propertyValues">Property values</param>
        </member>
        <member name="M:FarPoint.Win.RadioPictureConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets whether changing a value on this object requires
            a call to the CreateInstance method to create a new value.
            </summary>
        </member>
        <member name="T:FarPoint.Win.RadioPicture">
            <summary>
            Represents the pictures for the different option button states.
            </summary>
        </member>
        <member name="P:FarPoint.Win.RadioPicture.Item(System.Int32)">
            <summary>
            Gets or sets the picture for the different option button states.
            </summary>
        </member>
        <member name="P:FarPoint.Win.RadioPicture.Item(FarPoint.Win.RadioPictureType)">
            <summary>
            Gets or sets the picture for the different option button states.
            </summary>
        </member>
        <member name="P:FarPoint.Win.RadioPicture.False">
            <summary>
            Gets or sets the image used for the false state.
            </summary>   
        </member>
        <member name="P:FarPoint.Win.RadioPicture.FalsePressed">
            <summary>
            Gets or sets the image used for the false pressed state.
            </summary>
        </member>
        <member name="P:FarPoint.Win.RadioPicture.True">
            <summary>
            Gets or sets the image used for the true state.
            </summary>
        </member>
        <member name="P:FarPoint.Win.RadioPicture.TruePressed">
            <summary>
            Gets or sets the image used for the true pressed state.
            </summary>
        </member>
        <member name="T:FarPoint.Win.FpMultiOption">
            <summary>
            Represents the FarPoint button control with multiple options.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ControlBase">
            <summary>
            Represents the common basis (base class) for FarPoint controls.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ControlBase.#ctor">
            <summary>
            Creates a new base class for controls.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ControlBase.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is an input key that the control 
            can handle without preprocessing.
            </summary>
            <param name="keyData">Key to check</param>
            <returns>
            true if the key can be handled by the control without preprocessing; false otherwise
            </returns>
        </member>
        <member name="M:FarPoint.Win.ControlBase.OnGotFocus(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.OnLostFocus(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.InvalidateFocus">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ControlBase.OnPaint(System.Windows.Forms.PaintEventArgs,System.Object)">
            <summary>
            Internal use only.
            </summary>
            <param name="e"></param>
            <param name="val"></param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.SetClientSize(System.Drawing.Rectangle)">
            <summary>
            Sets the client rectangle size for the control.
            </summary>
            <param name="rect">Client Rectangle</param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.GetAdjustedClientRectangle(System.Drawing.Rectangle,FarPoint.Win.Inset,FarPoint.Win.Inset)">
            <summary>
            Returns the adjusted client rectangle for the control.
            </summary>
            <param name="ctlRectangle">Client Rectangle</param>
            <param name="border">Border inset</param>
            <param name="margin">Margin inset</param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.SetBoundingRectangle(System.Drawing.Rectangle,FarPoint.Win.Inset,FarPoint.Win.Inset)">
            <summary>
            Sets the bounds for the client rectangle for the control.
            </summary>
            <param name="ctlRectangle">Client Rectangle</param>
            <param name="border">Border inset</param>
            <param name="margin">Margin inset</param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpMultiOption.DEFAULT_PICTURE_WIDTH">
            <summary>
            Default picture (image) width.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpMultiOption.DEFAULT_PICTURE_HEIGHT">
            <summary>
            Default picture (image) height.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.#ctor">
            FpMultiOption base class
            <summary>
            Creates a new multiple option button control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.OnBackgroundImageChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs if the background picture changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the ValueChanged event.
            </summary>
            <param name="e">EventArgs containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.ProcessMnemonic(System.Char)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.DoLayout(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Font,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.ButtonTextAlign,FarPoint.Win.RadioOrientation,FarPoint.Win.RadioPicture,System.Collections.ArrayList,System.Drawing.Rectangle[]@,System.Drawing.Rectangle[]@,System.Drawing.Rectangle[]@,System.Int32,System.Int32)">
            <summary>
            Calculates the layout rectangles for the multiple option buttons.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.GetPreferredSize(System.Drawing.Graphics,System.Drawing.Font,FarPoint.Win.ButtonTextAlign,FarPoint.Win.RadioOrientation,FarPoint.Win.RadioPicture,System.Collections.ArrayList)">
            <summary>
            Calculates the height and width required to display the text and picture 
            (of the option buttons) in the control with default width and height.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="font">Font</param>
            <param name="nAlign">Alignment of text</param>
            <param name="nOrientation">Orientation (vertical or horizontal) of list of option buttons</param>
            <param name="radioPicture">Picture (image) for the option buttons</param>
            <param name="radioList">Array of list of options</param>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.GetPreferredSize(System.Drawing.Graphics,System.Drawing.Font,FarPoint.Win.ButtonTextAlign,FarPoint.Win.RadioOrientation,FarPoint.Win.RadioPicture,System.Collections.ArrayList,System.Int32,System.Int32)">
            <summary>
            Calculates the height and width required to display the text and picture 
            (of the option buttons) in the control.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="font">Font</param>
            <param name="nAlign">Alignment of text</param>
            <param name="nOrientation">Orientation (vertical or horizontal) of list of option buttons</param>
            <param name="radioPicture">Picture (image) for the option buttons</param>
            <param name="radioList">Array of list of options</param>
            <param name="pictWidth">Width of picture for the option buttons</param>
            <param name="pictHeight">Height of picture for the option buttons</param>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.ButtonTextAlign,FarPoint.Win.RadioOrientation,FarPoint.Win.RadioPicture,System.Collections.ArrayList,System.Int32,System.Int32,System.Boolean,System.Boolean,FarPoint.Win.Picture,System.Boolean)">
            <summary>
            Paints the multiple options buttons with default width and height.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.ButtonTextAlign,FarPoint.Win.RadioOrientation,FarPoint.Win.RadioPicture,System.Collections.ArrayList,System.Int32,System.Int32,System.Boolean,System.Boolean,FarPoint.Win.Picture,System.Boolean,System.Int32,System.Int32,System.Int32,FarPoint.Win.VisualStyles)">
            <summary>
            Paints the multiple options buttons.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpMultiOption.ValueChanged">
            <summary>
            Occurs when the user selects a different option (the value changes).
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.BackgroundImage">
            <summary>
            Gets or sets the background image to use for the options button control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.VisualStyles">
            <summary>
            Gets or sets whether to use visual styles.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.ItemData">
            <summary>
            Gets or sets the item data list.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.UseMnemonic">
            <summary>
            Gets or sets whether special (shortcut) keys can be used to select items.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.TextAlign">
            <summary>
            Gets or sets how text is aligned relative to the picture.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.Orientation">
            <summary>
            Gets or sets how the multiple option buttons are oriented.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.Picture">
            <summary>
            Gets or sets the pictures used for the different states of the option buttons.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.List">
            <summary>
            Gets or sets the list of the individual option buttons.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.Value">
            <summary>
            Gets or sets the currently selected option from the multiple option buttons.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.HorizontalAlignment">
            <summary>
            Gets or sets how the option buttons are aligned horizontally.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.VerticalAlignment">
            <summary>
            Gets or sets how the option buttons are aligned vertically.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.PictureWidth">
            <summary>
            Gets or sets the width of the picture (image) in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.PictureHeight">
            <summary>
            Gets or sets the height of the picture (image) in the control.
            </summary>
        </member>
        <member name="T:FarPoint.Win.CanvasBase">
            <summary>
            Represents the base for the canvas.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ElementControl">
            <summary>
            Represents a control element.
            </summary>
        </member>
        <member name="T:FarPoint.Win.IElement">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.IElement.SetRedraw(System.Boolean,System.Boolean)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="E:FarPoint.Win.IElement.ForegroundImageChanged">
            <summary>
            Occurs when the foreground image in the control changes.
            </summary>
        </member>
        <member name="E:FarPoint.Win.IElement.BackgroundImageChanged">
            <summary>
            Occurs when the background image in the control changes.
            </summary>
        </member>
        <member name="E:FarPoint.Win.IElement.PictureChanged">
            <summary>
            Occurs when the picture in the control changes.
            </summary>
        </member>
        <member name="E:FarPoint.Win.IElement.FontChanged">
            <summary>
            Occurs when the font in the control changes.
            </summary>
        </member>
        <member name="E:FarPoint.Win.IElement.Click">
            <summary>
            Occurs when the user presses and releases the left or right mouse button and the pointer is on an element.
            </summary>
        </member>
        <member name="E:FarPoint.Win.IElement.DoubleClick">
            <summary>
            Occurs when the user presses and releases the left or right mouse button twice in succession while the pointer is on an element.
            </summary>
        </member>
        <member name="E:FarPoint.Win.IElement.MouseDown">
            <summary>
            Occurs when the user presses a mouse button.
            </summary>
        </member>
        <member name="E:FarPoint.Win.IElement.MouseUp">
            <summary>
            Occurs when the user releases a mouse button.
            </summary>
        </member>
        <member name="E:FarPoint.Win.IElement.MouseMove">
            <summary>
            Occurs when the user moves the mouse.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementControl.PICTURE_MARGIN_DEFAULT">
            <summary>
            Represents the default picture margin for the element, namely 2 pixels.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementControl.BACK_COLOR_DEFAULT">
            <summary>
            Represents the default color background for the element, namely SystemColors.Control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementControl.FORE_COLOR_DEFAULT">
            <summary>
            Represents the default text color for the element, namely SystemColors.ControlText.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementControl.fontOverride">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.#ctor">
            <summary>
            Creates a control element (ElementControl object).
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.#ctor(System.Object)">
            <summary>
            Creates a control element (ElementControl object) based on the specified object.
            </summary>
            <param name="cloneFrom">Object on which to base the control element being created</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ShouldSerializePictureTransparencyTolerance">
            <summary>
            Indicates whether the PictureTransparencyTolerance property should be persisted.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ResetPictureTransparencyTolerance">
            <summary>
            Resets the transparency tolerance for a picture in the element to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.AdjustClientArea">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.SetRedraw(System.Boolean,System.Boolean)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ResetBorder">
            <summary>
            Resets the border of the control to its default settings.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ShouldSerializeBorder">
            <summary>
            Internal use only. 
            </summary>    
        </member>
        <member name="M:FarPoint.Win.ElementControl.ShouldSerializePictureTransparencyColor">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ResetPictureTransparencyColor">
            <summary>
            Resets the picture transparency color to its default color.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ResetPicture">
            <summary>
            Resets the picture for the control to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ShouldSerializeFont">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ResetFont">
            <summary>
            Resets the font of the control to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnParentChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.ElementControl.ParentChanged"/> event when the 
            parent control has changed.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.GetFont">
            <summary>
            Gets the current font or the default font if no font is specified.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ResetText">
            <summary>
            Resets the contents to the default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ShouldSerializeBackColor">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ResetBackColor">
            <summary>
            Resets the background color of the control to its default value. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ShouldSerializeForeColor">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ResetForeColor">
            <summary>
            Resets the text color of the control to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.Select(System.Boolean)">
            <summary>
            Activates the control.
            </summary>
            <param name="selected">true if selected; false otherwise</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.GetControl">
            <summary>
            Gets the control.  
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.Update">
            <summary>
            Causes the control to redraw the invalidated regions within its client area.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the bounds of the element to the position and size of the bound rectangle of the specified dimensions. 
            </summary>
            <param name="x">X-coordinate of the top left corner of the bounding rectangle</param>
            <param name="y">Y-coordinate of the top left corner of the bounding rectangle</param>
            <param name="width">Number of pixels in the width of the bounding rectangle</param>
            <param name="height">Number of pixels in the height of the bounding rectangle</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.SetBounds(System.Drawing.Rectangle)">
            <summary>
            Sets the bounds of the element to the position and size of the specified bounding rectangle object. 
            </summary>
            <param name="rectInput">Rectangle object containing the bounding rectangle</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.Focus(System.Boolean)">
            <summary>
            Moves the focus to the control.
            </summary>
            <param name="giveFocus">Whether to move focus to the control</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnBackgroundImageChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.ElementControl.BackgroundImageChanged"/> event when the 
            background picture has changed.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnForegroundImageChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementControl.ForegroundImageChanged"/> event when the 
            foreground picture has changed.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnPictureChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementControl.PictureChanged"/> event when the 
            picture has changed.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnLostFocus(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnGotFocus(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnLostFocusNoRefresh(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnGotFocusNoRefresh(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.ElementControl.Click"/> event when the 
            user clicks with the cursor over the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.DoClick(System.Object,System.EventArgs)">
            <summary>
            Internal use only. 
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnDoubleClick(System.EventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.ElementControl.DoubleClick"/> event when the 
            user double clicks with the cursor over the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.DoDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Internal use only. 
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ProcessMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.ElementControl.MouseDown"/> event when the 
            pointer button is pressed while the cursor is over the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.DoMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ProcessMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.ElementControl.MouseUp"/> event when the 
            pointer button is released while the cursor is over the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.DoMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.ElementControl.MouseMove"/> event when the 
            pointer is moved within the control and the cursor is over the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.DoMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ResetElements">
            <summary>
            Resets the elements to their default settings.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.Reset">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.Clone">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.SetState(FarPoint.Win.ElementState)">
            <summary>
            Internal use only.
            </summary>
            <param name="eState">The state of the control</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ToggleState">
            <summary>
            Toggles the state of the control.
            </summary>  
        </member>
        <member name="M:FarPoint.Win.ElementControl.GetClientRectangle">
            <summary>
            Internal use only.
            </summary>
            <returns>Coordinates of the control</returns>
        </member>
        <member name="M:FarPoint.Win.ElementControl.GetClientRectangle(System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <returns>Coordinates of the control</returns>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.ElementControl.Paint"/> event when the 
            element has been asked to repaint itself.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle,FarPoint.Win.ElementStyle)">
            <summary>
            Paints the control (both text and picture) with an overriding style.
            </summary>
            <param name="g">Graphics device</param>
            <param name="rectInput">Rectangle bounding the area</param>
            <param name="overrideStyle">ElementStyle to use as style</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the control (text and picture).
            </summary>
            <param name="g">Graphics device</param>
            <param name="rectInput">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.GetTextAndPictureRectangles(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle@,System.Drawing.Rectangle@)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
            <param name="rPict">Rectangle bounding the picture</param>
            <param name="rText">Rectangle bounding the text</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.GetTextAndPictureRectangles(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle@,System.Drawing.Rectangle@,System.String)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
            <param name="rPict">Rectangle bounding the picture</param>
            <param name="rText">Rectangle bounding the text</param>
            <param name="paintString">String</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.AdjustStringFormat(System.Drawing.StringFormat@)">
            <summary>
            Internal use only.
            </summary>
            <param name="fmt">Format string</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.PaintTextAndPicture(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.PaintForegroundImage(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.PaintFocusRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.PaintElements(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="faceRect">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.PaintBorder(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.PaintBackgroundImage(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.PaintSpecialBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.PaintSpecialForeground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.PaintBackColor(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnPaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the background of the control.
            </summary>
            <param name="g">Graphics device</param>
            <param name="rectInput">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnPaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle,FarPoint.Win.ElementStyle)">
            <summary>
            Paints the background of the control with an overriding style.
            </summary>
            <param name="g">Graphics device</param>
            <param name="rectInput">Rectangle bounding the area</param>
            <param name="overrideStyle">ElementStyle to use to override style</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Occurs when the background of the control is painted.
            </summary>
            <param name="e">PaintEventArgs object containing event data</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.SetElementStyle(FarPoint.Win.ElementStyle)">
            <summary>
            Sets the style for the element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.GetElementStyle">
            <summary>
            Gets the style for the element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.AddStateNotify(FarPoint.Win.IStateNotify)">
            <summary>
            Internal use only.
            </summary>
            <param name="target">Target</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.RemoveStateNotify(FarPoint.Win.IStateNotify)">
            <summary>
            Internal use only.
            </summary>
            <param name="target">Target</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.FireStateNotify">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.FarPoint#Win#IElement#get_Tag">
            <summary>
            Represents a control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.FarPoint#Win#IElement#set_Tag(System.Object)">
            <summary>
            Represents a control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.FarPoint#Win#IElement#add_BackgroundImageChanged(System.EventHandler)">
            <summary>
            Represents a control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.FarPoint#Win#IElement#remove_BackgroundImageChanged(System.EventHandler)">
            <summary>
            Represents a control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.FarPoint#Win#IElement#add_FontChanged(System.EventHandler)">
            <summary>
            Represents a control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.FarPoint#Win#IElement#remove_FontChanged(System.EventHandler)">
            <summary>
            Represents a control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.FarPoint#Win#IElement#add_Click(System.EventHandler)">
            <summary>
            Represents a control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.FarPoint#Win#IElement#remove_Click(System.EventHandler)">
            <summary>
            Represents a control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.FarPoint#Win#IElement#add_DoubleClick(System.EventHandler)">
            <summary>
            Represents a control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.FarPoint#Win#IElement#remove_DoubleClick(System.EventHandler)">
            <summary>
            Represents a control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.FarPoint#Win#IElement#add_MouseDown(System.Windows.Forms.MouseEventHandler)">
            <summary>
            Represents a control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.FarPoint#Win#IElement#remove_MouseDown(System.Windows.Forms.MouseEventHandler)">
            <summary>
            Represents a control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.FarPoint#Win#IElement#add_MouseUp(System.Windows.Forms.MouseEventHandler)">
            <summary>
            Represents a control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.FarPoint#Win#IElement#remove_MouseUp(System.Windows.Forms.MouseEventHandler)">
            <summary>
            Represents a control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.FarPoint#Win#IElement#add_MouseMove(System.Windows.Forms.MouseEventHandler)">
            <summary>
            Represents a control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.FarPoint#Win#IElement#remove_MouseMove(System.Windows.Forms.MouseEventHandler)">
            <summary>
            Represents a control element.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementControl.PictureChanged">
            <summary>
            Occurs when the picture in the control has changed.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementControl.ForegroundImageChanged">
            <summary>
            Occurs when the foreground image in the control has changed.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.PictureTransparencyTolerance">
            <summary>
            Gets or sets the picture transparency tolerance for the element.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.TextWrap">
            <summary>
            Gets or sets whether to automatically wrap text without line breaks in the element. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.TextWrapPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.CancelMouse">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.CancelMousePriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.Focused">
            <summary>
            Gets whether the control has focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.ContainsFocus">
            <summary>
            Gets whether the element currently has the input focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.PictureMargin">
            <summary>
            Gets or sets the margin between the text and the picture.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.PictureMarginPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.MarginBottom">
            <summary>
            Gets or sets the margin between the bottom of the control and its contents.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.MarginBottomPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.MarginTop">
            <summary>
            Gets or sets the margin between the top of the control and its contents.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.MarginTopPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.MarginLeft">
            <summary>
            Gets or sets the margin between the left edge of the control and its contents.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.MarginLeftPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.MarginRight">
            <summary>
            Gets or sets the margin between the right edge of the control and its contents.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.MarginRightPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:FarPoint.Win.ElementControl.Redraw" -->
        <member name="P:FarPoint.Win.ElementControl.Parent">
            <summary>
            Gets or sets the parent of the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.ParentPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.Visible">
            <summary>
            Gets or sets whether the control is visible.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.Enabled">
            <summary>
            Gets or sets whether the control can receive focus and respond to user actions.
            </summary> 
        </member>
        <member name="P:FarPoint.Win.ElementControl.Selectable">
            <summary>
            Gets or sets whether the control can receive focus. 
            </summary>      
        </member>
        <member name="P:FarPoint.Win.ElementControl.SelectablePriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.CanFocus">
            <summary>
            Gets or sets whether the control can receive focus. 
            </summary>  
        </member>
        <member name="P:FarPoint.Win.ElementControl.CanFocusPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.Border">
            <summary>
            Gets or sets the border for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.BorderPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.AlignText">
            <summary>
            Gets or sets the alignment of the text in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.AlignTextPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.TextOrientation">
            <summary>
            Gets or sets the orientation of the text in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.TextOrientationPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.PictureOrientation">
            <summary>
            Gets or sets the orientation of the picture in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.PictureOrientationPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.PictureTransparencyColor">
            <summary>
            Gets or sets the transparency color for the picture in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.ForegroundImage">
            <summary>
            Gets or sets the foreground image for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.ForegroundImagePriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.BackgroundImage">
            <summary>
            Gets or sets the background image for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.Picture">
            <summary>
            Gets or sets the picture for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.PicturePriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.DrawFocusRectangle">
            <summary>
            Gets or sets the drawing style of the focus rectangle in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.DrawFocusRectanglePriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.State">
            <summary>
            Gets or sets the element state for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.StatePriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.Font">
            <summary>
            Gets or sets the font for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.FontPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.Text">
            <summary>
            Gets or sets the contents of the control as a string matching exactly what is displayed.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.TextPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.About">
            <summary>
            Displays information about the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.Name">
            <summary>
            Gets or sets the name used in code to identify the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.BackColorPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.ForeColor">
            <summary>
            Gets or sets the text color for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.ForeColorPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.AlignHorz">
            <summary>
            Gets or sets the horizontal alignment of the contents of the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.AlignHorzPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.AlignVert">
            <summary>
            Gets or sets the vertical alignment of the contents of the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.AlignVertPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.Rectangle">
            <summary>
            Gets or sets the rectangle in the client area of the control. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.StateNotifyList">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.Elements">
            <summary>
            Gets the collection of IElement-derived objects that the current ElementControl contains.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.ElementsPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasBase.#ctor">
            <summary>
            Creates a base for the canvas.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasBase.OnSizeChanged(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasBase.Reset">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasBase.ResetText">
            <summary>
            Resets the contents to the default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasBase.AdjustStringFormat(System.Drawing.StringFormat@)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasBase.AdjustClientArea">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasBase.ProcessMnemonic(System.Char)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasBase.SetElementBounds(System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasBase.OnGotFocus(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasBase.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.  MouseDown processing.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.  MouseUp processing.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CanvasBase.CanFocus">
            <summary>
            Gets or sets whether the control can receive focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CanvasBase.HotkeyPrefix">
            <summary>
            Gets or sets whether the underscore appears for hot keys - 
            whether an ampersand typed in front of a character 
            underlines the character.
            </summary>
        </member>
        <member name="T:FarPoint.Win.CanvasContainerBase">
            <summary>
            Represents the base for the canvas container.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ElementContainerControl">
            <summary>
            Represents a child-containing control element.
            </summary>
        </member>
        <member name="T:FarPoint.Win.IWindowlessChildSupport">
            <summary>
            Interface supplied by objects that support windowless child controls.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementContainerControl.PICTURE_MARGIN_DEFAULT">
            <summary>
            Represents the default picture margin for the element, namely 2 pixels.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementContainerControl.BACK_COLOR_DEFAULT">
            <summary>
            Represents the default color background for the element, namely SystemColors.Control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementContainerControl.FORE_COLOR_DEFAULT">
            <summary>
            Represents the default text color for the element, namely SystemColors.ControlText.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementContainerControl.fontOverride">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.#ctor">
            <summary>
            Creates a new child-containing control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.#ctor(System.Object)">
            <summary>
            Creates a new child-containing control element by cloning the specified object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.#ctor(System.Object,System.Boolean)">
            <summary>
            Creates a new child-containing control element by cloning the specified object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ShouldSerializePictureTransparencyTolerance">
            <summary>
            Indicates whether the PictureTransparencyTolerance property should be persisted.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ResetPictureTransparencyTolerance">
            <summary>
            Resets the transparency tolerance for a picture in the element to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.SetRedraw(System.Boolean,System.Boolean)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ResetBorder">
            <summary>
            Resets the border of the control to its default settings.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ShouldSerializeBorder">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ShouldSerializeTextRotationAngle">
            <summary>
            Indicates whether the TextRotationAngle property should be persisted.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ResetTextRotationAngle">
            <summary>
            Resets the rotation angle for text in the element to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ShouldSerializePictureTransparencyColor">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ResetPictureTransparencyColor">
            <summary>
            Resets the transparency color for the picture in the control 
            (PictureTransparencyColor property) to its default color.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ShouldSerializeFont">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ResetFont">
            <summary>
            Resets the font of the control to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnParentChanged(System.EventArgs)">
            <summary>
            Occurs when the parent has changed.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.GetFont">
            <summary>
            Gets the current font or the default font if no font is specified.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ResetText">
            <summary>
            Resets the contents to the default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ShouldSerializeBackColor">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ResetBackColor">
            <summary>
            Resets the background color of the control to its default value. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ShouldSerializeForeColor">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ResetForeColor">
            <summary>
            Resets the ForeColor property to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.Select(System.Boolean)">
            <summary>
            Activates the control.
            </summary>
            <param name="selected">True if selected; otherwise false</param>    
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.GetControl">
            <summary>
            Gets the Control object.  
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.Update">
            <summary>
            Causes the control to redraw the invalidated regions within its client area.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the bounds of the control to the specified position and size, using integer values.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.SetBounds(System.Drawing.Rectangle)">
            <summary>
            Sets the bounds of the control to the specified position and size, using rectangle.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.Focus(System.Boolean)">
            <summary>
            Moves the focus to the control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnBackgroundImageChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs if the background picture changes.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnForegroundImageChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs if the foreground picture changes.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnPictureChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when the picture changes.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnLostFocus(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnGotFocus(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnLostFocusNoRefresh(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnGotFocusNoRefresh(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnClick(System.EventArgs)">
            <summary>
            Occurs if the user clicks on the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.DoClick(System.Object,System.EventArgs)">
            <summary>
            Internal use only. 
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnDoubleClick(System.EventArgs)">
            <summary>
            Occurs if the user double clicks the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.DoDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Internal use only. 
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ProcessMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs if a mouse button is clicked while the cursor is over the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.DoMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ProcessMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs if a mouse button is released while the cursor is over the control. 
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.DoMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs if the pointer is moved within the control and the cursor is over the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.DoMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ResetElements">
            <summary>
            Resets the elements to their default settings.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.Reset">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.Clone">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.Clone(System.Boolean)">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.SetState(FarPoint.Win.ElementState)">
            <summary>
            Internal use only.
            </summary>
            <param name="eState">State of the control</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ToggleState">
            <summary>
            Toggles the state of the control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.GetClientRectangle">
            <summary>
            Internal use only.
            </summary>
            <returns>Coordinates of the control</returns>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.GetClientRectangle(System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <returns>Coordinates of the control</returns>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Occurs when the element asks to repaint itself.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle,FarPoint.Win.ElementStyle)">
            <summary>
            Paints the control (text and picture) with an overriding style.
            </summary>
            <param name="g">Graphics object</param>
            <param name="rectInput">Coordinates of the control to paint</param>
            <param name="overrideStyle">ElementStyle to use when painting</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the control (text and picture).
            </summary>
            <param name="g">Graphics object</param>
            <param name="rectInput">Coordinates of the control to paint</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.GetTextAndPictureRectangles(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle@,System.Drawing.Rectangle@)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
            <param name="rPict">Rectangle bounding the picture</param>
            <param name="rText">Rectangle bounding the text</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.GetTextAndPictureRectangles(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle@,System.Drawing.Rectangle@,System.String)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
            <param name="rPict">Rectangle bounding the picture</param>
            <param name="rText">Rectangle bounding the text</param>
            <param name="paintString">String</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.AdjustStringFormat(System.Drawing.StringFormat@)">
            <summary>
            Internal use only.
            </summary>
            <param name="fmt">String format</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.PaintTextAndPicture(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.PaintForegroundImage(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.PaintFocusRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.PaintElements(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.PaintBorder(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.PaintBackgroundImage(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.PaintSpecialBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.PaintSpecialForeground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.PaintBackColor(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnPaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the background of the control.
            </summary>
            <param name="g">Graphics object</param>
            <param name="rectInput">Coordinates of the control to paint</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnPaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle,FarPoint.Win.ElementStyle)">
            <summary>
            Paints the background of the control with an overriding style.
            </summary>
            <param name="g">Graphics object</param>
            <param name="rectInput">Coordinates of the control to paint</param>
            <param name="overrideStyle">ElementStyle to use when painting</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Occurs when the control has been asked to repaint itself.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.SetElementStyle(FarPoint.Win.ElementStyle)">
            <summary>
            Sets the style for the element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.GetElementStyle">
            <summary>
            Gets the style for the element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.AddStateNotify(FarPoint.Win.IStateNotify)">
            <summary>
            Internal use only.
            </summary>
            <param name="target">Target</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.RemoveStateNotify(FarPoint.Win.IStateNotify)">
            <summary>
            Internal use only.
            </summary>
            <param name="target">Target</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.FireStateNotify">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.FarPoint#Win#IElement#get_Tag">
            <summary>
            Represents a child-containing control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.FarPoint#Win#IElement#set_Tag(System.Object)">
            <summary>
            Represents a child-containing control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.FarPoint#Win#IElement#add_BackgroundImageChanged(System.EventHandler)">
            <summary>
            Represents a child-containing control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.FarPoint#Win#IElement#remove_BackgroundImageChanged(System.EventHandler)">
            <summary>
            Represents a child-containing control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.FarPoint#Win#IElement#add_FontChanged(System.EventHandler)">
            <summary>
            Represents a child-containing control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.FarPoint#Win#IElement#remove_FontChanged(System.EventHandler)">
            <summary>
            Represents a child-containing control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.FarPoint#Win#IElement#add_Click(System.EventHandler)">
            <summary>
            Represents a child-containing control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.FarPoint#Win#IElement#remove_Click(System.EventHandler)">
            <summary>
            Represents a child-containing control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.FarPoint#Win#IElement#add_DoubleClick(System.EventHandler)">
            <summary>
            Represents a child-containing control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.FarPoint#Win#IElement#remove_DoubleClick(System.EventHandler)">
            <summary>
            Represents a child-containing control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.FarPoint#Win#IElement#add_MouseDown(System.Windows.Forms.MouseEventHandler)">
            <summary>
            Represents a child-containing control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.FarPoint#Win#IElement#remove_MouseDown(System.Windows.Forms.MouseEventHandler)">
            <summary>
            Represents a child-containing control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.FarPoint#Win#IElement#add_MouseUp(System.Windows.Forms.MouseEventHandler)">
            <summary>
            Represents a child-containing control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.FarPoint#Win#IElement#remove_MouseUp(System.Windows.Forms.MouseEventHandler)">
            <summary>
            Represents a child-containing control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.FarPoint#Win#IElement#add_MouseMove(System.Windows.Forms.MouseEventHandler)">
            <summary>
            Represents a child-containing control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.FarPoint#Win#IElement#remove_MouseMove(System.Windows.Forms.MouseEventHandler)">
            <summary>
            Represents a child-containing control element.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.PictureTransparencyTolerance">
            <summary>
            Gets or sets the picture transparency tolerance for the element.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.TextWrap">
            <summary>
            Gets or sets whether to automatically wrap text without line breaks. 
            </summary>
            <example>
            <code lang="csharp">
            element.TextWrap = true;
            </code>
            <code lang="vb">
            element.TextWrap = True;
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.CancelMouse">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Focused">
            <summary>
            Gets whether the control has focus.
            </summary>
            <example>
            <code lang="csharp">
            control.Picture = Image.FromFile(Application.StartupPath + "\\smokes.bmp");
            control.PictureMargin = 34;
            control.MarginTop = 3;
            control.MarginBottom = 3;
            control.MarginLeft = 3;
            control.MarginRight = 3;
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180;
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left;
            control.BackColor = Color.Red;
            control.Text = "NO SMOKING";
            private void button1_Click(object sender, System.EventArgs e)
            {
            // Turn off the No Smoking sign
            control.Visible=false;
            }
            </code>
            <code lang="vb">
            control.Picture = Image.FromFile(Application.StartupPath &amp; "\smokes.bmp")
            control.PictureMargin = 34
            control.MarginTop = 3
            control.MarginBottom = 3
            control.MarginLeft = 3
            control.MarginRight = 3
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180
            control.MarginTop = 3
            control.MarginBottom = 3
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left
            control.BackColor = Color.Red
            control.Text = "NO SMOKING"
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
            'Turn off the NO Smoking sign
            control.Visible = False
            End Sub
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.ContainsFocus">
            <summary>
            Gets whether the element currently has the input focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.PictureMargin">
            <summary>
            Gets or sets the margin between the text and the picture.
            </summary>
            <example>
            <code lang="csharp">
            control.Picture = Image.FromFile(Application.StartupPath + "\\smokes.bmp");
            control.PictureMargin = 34;
            control.MarginTop = 3;
            control.MarginBottom = 3;
            control.MarginLeft = 3;
            control.MarginRight = 3;
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180;
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left;
            control.BackColor = Color.Red;
            control.Text = "NO SMOKING";
            </code>
            <code lang="vb">
            control.Picture = Image.FromFile(Application.StartupPath &amp; "\smokes.bmp")
            control.PictureMargin = 34
            control.MarginTop = 3
            control.MarginBottom = 3
            control.MarginLeft = 3
            control.MarginRight = 3
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180
            control.MarginTop = 3
            control.MarginBottom = 3
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left
            control.BackColor = Color.Red
            control.Text = "NO SMOKING"
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.MarginBottom">
            <summary>
            Gets or sets the margin between the bottom of the control and its contents.
            </summary>
            <example>
            <code lang="csharp">
            control.Picture = Image.FromFile(Application.StartupPath + "\\smokes.bmp");
            control.PictureMargin = 34;
            control.MarginTop = 3;
            control.MarginBottom = 3;
            control.MarginLeft = 3;
            control.MarginRight = 3;
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180;
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left;
            control.BackColor = Color.Red;
            control.Text = "NO SMOKING";
            </code>
            <code lang="vb">
            control.Picture = Image.FromFile(Application.StartupPath &amp; "\smokes.bmp")
            control.PictureMargin = 34
            control.MarginTop = 3
            control.MarginBottom = 3
            control.MarginLeft = 3
            control.MarginRight = 3
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180
            control.MarginTop = 3
            control.MarginBottom = 3
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left
            control.BackColor = Color.Red
            control.Text = "NO SMOKING"
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.MarginTop">
            <summary>
            Gets or sets the margin between the top of the control and its contents.
            </summary>
            <example>
            <code lang="csharp">
            control.Picture = Image.FromFile(Application.StartupPath + "\\smokes.bmp");
            control.PictureMargin = 34;
            control.MarginTop = 3;
            control.MarginBottom = 3;
            control.MarginLeft = 3;
            control.MarginRight = 3;
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180;
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left;
            control.BackColor = Color.Red;
            control.Text = "NO SMOKING";
            </code>
            <code lang="vb">
            control.Picture = Image.FromFile(Application.StartupPath &amp; "\smokes.bmp")
            control.PictureMargin = 34
            control.MarginTop = 3
            control.MarginBottom = 3
            control.MarginLeft = 3
            control.MarginRight = 3
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180
            control.MarginTop = 3
            control.MarginBottom = 3
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left
            control.BackColor = Color.Red
            control.Text = "NO SMOKING"
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.MarginLeft">
            <summary>
            Gets or sets the margin between the left edge of the control and its contents.
            </summary>
            <example>
            <code lang="csharp">
            control.Picture = Image.FromFile(Application.StartupPath + "\\smokes.bmp");
            control.PictureMargin = 34;
            control.MarginTop = 3;
            control.MarginBottom = 3;
            control.MarginLeft = 3;
            control.MarginRight = 3;
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180;
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left;
            control.BackColor = Color.Red;
            control.Text = "NO SMOKING";
            </code>
            <code lang="vb">
            control.Picture = Image.FromFile(Application.StartupPath &amp; "\smokes.bmp")
            control.PictureMargin = 34
            control.MarginTop = 3
            control.MarginBottom = 3
            control.MarginLeft = 3
            control.MarginRight = 3
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180
            control.MarginTop = 3
            control.MarginBottom = 3
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left
            control.BackColor = Color.Red
            control.Text = "NO SMOKING"
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.MarginRight">
            <summary>
            Gets or sets the margin between the right edge of the control and its contents.
            </summary>
            <example>
            <code lang="csharp">
            control.Picture = Image.FromFile(Application.StartupPath + "\\smokes.bmp");
            control.PictureMargin = 34;
            control.MarginTop = 3;
            control.MarginBottom = 3;
            control.MarginLeft = 3;
            control.MarginRight = 3;
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180;
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left;
            control.BackColor = Color.Red;
            control.Text = "NO SMOKING";
            </code>
            <code lang="vb">
            control.Picture = Image.FromFile(Application.StartupPath &amp; "\smokes.bmp")
            control.PictureMargin = 34
            control.MarginTop = 3
            control.MarginBottom = 3
            control.MarginLeft = 3
            control.MarginRight = 3
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180
            control.MarginTop = 3
            control.MarginBottom = 3
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left
            control.BackColor = Color.Red
            control.Text = "NO SMOKING"
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Redraw">
            <summary>
            Gets or sets whether the element is allowed to paint.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:FarPoint.Win.ElementContainerControl.Parent" -->
        <member name="P:FarPoint.Win.ElementContainerControl.SkipMouseProcessing">
            <summary>
            Sets the mouse processing flag of the control.
            </summary>  
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.ActiveWindowlessObject">
            <summary>
            Gets or sets the active child object of the control.
            </summary>  
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Visible">
            <summary>
            Gets or sets whether the control is visible.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Enabled">
            <summary>
            Gets or sets whether the control can receive focus and respond to user actions.
            </summary>    
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Selectable">
            <summary>
            Gets or sets whether the control can receive focus. 
            </summary>   
        </member>
        <!-- Badly formed XML comment ignored for member "P:FarPoint.Win.ElementContainerControl.CanFocus" -->
        <member name="P:FarPoint.Win.ElementContainerControl.Border">
            <summary>
            Gets or sets the border for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.AlignText">
            <summary>
            Gets or sets the alignment of the text in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.TextOrientation">
            <summary>
            Gets or sets the orientation of the text in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.TextRotationAngle">
            <summary>
            Gets or sets the rotation angle of the text in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.TextRotationAnglePriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.PictureOrientation">
            <summary>
            Gets or sets the orientation of the picture in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.PictureTransparencyColor">
            <summary>
            Gets or sets the transparency color for the picture in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.ForegroundImage">
            <summary>
            Gets or sets the foreground image for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.BackgroundImage">
            <summary>
            Gets or sets the background image for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Picture">
            <summary>
            Gets or sets the picture for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.DrawFocusRectangle">
            <summary>
            Gets or sets the focus rectangle drawing style in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.State">
            <summary>
            Gets or sets the element state for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Font">
            <summary>
            Gets or sets the font for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.FontPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Text">
            <summary>
            Gets or sets the contents of the control as a string matching exactly what is displayed.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.TextPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.About">
            <summary>
            Gets or sets information about the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Name">
            <summary>
            Gets or sets the name used in code to identify the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.ForeColor">
            <summary>
            Gets or sets the text color for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.ForeColorPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:FarPoint.Win.ElementContainerControl.AlignHorz" -->
        <member name="P:FarPoint.Win.ElementContainerControl.AlignHorzPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.AlignVert">
            <summary>
            Gets or sets the vertical alignment of the contents of the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.AlignVertPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Rectangle">
            <summary>
            Gets or sets the rectangle in the client area of the control. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.StateNotifyList">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Elements">
            <summary>
            Gets the collection of IElement-derived objects that the current ElementControl contains.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.ElementsPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.#ctor">
            <summary>
            Handles the settings for the base for the canvas container.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.#ctor(System.Object)">
            <summary>
            Handles the settings for the base for the canvas container with the clone specified.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.#ctor(System.Object,System.Boolean)">
            <summary>
            Handles the settings for the canvas container with the clone specified and no parent.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.OnSizeChanged(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>    
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.Reset">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.ResetText">
            <summary>
            Resets the contents to the default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.AdjustStringFormat(System.Drawing.StringFormat@)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.AdjustClientArea">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.ProcessMnemonic(System.Char)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.SetElementBounds(System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.OnGotFocus(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.  MouseDown processing.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.  MouseUp processing.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CanvasContainerBase.CanFocus">
            <summary>
            Gets or sets whether the control can receive focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CanvasContainerBase.HotkeyPrefix">
            <summary>
            Gets or sets whether the underscore appears for hot keys - 
            whether an ampersand typed in front of a character 
            underlines the character.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.FmtParsedTypeMask">
            <summary>
            ParsedTypeMaskString
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.AbstractFmtParsed">
            <summary>
            Implements the AbstractFmtParsed class.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.AbstractFmtParsed.FromFormattedString(System.String)">
            <summary>
            Parses and returns the "value" from a formatted string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.AbstractFmtParsed.ToFormattedString(System.Object)">
            <summary>
            Returns a formatted string (plus attributes) for the value passed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.AbstractFmtParsed.FromUnformattedString(System.String)">
            <summary>
            Parses and returns the "value" from an unformatted string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.AbstractFmtParsed.ToUnformattedString(System.Object)">
            <summary>
            Returns an unformatted string for the value passed.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.AbstractFmtParsed.HasRegionSettings">
            <summary>
            Property that indicates whether we have specific 
            regional settings set (non-default).
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.AbstractFmtParsed.RegionSettings">
            <summary>
            Gets or sets the Regional settings.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.IManageFmtInput">
            <summary>
            IManageFmtInput - An interface which provides a way to 
            determine if specified user input action is valid for a 
            format and supplies the results of the action.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.GetInitialText">
            <summary>
            This returns the initial text for a format.  Used when
            starting a new value.  Note: this gives the same results as
            "ChangeText()" called with all the text selected and the
            "insertText" parameter null or empty.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.CharInput(System.Int32,System.Char,System.String,System.Int32,System.Int32,System.String@,System.Int32@,System.Boolean)">
            <summary>
            Returns the resulting text and position if char is 
            allowed under given conditions. If not allowed, 
            false is returned.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.ChangeText(System.String,System.Int32,System.Int32,System.String,System.String@,System.Int32@,System.Boolean)">
            <summary>
            Returns the resulting text and position if change
            is allowed for the given conditions.  If no changes
            were made (do to invalid input), false is returned.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.ChangeText(System.String,System.String@)">
            <summary>
            Returns the resulting text if change
            is allowed for the given conditions.  If no changes
            were made (due to invalid input), false is returned.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.GetInitialInputPos(System.String)">
            <summary>
            Returns the initial input position for the given text.
            This initial position may not be first input position.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.IsInputAllowedAtPos(System.String,System.Int32)">
            <summary>
            Returns whether input is allowed at the specified 
            position (index) for the given text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.GetLastPosInputIsAllowed(System.String)">
            <summary>
            Returns the last position which can receive input 
            for the given text, 
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.GetNextInputPos(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the next input position dependent on the direction,
            the current text and the current position.
            -1 for direction means previous
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.GetCaretTypeAtPos(System.String,System.Int32)">
            <summary>
            Returns one of the following values for the position in
            the given text:  
              InputPosType.InsertPos, .FixedFldPos, or .LiteralPos
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.IncrementValue(System.String,System.Int32,System.Object,System.Boolean,System.Object,System.String@,System.Int32@)">
            <summary>
            Increments or decrements (dependent on sign of "incrAmt")
            the value represented by the text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.GetFormatStringAtPos(System.String,System.Int32)">
            <summary>
            Returns the format string for the field at the specified
            position in the given text.  
            Example: Format String: "d/mm/yy", currText: "25/12/02"
                     position: 3.  This method will return "mm".
            Returns "" if bad position.  If at a literal position,
            then the char at that position, preceded with a backslash,
            is returned ("\c" where 'c' is the actual char).
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.IsNegative(System.String)">
            <summary>
            Returns whether a string is negative according to the region settings
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IManageFmtInput.MinimumValue">
            <summary>
            Minimum value, optional. To clear, set to null.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IManageFmtInput.MaximumValue">
            <summary>
            Maximum value, optional. To clear, set to null.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IManageFmtInput.InitialValue">
            <summary>
            Initial value if string is null, optional. 
            To clear, set to null.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.FromFormattedString(System.String)">
            <summary>
            Parses and returns the "value" from a formatted string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.ToFormattedString(System.Object)">
            <summary>
            Returns a formatted string (plus attributes) for the value passed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.FromUnformattedString(System.String)">
            <summary>
            Parses and returns the "value" from an unformatted string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.ChangeText(System.String,System.String@)">
            <summary>
            Returns the resulting text if change
            is allowed for the given conditions.  If no changes
            were made (due to invalid input), false is returned.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.ChangeText(System.String,System.Int32,System.Int32,System.String,System.String@,System.Int32@,System.Boolean)">
            <summary>
            Returns the resulting text and position if change
            is allowed for the given conditions.  If no changes
            were made (do to invalid input), false is returned.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedTypeMask.displayLeadingZero">
            <summary>
            Determines if a leading zero is displayed when a float
            value is less than 1.0 and greater than -1.0 (0.xx).
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedTypeMask.daylessDate">
            <summary>
            Whether the date format only includes the month and year.
            In this case, the day is always assumed to be 1.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetFldStrList(System.Int32,FarPoint.Win.SuperEdit.IRegionalSettings)">
            <summary>
            If there's a list associated with this fld id, return it. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetAllValues(System.String)">
            <summary>
            Parses the passed text string for "field values" and puts
            those binary values in a newly allocated MaskFldValue object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.FmtFldIdAtPos(System.Int32,System.Int32@,System.Int32@,System.String,System.Int32,System.Boolean)">
             <summary>
             Returns the format field id given the position within the string.
            
             NOTE: Only the parameter, "uPos", is required, all others are optional;
                   though, "tstrText" and uTextLen are needed if the SpecialMask
                   type is either FLOAT or INTEGER.
             </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetVarFldLen(System.Int32,System.String,System.Int32)">
            <summary>
            Returns the len of the variable-length field at the
            start position in the text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetBinaryValue(System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean@,System.Int32@)">
             <summary>
             This function converts the string of chars for a given field type
             to a binary value.  
            
             For example, if "03" is given for a field type, MM (2 digit month),
             then a value of 3 is returned in the parameter "pBinaryValBuff".
            
             Another example, if "JUN" is given for a field type of MMM 
             (3 letter month), then a value of 6 is returned in the parameter.
            
             If "fNormalizeStr" is true, then CopyNumberWithoutThSep() is called
             if "eFldValFmt" is MaskFmtInt or MaskFmtFltWhl.
            
             Returns a non-null value if string could be converted.
             </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.CopyNumberDigitsAndSign(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Copies the text for a number from one buffer to the other, 
            stripping out anything not a neg sign, decimal separator,
            or digits. Adjusts the returned len and also the specified 
            current position. Returns new string if ok, else null.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.AdjustInputLenForNumber(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int32@,System.Boolean)">
            <summary>
             Parse the string and determine the true length of this
             field as it relates to the actual text.
            
             Returns next index to process.  If no valid chars for the field 
             were found, then the starting index is returned (uFldStartIndex).
            
             The parameter, "fFindFldEnd", is true, this function processes 
             all the chars until it reaches what it considers the end of 
             the field, otherwise the function stops after it has processed 
             the char at "uTargetPos" or the end of the field, which ever 
             comes first.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.VerifyCharForFldAtPos(System.Char,System.Int32,System.String@,System.Int32@,System.Int32,System.Int32,System.Int32,System.Boolean@)">
             <summary>
             Verify that field value is in valid range. (ex. 1..12 for month,
             1..31 for day).
            
             NOTE: At this point, the char is a valid char (digit if for a
             number value, a letter if for a text field, like 3-char month).
             
             Returns 2 if char should be applied to next field,
             1 if ok, 0 if error.
             </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.ProcessDayOfWeekChg(System.String@,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns true if processing is complete and ok.
            Otherwise, returns false if an error occurred like a date 
            that is outside the min/max range.
            Note: Parameter posWithinFld is current position within
            the specified fld, the location in the string must
            be determined first then added to "posWithinFld".
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.ProcessEraChange(System.String@,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns true if processing is complete and ok.
            Otherwise, returns false if an error occurred like a date 
            that is outside the min/max range.
            Note: Parameter posWithinFld is current position within
            the specified fld, the location in the string must
            be determined first then added to "posWithinFld".
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedTypeMask.minValue">
            <summary>
            Minimum value, optional. To clear, set to null.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedTypeMask.maxValue">
            <summary>
            Maximum value, optional. To clear, set to null.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedTypeMask.initialValue">
            <summary>
            Initial value if string is null, optional. 
            To clear, set to null.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetInitialText">
            <summary>
            This returns the initial text for a format.  Used when
            starting a new value.  Note: this gives the same results as
            "ChangeText()" called with all the text selected and the
            "insertText" parameter null or empty.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.CharInput(System.Int32,System.Char,System.String,System.Int32,System.Int32,System.String@,System.Int32@,System.Boolean)">
            <summary>
            Returns the resulting text and position if char is 
            allowed under given conditions. If not allowed, 
            false is returned.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetInitialInputPos(System.String)">
            <summary>
            Returns the initial input position for the given text.
            This initial position may not be first input position.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.IsInputAllowedAtPos(System.String,System.Int32)">
            <summary>
            Returns whether input is allowed at the specified 
            position (index) for the given text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetLastPosInputIsAllowed(System.String)">
            <summary>
            Returns the last position which can receive input 
            for the given text, 
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetNextInputPos(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the next input position dependent on the direction,
            the current text and the current position.  
            If no valid "next position", -1 is returned.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetCaretTypeAtPos(System.String,System.Int32)">
            <summary>
            Returns one of the following values for the position in
            the given text:  
            INSERT_POS, FIXEDFLD_POS, LITERAL_POS
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.VerifyInputKeyForNumber(System.Int32,System.Char,System.String,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Process char for a number (either integer or float).
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetFmtFldFracStartPos(System.String,System.Int32)">
            <summary>
            Returns the starting position in the passed string for the
            fractional portion of a float.
            Note: "startPos" is optional (pass -1 if not specified)
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.FindPosAtDecimal(System.String,System.Boolean)">
            <summary>
            Given the new text and desired position relative to 
            the decimal point, determines the new cursor position in 
            the new text.  
            </summary>
            <returns>
            Returns -1 if decimal point is not found, otherwise
            the correct position relative to the decimal is returned.
            </returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.FindNewCaretPosForNumStr(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Given the new text and the new position in number of digits,
            determines the new cursor position in the new text.  
            </summary>
            <remarks>
            Use -1 for the <i>maxNumOfDigits</i> parameter if the number of digits is not known.
            </remarks>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetNumericDigitsInField(System.String,System.Int32)">
            <summary>
            Counts the number of digits in a string starting at beginPos and going for maxLength
            If maxLength is -1, use text.Length
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.DeleteCharsFromNumStr(System.String,System.Int32,System.Int32,System.Boolean,System.String@,System.Int32@,System.Boolean@)">
            <summary>
            Deletes the chars from the number string (integer or float).
            Digits and negative sign are removed from the number to
            the left of the decimal point, 0's replace any digits
            removed from the right of the decimal point.
            Returns TRUE if no errors.  Return parameter, "retDataChanged",
            is true if any changes were made to the string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.InsertStrIntoNumStr(System.String,System.Int32,System.String,System.Boolean,System.String@,System.Int32@,System.Boolean@)">
            <summary>
            Deletes the chars from the number string (integer or float).
            Digits and negative sign are removed from the number to
            the left of the decimal point, 0's replace any digits
            removed from the right of the decimal point.
            Returns TRUE if no errors.  Return parameter, "retDataChanged",
            is true if any changes were made to the string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.FindFldPos(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns the begin position and end position of the
            specified field.  Returns true if found, else false.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.AdjustCaretPosForNumStr(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Counts the number of digits at the old position in
            the old string and returns the same position in the 
            new string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.DeleteCharsFromDateTime(System.String,System.Int32,System.Int32,System.Boolean,System.String@,System.Int32@,System.Boolean@)">
            <summary>
            Deletes the chars from the date-time string.
            All positions are just replaced with 0's or blanks,
            no chars are really deleted, just "reset".
            Returns TRUE if no errors.  Return parameter, "retDataChanged",
            is true if any changes were made to the string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.InsertStrIntoDateTime(System.String,System.Int32,System.String,System.String@,System.Int32@,System.Boolean@)">
            <summary>
            Insert the chars into the date-time string.
            Returns TRUE if no errors.  Return parameter, "retDataChanged",
            is true if any changes were made to the string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.SkipLitCharsInDateTimeInsertStr(System.Text.StringBuilder,System.Int32,System.String,System.Int32,System.Int32@)">
            <summary>
            Returns the index into the "insert string" for the position
            which relates to position AFTER this string of literal chars.
            If we run-out of chars in the insert string, the length
            of "insertStr" is returned as the index into the insert string.
            
            Note, this may add chars to the "currText" if it does not
            include the literal chars.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.SkipSpecialLitCharsInDateTimeInsertStr(System.Text.StringBuilder,System.Int32,System.String,System.Int32,System.Int32@,System.Int32)">
            <summary>
            Returns the index into the "insert string" for the position
            which relates to position AFTER this string of special literal chars.
            If we run-out of chars in the insert string, the length
            of "insertStr" is returned as the index into the insert string.
            
            Note, this may add chars to the "currText" if it does not
            include the special literal chars, such as date separator and time separator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetLiteralStrAtPos(System.Int32,System.Int32@,System.String)">
            <summary>
            Returns literal string at "pos".  If none at that position,
            then null is returned.  "retBeginIndex" returns the 
            position where the literal string begins in the text.
            This does not work for number since it does not take
            the current text as a parameter.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.ValidateChanges(FarPoint.Win.SuperEdit.MaskFldValue,System.Boolean@)">
            <summary>
            This function verifies that the fields are valid, and 
            modifies them if out of range (for Date or Time, leaves
            unchange for integer and float).
            Returns null if something is not valid and can't be changed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.ValidateChanges(System.String,System.Int32,System.Boolean@)">
            <summary>
            This function verifies that the fields are valid, and 
            modifies them if out of range (for Date or Time, leaves
            unchange for integer and float).
            Returns null if something is not valid and can't be changed.
            </summary>
            <param name="beginPosOfNonFullFld">Pass -1 if there are 
            no incomplete fields, otherwise specify the index</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.IncrementValue(System.String,System.Int32,System.Object,System.Boolean,System.Object,System.String@,System.Int32@)">
            <summary>
            Increments or decrements (dependent on sign of "incrAmt")
            the value represented by the text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.CompareWithShortMonths(System.String,System.Int32@)">
            <summary>
            Returns a month index between 1 and 12 if string matches
            one of the abbreviated month names, otherwise -1.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.CompareWithLongMonths(System.String,System.Int32@)">
            <summary>
            Returns a month index between 1 and 12 if string matches
            one of the long month names, otherwise -1.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.CompareWithShortDays(System.String,System.Int32@)">
            <summary>
            Returns a day index between 1 and 7 if string matches
            one of the abbreviated weekday names, otherwise -1.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.CompareWithLongDays(System.String,System.Int32@)">
            <summary>
            Returns a day index between 1 and 7 if string matches
            one of the long day names, otherwise -1.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.CompareWithAmPm(System.String,System.Int32@)">
            <summary>
            Returns an Am/Pm index between 0 and 1 if string matches
            either of them, otherwise -1.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.CompareWithShortEras(System.String,System.Int32@)">
            <summary>
            Returns an Era index between 0 and (num of eras - 1)
            if string matches any of them, otherwise -1.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.CompareWithLongEras(System.String,System.Int32@)">
            <summary>
            Returns an Era index between 0 and (num of eras - 1)
            if string matches any of them, otherwise -1.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.CmpStrWithStrListHelper(System.String[],System.String,System.Int32@)">
            <summary>
            Returns the index into the "list" (0..len-1) if one matches
            the string in s, otherwise -1 is returned.  The compare ignores
            the length of the strings.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.VerifyListFldValue(System.Int32,System.String)">
            <summary>
            Returns String of closest match to the text specified.
            If no good match, null is returned.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.PrivGetInitialLeadingText">
            <summary>
            Returns the leading text upto the first input position.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetFormatStringAtPos(System.String,System.Int32)">
            <summary>
            Returns the format string for the field at the specified
            position in the given text.  
            Example: Format String: "d/mm/yy", currText: "25/12/02"
                     position: 3.  This method will return "mm".
            Returns "" if bad position.  If at a literal position,
            then the char at that position, preceded with a backslash,
            is returned ("\c" where 'c' is the actual char).
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.IsGregorianCalendar">
            <summary>
            Returns true if currently based on a gregorian calendar.
            </summary>
        </member>
        <member name="T:FarPoint.Win.FontSelector">
            <summary>
            Represents the font selector.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FontSelector.#ctor">
            <summary>
            Creates a new font selector.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FontSelector.#ctor(System.Boolean)">
            <summary>
            Creates a new font selector.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FontSelector.#ctor(System.Boolean,System.String)">
            <summary>
            Creates a new font selector.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FontSelector.RefreshList">
            <summary>
            Refreshes the list.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FontSelector.RenderListWithFont">
            <summary>
            Gets or sets whether to render the font list items with their respective font.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.FmtStrParserTypeMask">
            <summary>
            ParsedTypeMaskString
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.AbstractFmtParser">
            <summary>
            Implements the AbstractFmtParser class.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.AbstractFmtParser.FORMAT_PREDEFINED_COLORS">
            <summary>
            Constants for String Table.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.AbstractFmtParser.parseErrorCharIndex">
            <summary>
            If there's an error while parsing the format string,
            this property will indicate the first char index were
            the problem starts.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.AbstractFmtParser.stringTable">
            <summary>
            Sets the dictionary to use for the StringTable.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.AbstractFmtParser.defaultStringTable">
            <summary>
            Default string table in case one is not supplied.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.AbstractFmtParser.CreateDefaultStringTable">
            <summary>
            Creates the default string table when invoked.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.AbstractFmtParser.ParseFormatString(System.String,FarPoint.Win.SuperEdit.MaskType)">
            <summary>
            Parses format string into its various parts.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.AbstractFmtParser.StrTblComparer">
            <summary>
            This class supplies a simple implementation for the 
            default string table implementation.  Since the KEY for 
            the string table is just an integer, this one method just 
            compares 2 integers.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserTypeMask.ParseFormatString(System.String,FarPoint.Win.SuperEdit.MaskType)">
            <summary>
            Parses format string into its various parts.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserTypeMask.ParseChar(System.String,System.Int32,System.Int32@,System.Char@,System.Int32@)">
            <summary>
            Parses one char of the format string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserTypeMask.MaxCharCountForParseFld(System.Int32)">
            <summary>
            Returns the max number of C's allowed for this id (ex. for 'Y'
            the max is 4 Y's - YYYY, so 4 is returned for Y).
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserTypeMask.GetLitSegNearFld(System.Int32,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            If no segment between fields (FALSE), 0 is put in Pos and 0 in Len.
            If fBeforeFld is TRUE, then before field, else following field.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserTypeMask.GetLitSegBeforeFld(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            If no segment between fields (FALSE), 0 is put in Pos and 0 in Len.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserTypeMask.WasFldSpecifiedInString(System.Int32,System.Int32@)">
            <summary>
            If the specified fld was included in the format string, then TRUE
            is returned (along with the count of chars in string).
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserTypeMask.GetNumOfFields">
            <summary>
            Returns the value of m_uFormatOrderCount (number of fields found).
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserTypeMask.GetFldIdAtOrderPos(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns the Fld id at the requested order index.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserTypeMask.FillFmtFldArrays">
            <summary>
            Pulls the info from the Parser object and sets up the fmtfld array
            and seperator arrays.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserTypeMask.ValidateFldArrays(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.String)">
            <summary>
            This method verifies that variable-length fields have
            between fields either literal seperators (which must be 
            non-numeric) or fixed-length fields. 
            Two numeric, var-len fields cannot be next to each other
            without a seperator.  In addition, a var-len fld cannot
            precede a fixed length numeric field.
            THROWS AN EXCEPTION if there's a problem.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserTypeMask.GetFldFmtForParsedFldId(System.Int32,System.Int32)">
            <summary>
            Returns the Format Mask Id (MaskFmtYY) for the specified parser field.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ISerializeSupport">
            <summary>
            Interface that supports serialization to XML of objects from the models.  
            </summary>
        </member>
        <member name="M:FarPoint.Win.ISerializeSupport.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the object to XML.
            </summary>
            <param name="w">XmlTextWriter object used to save the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.ISerializeSupport.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the object from XML.
            </summary>
            <param name="r">XmlNodeReader from which to read the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="T:FarPoint.Win.ICanSerializeXml">
            Interface supplied by objects that support serialization to XML,
            but might not be able to save the entire object to XML.
            <summary>
            Interface that supports serialization to XML of objects that might not 
            be able to save the entire object from the models.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ICanSerializeXml.CanSerializeXml">
            <summary>
            Gets whether the entire object can
            be saved to XML and successfully loaded again.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ISerializeSettings">
            <summary>
            Interface that supports serialization to XML of settings from the models.  
            </summary>
        </member>
        <member name="M:FarPoint.Win.ISerializeSettings.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the settings to XML.
            </summary>
            <param name="w">XmlTextWriter object used to save the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.ISerializeSettings.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the settings from XML.
            </summary>
            <param name="r">XmlNodeReader from which to read the settings</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="T:FarPoint.Win.ISerializeStyles">
            <summary>
            Interface that supports serialization to XML of styles from the models. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ISerializeStyles.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the styles to XML.
            </summary>
            <param name="w">XmlTextWriter object used to save the styles</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.ISerializeStyles.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the styles from XML.
            </summary>
            <param name="r">XmlNodeReader from which to read the styles</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="T:FarPoint.Win.ISerializeData">
            <summary>
            Interface that supports serialization to XML of data from the models.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ISerializeData.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the data to XML.
            </summary>
            <param name="w">XmlTextWriter object used to save the data</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.ISerializeData.Serialize(System.Xml.XmlTextWriter,System.Boolean)">
            <summary>
            Saves the data to XML and optionally the data source and bound data.
            </summary>
            <param name="w">XmlTextWriter object used to save the data</param>
            <param name="saveDataSource">Whether to save the data source and bound data</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.ISerializeData.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the data from XML.
            </summary> 
            <param name="r">XmlNodeReader from which to read the data</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="T:FarPoint.Win.ISerializePresentation">
            <summary>
            Interface that supports serialization to XML of presentations from the models. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ISerializePresentation.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the presentation to XML.
            </summary>
            <param name="w">XmlTextWriter object used to save the presentation</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.ISerializePresentation.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the presentation from XML.
            </summary> 
            <param name="r">XmlNodeReader from which to read the presentation</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="T:FarPoint.Win.ISerializeDrawing">
            Interface supplied by objects that support Drawing objects serialization.
            <summary>
            Interface that supports serialization to XML of drawing objects (shapes) from the models. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ISerializeDrawing.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the drawing objects to XML.
            </summary>
            <param name="w">XmlTextWriter object used to save the drawing objects</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.ISerializeDrawing.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the drawing objects from XML.
            </summary> 
            <param name="r">XmlNodeReader from which to read the drawing objects</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="T:FarPoint.Win.Serializer">
            <summary>
            Represents the serializer object for opening from and saving to a file.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Serializer.ExtractNode(System.Xml.XmlNodeReader)">
            <summary>
            Extracts the current node in the specified node reader into
            a new node reader and advances that reader to the next node. 
            </summary>
            <param name="r">XmlNodeReader with which to access data</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.IsDefaultValue(System.Object,System.String,System.Object)">
            <summary>
            Determines if the value of a specified property of an object is the default value.
            </summary>
            <param name="o">Object</param>
            <param name="propName">Name of property</param>
            <param name="propVal">Object containing value to compare</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.CreateObjectInstanceAndDeserialize(System.Xml.XmlNodeReader,System.Type)">
            <summary>
            Creates an object serialized into a specified XML node reader of a specified type.
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
            <param name="type">Type of serialization support</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.CreateObjectInstanceAndDeserialize(System.Xml.XmlNodeReader,System.Type,System.Type)">
            <summary>
            Creates an object serialized into a specified XML node reader of a specified type and interface.
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
            <param name="type">Type of serialization support</param>
            <param name="saveInterface">Serialization interface to use</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.CreateObjectInstanceAndDeserialize(System.Xml.XmlNodeReader,System.Type,System.Type,System.Reflection.Assembly)">
            <summary>
            Creates an object serialized into a specified XML node reader of a specified type, 
            interface, and calling assembly.
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
            <param name="type">Type</param>
            <param name="saveInterface">Serialization interface to use</param>
            <param name="callingAssembly">Calling assembly object</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeImage(System.Drawing.Image,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an image to an XML node as a base-64 encoded string to a specified element
            with the specified writer.
            </summary>
            <param name="image">Image object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializeImage(System.String)">
            <summary>
            Creates an image from the specified serialized base-64 encoded string.
            </summary>
            <param name="base64">base-64 string</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeEnum(System.Enum,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an enumeration value to an XML node with the specified writer.
            </summary>
            <param name="value">Enumeration setting to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializeEnumValue(System.String,System.Type)">
            <summary>
            Deserializes an enumeration value of the specified type.
            </summary>
            <param name="value">String enumeration value</param>
            <param name="enumType">Enumeration type</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeColor(System.Drawing.Color,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes a color to an XML node with the specified writer.
            </summary>
            <param name="c">Color object containing the color</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeColorValue(System.Drawing.Color)">
            <summary>
            Converts a color object into a color name (for example, Blue) 
            or a six-digit hexadecimal color value (for example, #FFFFFF).
            </summary>
            <param name="c">Color object containing the color</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializeColorValue(System.String)">
            <summary>
            Converts a six-digit hexadecimal color value into a color object.
            </summary>
            <param name="s">String containing color value</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeFont(System.Drawing.Font,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes a font into an XML node with the specified writer.
            </summary>
            <param name="font">Font object containing the font</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeFontValue(System.Object,System.Xml.XmlTextWriter)">
            <summary>
            Serializes a font to an XML node with the specified writer
            without writing element tags.
            </summary>
            <param name="o">Font object containing the font</param>
            <param name="w">XmlTextWriter</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializeFont(System.Xml.XmlNodeReader)">
            <summary>
            Creates and deserializes a font serialized with SerializeFont or SerializeFontValue.
            </summary>
            <param name="r">XmlNodeReader object</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeDateValue(System.DateTime)">
            <summary>
            Converts a DataTime object to a date format string.
            </summary>
            <param name="d">DateTime object to convert</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializeDateValue(System.String)">
            <summary>
            Converts a date format string to a DateTime value.
            </summary>
            <param name="s">Date format string to convert</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DefaultSerializeProp(System.Object)">
            <summary>
            Serializes the specified basic object and returns the string representation
            </summary>
            <param name="o">Object to serialize</param>
            <returns>String representation of the object</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.DefaultDeserializeProp(System.Object,System.Object)">
            <summary>
            Deserializes the specified basic object saved with DefaultSerializeProp and returns the value.
            </summary>
            <param name="prop">Current value of property</param>
            <param name="o">String name of the object to deserialize</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.GetObjectXml(FarPoint.Win.ISerializeSupport,System.String)">
            <summary>
            Serializes an object to an XML string.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.GetObjectXml(FarPoint.Win.ISerializeSupport,System.String,System.Reflection.Assembly)">
            <summary>
            Serializes an object to an XML string.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="callingAssembly">Calling assembly</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SetObjectXml(FarPoint.Win.ISerializeSupport,System.String,System.String)">
            <summary>
            Deserializes an object saved with GetObjectXml using the specified XML string.
            </summary>
            <param name="o">Object to deserialize</param>
            <param name="xml">XML string returned by GetObjectXml</param>
            <param name="elementName">Name of XML element</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.LoadObject(System.Type,System.String,System.String)">
            <summary>
            Loads an object from a file previously saved with Serializer.SaveObject.
            </summary>
            <param name="type">Type of object</param>
            <param name="fileName">Path and name of file from which to load the object</param>
            <param name="elementName">Name of root element node for object</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.LoadObject(System.Type,System.String,System.String,System.Reflection.Assembly)">
            <summary>
            Loads an object from a file previously saved with Serializer.SaveObject.
            </summary>
            <param name="type">Type of object</param>
            <param name="fileName">Path and name of file from which to load the object</param>
            <param name="elementName">Name of root element node for object</param>
            <param name="callingAssembly">Calling assembly</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.LoadObject(System.Type,System.IO.Stream,System.String)">
            <summary>
            Loads an object from a stream previously saved with Serializer.SaveObject.
            </summary>
            <param name="type">Type of object</param>
            <param name="stream">Stream from which to load the object</param>
            <param name="elementName">Name of root element node for object</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.LoadObject(System.Type,System.IO.Stream,System.String,System.Reflection.Assembly)">
            <summary>
            Loads an object from a stream previously saved with Serializer.SaveObject.
            </summary>
            <param name="type">Type</param>
            <param name="stream">Stream from which to load the object</param>
            <param name="elementName">Name of root element node for object</param>
            <param name="callingAssembly">Calling assembly</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.LoadObjectXml(System.Type,System.String,System.String)">
            <summary>
            Creates and deserializes a new instance of an object saved with GetObjectXml.
            </summary>
            <param name="type">Type of object</param>
            <param name="xml">XML string</param>
            <param name="elementName">Name of XML element</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.LoadObjectXml(System.Type,System.String,System.String,System.Reflection.Assembly)">
            <summary>
            Creates and deserializes a new instance of an object saved with GetObjectXml.
            </summary>
            <param name="type">Type of object</param>
            <param name="xml">XML string</param>
            <param name="elementName">Name of XML element</param>
            <param name="callingAssembly">Calling assembly</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SaveObject(System.Object,System.String,System.String)">
            <summary>
            Saves an object as XML to a file.
            </summary>
            <param name="o">Object to save (must implement ISerializeSupport)</param>
            <param name="fileName">File name to save object to</param>
            <param name="rootElement">Name of root XML element</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SaveObject(System.Object,System.IO.Stream,System.String)">
            <summary>
            Saves an object as XML to a stream.
            </summary>
            <param name="o">Object to save (must implement ISerializeSupport)</param>
            <param name="stream">Stream to save object to</param>
            <param name="rootElement">Name of root XML element</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SaveObject(System.Object,System.Type,System.String,System.String)">
            <summary>
            Saves an object as XML to a file using the specified serialization interface.
            </summary>
            <param name="o">Object to save (must implement the specifies serialization interface)</param>
            <param name="saveInterface">Serialization interface to use (must be ISerializeSupport, ISerializeSettings, ISerializeData, ISerializeStyles, ISerializeDrawing, or ISerializePresentation)</param>
            <param name="fileName">File name to save object to</param>
            <param name="rootElement">Name of root XML element</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SaveObject(System.Object,System.Type,System.String,System.String,System.Reflection.Assembly)">
            <summary>
            Saves an object as XML to a file using the specified serialization interface.
            </summary>
            <param name="o">Object to save (must implement the specifies serialization interface)</param>
            <param name="saveInterface">Serialization interface to use (must be ISerializeSupport, ISerializeSettings, ISerializeData, ISerializeStyles, ISerializeDrawing, or ISerializePresentation)</param>
            <param name="fileName">File name to save object to</param>
            <param name="rootElement">Name of root XML element</param>
            <param name="callingAssembly">Calling assembly</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SaveObject(System.Object,System.Type,System.IO.Stream,System.String)">
            <summary>
            Saves an object as XML to a stream using the specified serialization interface.
            </summary>
            <param name="o">Object to save (must implement the specifies serialization interface)</param>
            <param name="saveInterface">Serialization interface to use (must be ISerializeSupport, ISerializeSettings, ISerializeData, ISerializeStyles, ISerializeDrawing, or ISerializePresentation)</param>
            <param name="stream">Stream to save object to</param>
            <param name="rootElement">Name of root XML element</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SaveObject(System.Object,System.Type,System.IO.Stream,System.String,System.Reflection.Assembly)">
            <summary>
            Saves an object as XML to a stream using the specified serialization interface.
            </summary>
            <param name="o">Object to save (must implement the specifies serialization interface)</param>
            <param name="saveInterface">Serialization interface to use (must be ISerializeSupport, ISerializeSettings, ISerializeData, ISerializeStyles, ISerializeDrawing, or ISerializePresentation)</param>
            <param name="stream">Stream to save object to</param>
            <param name="rootElement">Name of root XML element</param>
            <param name="callingAssembly">Calling assembly</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.CanSerializeObject(System.Object)">
            <summary>
            Determines whether the specified object can be serialized to XML.
            </summary>
            <param name="o">Object</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeSettings(System.Object,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an object using the ISerializeSettings interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeStyles(System.Object,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an object using the ISerializeStyles interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeData(System.Object,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an object using the ISerializeData interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeData(System.Object,System.String,System.Xml.XmlTextWriter,System.Boolean)">
            <summary>
            Serializes an object using the ISerializeData interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <param name="saveDataSource">True to save the data source, false otherwise</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializePresentation(System.Object,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an object using the ISerializePresentation interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeDrawing(System.Object,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an object using the ISerializeDrawing interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeObject(System.Object,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an object to an XML node using the ISerializeSupport interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeObject(System.Object,System.String,System.Xml.XmlTextWriter,System.Reflection.Assembly)">
            <summary>
            Serializes an object to an XML node using the ISerializeSupport interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <param name="callingAssembly">Specifies the assembly containing the implementation of the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeObject(System.Object,System.Type,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an object to an XML node using the ISerializeSupport interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="saveInterface">Serialization interface to use</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeObject(System.Object,System.Type,System.String,System.Xml.XmlTextWriter,System.Reflection.Assembly)">
            <summary>
            Serializes an object to an XML node using the ISerializeSupport interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="saveInterface">Serialization interface to use</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <param name="callingAssembly">Specifies the assembly containing the implementation of the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeObject(System.Object,System.Type,System.String,System.Xml.XmlTextWriter,System.Reflection.Assembly,System.Object[])">
            <summary>
            Serializes an object to an XML node using the ISerializeSupport interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="saveInterface">Serialization interface to use</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <param name="callingAssembly">Specifies the assembly containing the implementation of the object</param>
            <param name="args">Arguments to pass to saveInterface.Serialize method (including w as first argument)</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.EncodeObject(System.Object)">
            <summary>
            Encodes an object to a base64 string, if it is serializable. 
            </summary>
            <param name="o">Object to encode</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DecodeObject(System.String)">
            <summary>
            Decodes an object from a base64 string (inverse of EncodeObject).
            </summary>
            <param name="s">base64 encoded string</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeString(System.String,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes a string to XML.
            </summary>
            <param name="value">String</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeStringArray(System.String[],System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an array of strings to XML.
            </summary>
            <param name="array">Array of strings</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializeString(System.Xml.XmlNodeReader)">
            <summary>
            Deserializes a string from XML.
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializeStringArray(System.Xml.XmlNodeReader)">
            <summary>
            Deserializes an array of strings from XML.
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeDateTimeFormatInfo(System.Globalization.DateTimeFormatInfo,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes a DateTimeFormatInfo object to XML.
            </summary>
            <param name="info">DateTimeFormatInfo</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializeDateTimeFormatInfo(System.Xml.XmlNodeReader)">
            <summary>
            Deserializes a DateTimeFormatInfo object from XML.
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeIntArray(System.Int32[],System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an array of integers to XML.
            </summary>
            <param name="array">Array of integers</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeByteArray(System.Byte[],System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an array of bytes to XML.
            </summary>
            <param name="array">Array of bytes</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializePointFArray(System.Drawing.PointF[],System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an array of PointF points to XML.
            </summary>
            <param name="array">Array of floating-point coordinates (PointF points)</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializeIntArray(System.Xml.XmlNodeReader)">
            <summary>
            Deserializes an array of integers from XML
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializeByteArray(System.Xml.XmlNodeReader)">
            <summary>
            Deserializes an array of bytes from XML
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializePointFArray(System.Xml.XmlNodeReader)">
            <summary>
            Deserializes an array of PointF objects from XML
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeNumberFormatInfo(System.Globalization.NumberFormatInfo,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes a NumberFormatInfo object to XML.
            </summary>
            <param name="info">NumberFormatInfo</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializeNumberFormatInfo(System.Xml.XmlNodeReader)">
            <summary>
            Deserializes a NumberFormatInfo object from XML.
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
        </member>
        <member name="T:FarPoint.Win.ComplexBorderSideStyle">
            <summary>
            Specifies the style of the border for one side of a cell.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.None">
            <summary>
            [0] Draws no border at all
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.HairLine">
            <summary>
            [1] Draws a border with a very thin line (hair line)
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.Dotted">
            <summary>
            [2] Draws a border with a dotted line
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.DashDotDot">
            <summary>
            [3] Draws a border with an alternating pattern of one dash and two dots
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.DashDot">
            <summary>
            [4] Draws a border with an alternating pattern of dashes and dots
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.Dashed">
            <summary>
            [5] Draws a border with a dashed line
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.ThinLine">
            <summary>
            [6] Draws a border with a thin line
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.MediumDashDotDot">
            <summary>
            [7] Draws a border with a medium thickness line with an alternating pattern of one dash and two dots
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.SlantedDashDot">
            <summary>
            [8] Draws a border with slanted dash lines alternated with dots.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.MediumDashDot">
            <summary>
            [9] Draws a border with a medium thickness alternating pattern of dashes and dots
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.MediumDashed">
            <summary>
            [10] Draws a border with a medium thickness dashed line
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.MediumLine">
            <summary>
            [11] Draws a border with a medium thickness line
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.ThickLine">
            <summary>
            [12] Draws a border with a thick line
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.DoubleLine">
            <summary>
            [13] Draws a border with a two parallel lines
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.UserDefined">
            <summary>
            [99] Indicates that the side has a user-defined appearance
            </summary>
        </member>
        <member name="T:FarPoint.Win.ComplexBorderSidePattern">
            <summary>
            Specifies the pattern of the border for one side of a cell.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSidePattern.Hair">
            <summary>
            Draws a hair border on one side of a cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSidePattern.DashDot">
            <summary>
            Draws an alternating dash and dot line border on one side of a cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSidePattern.MediumDash">
            <summary>
            Draws a medium-thickness dashed line border on one side of a cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSidePattern.MediumDashDot">
            <summary>
            Draws a medium-thickness alternating dash and dot line border on one side of a cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSidePattern.SlantedDashDot">
            <summary>
            Draws an alternating slanted dash and dot line border on one side of a cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSidePattern.SlantedCompound">
            <summary>
            Draws alternating slanted dash and dot line border on one side of a cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSidePattern.Dotted">
            <summary>
            Draws a dotted line border on one side of a cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSidePattern.DashDotDot">
            <summary>
            Draws a dash-dot-dot line border on one side of a cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSidePattern.MediumDashDotDot">
            <summary>
            Draws a medium-thickness dash-dot-dot line border on one side of a cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSidePattern.DoubleCompound">
            <summary>
            Draws a double line border on one side of a cell
            </summary>
        </member>
        <member name="T:FarPoint.Win.IBorder">
            <summary>
            Interface defined by objects capable of painting a border around a cell.
            </summary>
        </member>
        <member name="M:FarPoint.Win.IBorder.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints the border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">x-coordinate for the top left corner</param>
            <param name="y">y-coordinate for the top left corner</param>
            <param name="width">Width of the border, in pixels</param>
            <param name="height">Height of the border, in pixels</param>
        </member>
        <member name="P:FarPoint.Win.IBorder.Inset">
            <summary>
            Gets the insets of the border.
            </summary>
        </member>
        <member name="T:FarPoint.Win.BevelBorderType">
            <summary>
            Specifies the type of beveled border.
            </summary>
        </member>
        <member name="F:FarPoint.Win.BevelBorderType.Lowered">
            <summary>
            [0] Draws a lowered beveled border
            </summary>
        </member>
        <member name="F:FarPoint.Win.BevelBorderType.Raised">
            <summary>
            [1] Draws a raised beveled border
            </summary>
        </member>
        <member name="T:FarPoint.Win.EmptyBorder">
            <summary>
            Represents an empty border that takes no space.
            </summary>
        </member>
        <member name="M:FarPoint.Win.EmptyBorder.#ctor">
            <summary>
            Creates an empty border (EmptyBorder object).
            </summary>
        </member>
        <member name="M:FarPoint.Win.EmptyBorder.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints the border inside the specified rectangle.
            </summary>
            <param name="g">Graphics object</param>
            <param name="x">x-coordinate for the top-left corner</param>
            <param name="y">y-coordinate for the top-left corner</param>
            <param name="width">Width of the border, in pixels</param>
            <param name="height">Height of the border, in pixels</param>
        </member>
        <member name="M:FarPoint.Win.EmptyBorder.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the object to XML.
            </summary>
            <param name="w">XmlTextWriter object to which to save the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.EmptyBorder.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the object from XML.
            </summary>
            <param name="r">XmlNodeReader from which to load the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="P:FarPoint.Win.EmptyBorder.Inset">
            <summary>
            Gets the insets of the border.
            </summary>
        </member>
        <member name="T:FarPoint.Win.LineBorder">
            <summary>
            Represents a simple single-line border.
            </summary>
        </member>
        <member name="M:FarPoint.Win.LineBorder.#ctor(System.Drawing.Color)">
            <summary>
            Creates a simple single-line border with the specified color.
            </summary>
            <param name="color">Color of the line</param>
        </member>
        <member name="M:FarPoint.Win.LineBorder.#ctor(System.Drawing.Color,System.Int32)">
            <summary>
            Creates a simple single-line border with the specified color and thickness.
            </summary>
            <param name="color">Color of the line</param>
            <param name="thickness">Thickness of the line, in pixels</param>
        </member>
        <member name="M:FarPoint.Win.LineBorder.#ctor(System.Drawing.Color,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a simple single-line border with the specified color, thickness, 
            and sides on which the border is drawn.
            </summary>
            <param name="color">Color of the line</param>
            <param name="thickness">Thickness of the line, in pixels</param>
            <param name="left">Whether the line is drawn on the left side of the cell</param>
            <param name="top">Whether the line is drawn on the top of the cell</param>
            <param name="right">Whether the line is drawn on the right side of the cell</param>
            <param name="bottom">Whether the line is drawn on the bottom of the cell</param>
        </member>
        <member name="M:FarPoint.Win.LineBorder.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints the border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">x-coordinate for the top-left corner</param>
            <param name="y">y-coordinate for the top-left corner</param>
            <param name="width">Width of the line border, in pixels</param>
            <param name="height">Height of the line border, in pixels</param>
        </member>
        <member name="M:FarPoint.Win.LineBorder.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the object to XML.
            </summary>
            <param name="w">XmlTextWriter object to which to save the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.LineBorder.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the object from XML.
            </summary>
            <param name="r">XmlNodeReader from which to load the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="P:FarPoint.Win.LineBorder.Color">
            <summary>
            Gets the color of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.LineBorder.Inset">
            <summary>
            Gets the insets of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.LineBorder.Thickness">
            <summary>
            Gets the thickness of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.LineBorder.Left">
            <summary>
            Gets whether the line is drawn on the left edge of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.LineBorder.Top">
            <summary>
            Gets whether the line is drawn on the top edge of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.LineBorder.Right">
            <summary>
            Gets whether the line is drawn on the right edge of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.LineBorder.Bottom">
            <summary>
            Gets whether the line is drawn on the bottom edge of the border.
            </summary>
        </member>
        <member name="T:FarPoint.Win.LineBorderFactory">
            <summary>
            Represents a class for creating single-line borders in environments
            that do not support parameterized constructors. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.LineBorderFactory.#ctor">
            <summary>
            Creates a single-line border factory.
            </summary>
        </member>
        <member name="M:FarPoint.Win.LineBorderFactory.CreateLineBorder(System.Drawing.Color)">
            <summary>
            Creates a single-line border with the specified color.
            </summary>
            <param name="color">Color of the line</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.LineBorderFactory.CreateLineBorder(System.Drawing.Color,System.Int32)">
            <summary>
            Creates a single-line border with the specified color and thickness.
            </summary>
            <param name="color">Color of the line</param>
            <param name="thickness">Thickness of the line in pixels</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.LineBorderFactory.CreateLineBorder(System.Drawing.Color,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a single-line border with the specified color and thickness, 
            and specifies on which sides the border is drawn.
            </summary>
            <param name="color">Color of the line</param>
            <param name="thickness">Thickness of the line in pixels</param>
            <param name="left">Whether the line is drawn on the left side of the cell</param>
            <param name="top">Whether the line is drawn on the top of the cell</param>
            <param name="right">Whether the line is drawn on the right side of the cell</param>
            <param name="bottom">Whether the line is drawn on the bottom of the cell</param>
            <returns></returns>
        </member>
        <member name="T:FarPoint.Win.RoundedLineBorder">
            <summary>
            Represents a rounded-edge single-line border.
            </summary>
        </member>
        <member name="M:FarPoint.Win.RoundedLineBorder.#ctor(System.Drawing.Color)">
            <summary>
            Creates a rounded-edge, single-line border with the specified color.
            </summary>
            <param name="color">Color of the line</param>
        </member>
        <member name="M:FarPoint.Win.RoundedLineBorder.#ctor(System.Drawing.Color,System.Int32)">
            <summary>
            Creates a rounded-edge, single-line border with the specified color and thickness.
            </summary>
            <param name="color">Color of the line</param>
            <param name="thickness">Thickness of the line in pixels</param>
        </member>
        <member name="M:FarPoint.Win.RoundedLineBorder.#ctor(System.Drawing.Color,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a rounded-edge, single-line border with the specified color and thickness, 
            and specifies on which sides the border is drawn.
            </summary>
            <param name="color">Color of the line</param>
            <param name="thickness">Thickness of the line in pixels</param>
            <param name="left">Whether the line is drawn on the left side of the cell</param>
            <param name="top">Whether the line is drawn on the top of the cell</param>
            <param name="right">Whether the line is drawn on the right side of the cell</param>
            <param name="bottom">Whether the line is drawn on the bottom of the cell</param>
        </member>
        <member name="M:FarPoint.Win.RoundedLineBorder.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints the border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">x-coordinate for the top-left corner</param>
            <param name="y">y-coordinate for the top-left corner</param>
            <param name="width">Width of the border, in pixels</param>
            <param name="height">Height of the border, in pixels</param>
        </member>
        <member name="T:FarPoint.Win.RoundedLineBorderFactory">
            <summary>
            Represents a class for creating RoundedLineBorder objects in environments
            that do not support parameterized constructors. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.RoundedLineBorderFactory.#ctor">
            <summary>
            Creates a RoundedLineBorderFactory object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.RoundedLineBorderFactory.CreateRoundedLineBorder(System.Drawing.Color)">
            <summary>
            Creates a rounded line border with the specified color.
            </summary>
            <param name="color">Color of the line</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.RoundedLineBorderFactory.CreateRoundedLineBorder(System.Drawing.Color,System.Int32)">
            <summary>
            Creates a rounded line border with the specified color and thickness.
            </summary>
            <param name="color">Color of the line</param>
            <param name="thickness">Thickness of the line in pixels</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.RoundedLineBorderFactory.CreateRoundedLineBorder(System.Drawing.Color,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a rounded line border with the specified color and thickness, 
            and specifies on which sides the border is drawn.
            </summary>
            <param name="color">Color of the line</param>
            <param name="thickness">Thickness of the line in pixels</param>
            <param name="left">Whether the line is drawn on the left side of the cell</param>
            <param name="top">Whether the line is drawn on the top of the cell</param>
            <param name="right">Whether the line is drawn on the right side of the cell</param>
            <param name="bottom">Whether the line is drawn on the bottom of the cell</param>
            <returns></returns>
        </member>
        <member name="T:FarPoint.Win.BevelBorder">
            <summary>
            Represents a simple one-line beveled border.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.#ctor(FarPoint.Win.BevelBorderType)">
            <summary>
            Creates a beveled border of the specified type.
            </summary>
            <param name="type">Type of beveled border</param>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.#ctor(FarPoint.Win.BevelBorderType,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a beveled border with the specified type, highlight color,
            and shadow color.
            </summary>
            <param name="type">Type of beveled border</param>
            <param name="highlight">Color of highlight for beveled border</param>
            <param name="shadow">Color of shadow for beveled border</param>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.#ctor(FarPoint.Win.BevelBorderType,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Creates a beveled border with the specified type, highlight color,
            shadow color, and thickness.
            </summary>
            <param name="type">Type of beveled border</param>
            <param name="highlight">Color of highlight for beveled border</param>
            <param name="shadow">Color of shadow for beveled border</param>
            <param name="thickness">Thickness of beveled border in pixels</param>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.#ctor(FarPoint.Win.BevelBorderType,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a beveled border with the specified type, highlight color,
            shadow color, thickness, and sides on which the border is drawn.
            </summary>
            <param name="type">Type of beveled border</param>
            <param name="highlight">Color of highlight for beveled border</param>
            <param name="shadow">Color of shadow for beveled border</param>
            <param name="thickness">Thickness of beveled border in pixels</param>
            <param name="left">Whether to draw the left side</param>
            <param name="top">Whether to draw the top</param>
            <param name="right">Whether to draw the right side</param>
            <param name="bottom">Whether to draw the bottom</param>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.PaintLowered(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints a lowered border inside the specified rectangle. 
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">x-coordinate for the top left corner</param>
            <param name="y">y-coordinate for the top left corner</param>
            <param name="width">Width of the lowered border, in pixels</param>
            <param name="height">Height of the lowered border, in pixels</param>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.PaintRaised(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints a raised border inside the specified rectangle. 
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">x-coordinate for the top left corner</param>
            <param name="y">y-coordinate for the top left corner</param>
            <param name="width">Width of the raised border, in pixels</param>
            <param name="height">Height of the raised border, in pixels</param>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints the beveled border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">x-coordinate for the top left corner</param>
            <param name="y">y-coordinate for the top left corner</param>
            <param name="width">Width of the border, in pixels</param>
            <param name="height">Height of the border, in pixels</param>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the object to XML.
            </summary>
            <param name="w">XmlTextWriter object to which to save the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the object from XML.
            </summary>
            <param name="r">XmlNodeReader from which to load the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="P:FarPoint.Win.BevelBorder.Type">
            <summary>
            Gets the type of beveling for the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.BevelBorder.Highlight">
            <summary>
            Gets the highlight color of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.BevelBorder.Shadow">
            <summary>
            Gets the shadow color of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.BevelBorder.Thickness">
            <summary>
            Gets the thickness of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.BevelBorder.Inset">
            <summary>
            Gets the insets of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.BevelBorder.Left">
            <summary>
            Gets whether the line is drawn on the left edge of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.BevelBorder.Top">
            <summary>
            Gets whether the line is drawn on the top edge of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.BevelBorder.Right">
            <summary>
            Gets whether the line is drawn on the right edge of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.BevelBorder.Bottom">
            <summary>
            Gets whether the line is drawn on the bottom edge of the border.
            </summary>
        </member>
        <member name="T:FarPoint.Win.BevelBorderFactory">
            <summary>
            Represents an object for a creating beveled border in environments
            that do not support parameterized constructors. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.BevelBorderFactory.#ctor">
            <summary>
            Creates a beveled border factory. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.BevelBorderFactory.CreateBevelBorder(FarPoint.Win.BevelBorderType)">
            <summary>
            Creates a beveled border with the specified type.
            </summary>
            <param name="type">Type of beveled border</param>
            <returns>Beveled border (BevelBorder object) with the parameter specified</returns>
        </member>
        <member name="M:FarPoint.Win.BevelBorderFactory.CreateBevelBorder(FarPoint.Win.BevelBorderType,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a beveled border with the specified type, highlight color,
            and shadow color.
            </summary>
            <param name="type">Type of beveled border, whether lowered or raised</param>
            <param name="highlight">Color of highlight for beveled border</param>
            <param name="shadow">Color of shadow for beveled border</param>
            <returns>Beveled border (BevelBorder object) with the parameters specified</returns>
        </member>
        <member name="M:FarPoint.Win.BevelBorderFactory.CreateBevelBorder(FarPoint.Win.BevelBorderType,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Creates a beveled border with the specified type, highlight color,
            shadow color, and thickness.
            </summary>
            <param name="type">Type of beveled border, whether lowered or raised</param>
            <param name="highlight">Color of highlight for beveled border</param>
            <param name="shadow">Color of shadow for beveled border</param>
            <param name="thickness">Thickness of beveled border in pixels</param>
            <returns>Beveled border (BevelBorder object) with the parameters specified</returns>
        </member>
        <member name="M:FarPoint.Win.BevelBorderFactory.CreateBevelBorder(FarPoint.Win.BevelBorderType,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a beveled border with the specified type, highlight color,
            shadow color, thickness, and sides on which the border is drawn.
            </summary>
            <param name="type">Type of beveled border, whether lowered or raised</param>
            <param name="highlight">Color of highlight for beveled border</param>
            <param name="shadow">Color of shadow for beveled border</param>
            <param name="thickness">Thickness of beveled border in pixels</param>
            <param name="left">Whether to draw the left side</param>
            <param name="top">Whether to draw the top</param>
            <param name="right">Whether to draw the right side</param>
            <param name="bottom">Whether to draw the bottom</param>
            <returns>Beveled border (BevelBorder object) with the parameters specified</returns>
        </member>
        <member name="T:FarPoint.Win.CompoundBorder">
            <summary>
            Represents a compound border.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CompoundBorder.#ctor(FarPoint.Win.IBorder,FarPoint.Win.IBorder)">
            <summary>
            Creates a compound border with the specified inside and outside borders.
            </summary>
            <param name="outside">Outside border</param>
            <param name="inside">Inside border</param>
        </member>
        <member name="M:FarPoint.Win.CompoundBorder.#ctor(FarPoint.Win.IBorder,FarPoint.Win.IBorder,System.Int32,System.Drawing.Color)">
            <summary>
            Creates a compound border with the specified inside and outside borders 
            and the specified face color.
            </summary>
            <param name="outside">Outside border</param>
            <param name="inside">Inside border</param>
            <param name="faceWidth">Face width of the border</param>
            <param name="faceColor">Face color of the border</param>
        </member>
        <member name="M:FarPoint.Win.CompoundBorder.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints the compound border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">x-coordinate for the top-left corner</param>
            <param name="y">y-coordinate for the top-left corner</param>
            <param name="width">Width of the compound border, in pixels</param>
            <param name="height">Height of the compound border, in pixels</param>
        </member>
        <member name="M:FarPoint.Win.CompoundBorder.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the object to XML.
            </summary>
            <param name="w">XmlTextWriter object to which to save the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.CompoundBorder.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the object from XML.
            </summary>
            <param name="r">XmlNodeReader from which to load the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="P:FarPoint.Win.CompoundBorder.Outside">
            <summary>
            Gets the outside border for a compound border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CompoundBorder.Inside">
            <summary>
            Gets the inside border for a compound border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CompoundBorder.Inset">
            <summary>
            Gets the insets of the border for a compound border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CompoundBorder.FaceColor">
            <summary>
            Gets the color of the face for a compound border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CompoundBorder.FaceWidth">
            <summary>
            Gets the width of the face for a compound border.
            </summary>
        </member>
        <member name="T:FarPoint.Win.CompoundBorderFactory">
            <summary>
            Represents an object for creating a compound border in environments
            that do not support parameterized constructors. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.CompoundBorderFactory.#ctor">
            <summary>
            Creates a compound border factory. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.CompoundBorderFactory.CreateCompoundBorder(FarPoint.Win.IBorder,FarPoint.Win.IBorder)">
            <summary>
            Creates a compound border with the specified inside and outside borders.
            </summary>
            <param name="outside">Outside border</param>
            <param name="inside">Inside border</param>
            <returns>Compound border (CompoundBorder object) with the parameters specified</returns>
        </member>
        <member name="T:FarPoint.Win.ComplexBorderSide">
            <summary>
            Represents one side of a four-sided, complex border.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.#ctor">
            <summary>
            Creates one side of a four-sided, complex border with default color SystemColors.WindowFrame,
            default width of 1, default dash style of Solid, and empty dash pattern and compound array.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.#ctor(FarPoint.Win.ComplexBorderSideStyle)">
            <summary>
            Creates one side of a four-sided, complex border with settings equivalent to the specified side style.
            </summary>
            <param name="sideStyle">Border style for one side</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.#ctor(FarPoint.Win.ComplexBorderSideStyle,System.Drawing.Color)">
            <summary>
            Creates one side of a four-sided, complex border with the specified style and color.
            </summary>
            <param name="sideStyle">Style of the border side</param>
            <param name="sideColor">Color of the border side</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.#ctor(System.Drawing.Color)">
            <summary>
            Creates one side of a four-sided, complex border with the specified color.
            </summary>
            <param name="color">Color for the border side</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.#ctor(System.Drawing.Color,System.Int32)">
            <summary>
            Creates one side of a four-sided, complex border with the specified color and width.
            </summary>
            <param name="color">Color for this side of the border</param>
            <param name="width">Width of this side of the border, in pixels</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.#ctor(System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle)">
            <summary>
            Creates one side of a four-sided, complex border with the specified color, width, and dash style.
            </summary>
            <param name="color">Color for this side of the border</param>
            <param name="width">Width of this side of the border, in pixels</param>
            <param name="dashStyle">Style of dashed line for this side of the border; 
            a setting of the .NET Framework's DashStyle enumeration</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.#ctor(System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle,System.Single[],System.Single[])">
            <summary>
            Creates one side of a four-sided, complex border with the specified color, width,
            dash style, dash pattern, and compound array.
            </summary>
            <param name="color">Color for this side of the border</param>
            <param name="width">Width of this side of the border, in pixels</param>
            <param name="dashStyle">Style of dashed line for this side of the border; 
            a setting of the DashStyle enumeration of the Microsoft .NET Framework</param>
            <param name="dashPattern">Pattern of dashes for this side of the border</param>
            <param name="compoundArray">Array of values that specify a compound line made up of parallel lines and spaces</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.#ctor(System.Boolean,System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle,System.Single[],System.Single[])">
            <summary>
            Creates one side of a four-sided, complex border with the specified color, width,
            dash style, dash pattern and compound array, and whether to draw the side.
            </summary>
            <param name="draw">Whether to draw that size of the border</param>
            <param name="color">Color for this side of the border</param>
            <param name="width">Width of this side of the border, in pixels</param>
            <param name="dashStyle">Style of dashed line for this side of the border; 
            a setting of the DashStyle enumeration of the Microsoft .NET Framework</param>
            <param name="dashPattern">Pattern of dashes for this side of the border</param>
            <param name="compoundArray">Array of values that specify a compound line made up of parallel lines and spaces</param>
            <exception cref="T:System.ArgumentException">Specified dash pattern not valid; must be positive value</exception>
            <exception cref="T:System.ArgumentException">Specified compound array values not valid; must be between 0 and 1</exception>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.Equals(System.Object)">
            <summary>
            Compares the specified object to this ComplexBorderSide object.
            </summary>
            <param name="o">Object to compare</param>
            <returns>true if equivalent; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.GetHashCode">
            <summary>
            Gets the hash code of the ComplexBorderSide object. 
            </summary>
            <returns>Integer with hash code of the object</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.ToString">
            <summary>
            Converts the complex border side to a string.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ComplexBorderSide.Draw">
            <summary>
            Gets whether this side is drawn in the complex border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ComplexBorderSide.Color">
            <summary>
            Gets the color of this side of the complex border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ComplexBorderSide.Width">
            <summary>
            Gets the width of this side of the complex border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ComplexBorderSide.DashStyle">
            <summary>
            Gets the dash style of this side of the complex border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ComplexBorderSide.DashPattern">
            <summary>
            Gets the dash pattern array of this side of the complex border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ComplexBorderSide.CompoundArray">
            <summary>
            Gets array values that specify a compound line made up of parallel lines and spaces 
            of this side of the complex border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ComplexBorderSide.Style">
            <summary>
            Gets the style of this side of the complex border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ComplexBorderSide.Empty">
            <summary>
            Gets an empty ComplexBorderSide (Draw = false).
            </summary>
        </member>
        <member name="T:FarPoint.Win.ComplexBorderSideFactory">
            <summary>
            Represents an object that provides a means of creating a complex border side in environments
            that do not support parameterized constructors. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideFactory.#ctor">
            <summary>
            Creates a complex border side. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideFactory.CreateComplexBorderSide(FarPoint.Win.ComplexBorderSideStyle)">
            <summary>
            Creates a complex border side with the specified ComplexBorderSideStyle.
            </summary>
            <param name="sideStyle">ComplexBorderSideStyle of the side</param>
            <returns>Complex border side (ComplexBorderSide object) with the parameters specified</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideFactory.CreateComplexBorderSide(FarPoint.Win.ComplexBorderSideStyle,System.Drawing.Color)">
            <summary>
            Creates a complex border side with the specified ComplexBorderSideStyle and color.
            </summary>
            <param name="sideStyle">ComplexBorderSideStyle of the side</param>
            <param name="sideColor">Color of the side</param>
            <returns>Complex border side (ComplexBorderSide object) with the parameters specified</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideFactory.CreateComplexBorderSide(System.Drawing.Color)">
            <summary>
            Creates a complex border side with the specified color.
            </summary>
            <param name="color">Color of the side</param>
            <returns>Complex border side (ComplexBorderSide object) with the parameters specified</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideFactory.CreateComplexBorderSide(System.Drawing.Color,System.Int32)">
            <summary>
            Creates a complex border side with the specified color and width.
            </summary>
            <param name="color">Color of the side</param>
            <param name="width">Width of the side</param>
            <returns>Complex border side (ComplexBorderSide object) with the parameters specified</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideFactory.CreateComplexBorderSide(System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle)">
            <summary>
            Creates a complex border side with the specified color, width and dash style.
            </summary>
            <param name="color">Color of the side</param>
            <param name="width">Width of the side</param>
            <param name="dashStyle">DashStyle of the side</param>
            <returns>Complex border side (ComplexBorderSide object) with the parameters specified</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideFactory.CreateComplexBorderSide(System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle,System.Single[],System.Single[])">
            <summary>
            Creates a complex border side with the specified color, width, dash style, dash pattern, and compound array.
            </summary>
            <param name="color">Color of the side</param>
            <param name="width">Width of the side</param>
            <param name="dashStyle">DashStyle of the side</param>
            <param name="dashPattern">DashPattern of the side</param>
            <param name="compoundArray">CompoundArray of the side</param>
            <returns>Complex border side (ComplexBorderSide object) with the parameters specified</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideFactory.CreateComplexBorderSide(System.Boolean,System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle,System.Single[],System.Single[])">
            <summary>
            Creates a complex border side with the specified draw flag, color, width, dash style, dash pattern, and compound array.
            </summary>
            <param name="draw">Whether to draw the side</param>
            <param name="color">Color of the side</param>
            <param name="width">Width of the side</param>
            <param name="dashStyle">DashStyle of the side</param>
            <param name="dashPattern">DashPattern of the side</param>
            <param name="compoundArray">CompoundArray of the side</param>
            <returns>Complex border side (ComplexBorderSide object) with the parameters specified</returns>
        </member>
        <member name="T:FarPoint.Win.ComplexBorderSideConverter">
            <summary>
            Converts ComplexBorderSide objects from one data type to another.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an object of this type with a specified set of
            property values for the object.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="propertyValues">IDictionary of property values</param>
            <returns>Complex border side (ComplexBorderSide object) with the parameters specified</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets whether changing a value on this object should require 
            a call to the CreateInstance method to create a new value.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets the set of properties for this type.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="value">Object</param>
            <param name="attributes">Attributes (properties)</param>
            <returns>Properties</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines whether this object supports properties.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns a value indicating whether a complex border side object can be converted to the specified type.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="destinationType">Type</param>
            <returns>true if a complex border side object can be converted to the specified type, and false otherwise.</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the ComplexBorderSide object to a string.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="culture">CultureInfo</param>
            <param name="value">object</param>
            <param name="destinationType">Type</param>
            <returns>String representation of a ComplexBorderSide object.</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            
            </summary>
            <param name="manager"></param>
            <param name="codeObject"></param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            
            </summary>
            <param name="manager"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:FarPoint.Win.ComplexBorder">
            <summary>
            Represents a complex border.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ComplexBorder.#ctor(FarPoint.Win.ComplexBorderSide)">
            <summary>
            Creates a complex border with the specified ComplexBorderSide object  
            to use for all four sides.
            </summary>
            <param name="sides">Complex border side (ComplexBorderSide object) to use for all four sides</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorder.#ctor(FarPoint.Win.ComplexBorderSide,FarPoint.Win.ComplexBorderSide,FarPoint.Win.ComplexBorderSide,FarPoint.Win.ComplexBorderSide)">
            <summary>
            Creates a complex border with the specified ComplexBorderSide objects for each side.
            </summary>
            <param name="left">Complex border side (ComplexBorderSide object) for the left side</param>
            <param name="top">Complex border side (ComplexBorderSide object) for the top</param>
            <param name="right">Complex border side (ComplexBorderSide object) for the right side</param>
            <param name="bottom">Complex border side (ComplexBorderSide object) for the bottom</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorder.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new complex border object from serialization.
            </summary>
            <param name="info">Object that holds the serialized object data</param>
            <param name="context">Contexual information about the source or destination of the serialization</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorder.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints the complex border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">x-coordinate for the top-left corner</param>
            <param name="y">y-coordinate for the top-left corner</param>
            <param name="width">Width of the complex border, in pixels</param>
            <param name="height">Height of the complex border, in pixels</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorder.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the object to XML.
            </summary>
            <param name="w">XmlTextWriter object to which to save the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorder.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the object from XML.
            </summary>
            <param name="r">XmlNodeReader from which to load the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorder.Equals(System.Object)">
            <summary>
            Compares the specified object to this ComplexBorder object.
            </summary>
            <param name="o">Object to compare</param>
            <returns>true if equivalent; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorder.GetHashCode">
            <summary>
            Gets the hash code of the ComplexBorder object. 
            </summary>
            <returns>Integer with hash code of the object</returns>
        </member>
        <member name="P:FarPoint.Win.ComplexBorder.Inset">
            <summary>
            Gets the insets of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ComplexBorder.Left">
            <summary>
            Gets the ComplexBorderSide object for the left side.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ComplexBorder.Top">
            <summary>
            Gets the ComplexBorderSide object for the top side.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ComplexBorder.Right">
            <summary>
            Gets the ComplexBorderSide object for the right side.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ComplexBorder.Bottom">
            <summary>
            Gets the ComplexBorderSide object for the bottom side.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ComplexBorderFactory">
            <summary>
            Represents an object that provides a means of creating complex borders in environments
            that do not support parameterized constructors. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderFactory.#ctor">
            <summary>
            Creates a complex border factory. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderFactory.CreateComplexBorder(FarPoint.Win.ComplexBorderSide)">
            <summary>
            Creates a complex border with the specified complex border side 
            used for all four sides.
            </summary>
            <param name="sides">Complex border side (ComplexBorderSide object) to use for all four sides</param>
            <returns>Complex border (ComplexBorder object) with the parameter specified</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderFactory.CreateComplexBorder(FarPoint.Win.ComplexBorderSide,FarPoint.Win.ComplexBorderSide,FarPoint.Win.ComplexBorderSide,FarPoint.Win.ComplexBorderSide)">
            <summary>
            Creates a complex border with the specified complex border sides for each side.
            </summary>
            <param name="left">Complex border side (ComplexBorderSide object) to use for the left side</param>
            <param name="top">Complex border side (ComplexBorderSide object) to use for the top side</param>
            <param name="right">Complex border side (ComplexBorderSide object) to use for the right side</param>
            <param name="bottom">Complex border side (ComplexBorderSide object) to use for the bottom side</param>
            <returns>Complex border (ComplexBorder object) with the parameters specified</returns>
        </member>
        <member name="T:FarPoint.Win.DoubleLineBorder">
            <summary>
            Represents a simple double-line border.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DoubleLineBorder.#ctor(System.Drawing.Color)">
            <summary>
            Creates a double-line border with the specified color and a width of 3.
            </summary>
            <param name="color">Color of the double lines</param>
        </member>
        <member name="M:FarPoint.Win.DoubleLineBorder.#ctor(System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a double-line border with the specified color, a width of 3, and 
            sides on which the border is drawn.
            </summary>
            <param name="color">Color of the double lines</param>
            <param name="left">Whether to draw the left side</param>
            <param name="top">Whether to draw the top</param>
            <param name="right">Whether to draw the right side</param>
            <param name="bottom">Whether to draw the bottom</param>
        </member>
        <member name="M:FarPoint.Win.DoubleLineBorder.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints the border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">x-coordinate for the top left corner</param>
            <param name="y">y-coordinate for the top left corner</param>
            <param name="width">Width of the border, in pixels</param>
            <param name="height">Height of the border, in pixels</param>
        </member>
        <member name="M:FarPoint.Win.DoubleLineBorder.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the object to XML.
            </summary>
            <param name="w">XmlTextWriter object to which to save the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.DoubleLineBorder.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the object from XML.
            </summary>
            <param name="r">XmlNodeReader from which to load the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="P:FarPoint.Win.DoubleLineBorder.Thickness">
            <summary>
            Gets the thickness of the double-line border in pixels (always set to 3).
            </summary>
        </member>
        <member name="T:FarPoint.Win.DoubleLineBorderFactory">
            <summary>
            Represents a class that provides a means of creating a double-line border in environments
            that do not support parameterized constructors. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.DoubleLineBorderFactory.#ctor">
            <summary>
            Creates a double-line border factory.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DoubleLineBorderFactory.CreateDoubleLineBorder(System.Drawing.Color)">
            <summary>
            Creates a double-line border with the specified color.
            </summary>
            <param name="color">Color of the double lines</param>
            <returns>Double-line border (DoubleLineBorder object) with the parameters specified</returns>
        </member>
        <member name="M:FarPoint.Win.DoubleLineBorderFactory.CreateDoubleLineBorder(System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a double-line border with the specified color and sides on which the border is drawn.
            </summary>
            <param name="color">Color of the double lines</param>
            <param name="left">Whether to draw the left side</param>
            <param name="top">Whether to draw the top</param>
            <param name="right">Whether to draw the right side</param>
            <param name="bottom">Whether to draw the bottom</param>
            <returns>Double-line border (DoubleLineBorder object) with the parameters specified</returns>
        </member>
        <member name="T:FarPoint.Win.BorderConverter">
            <summary>
            Provides a drop-down list of border types for a property of type IBorder in the property grid.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BorderConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an object of this type by using a specified set of
            property values for the object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BorderConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines whether changing a value on this object should
            require a call to the CreateInstance method to create a new
            value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BorderConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Retrieves the set of properties for this type.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BorderConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Retrieves the set of standard values for this type.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BorderConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines whether this object supports properties.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BorderConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines whether this object supports standard values.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BorderConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the specified type can be converted to a border object.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="sourceType">Type</param>
            <returns>True if sourceType is String, false otherwise.</returns>
        </member>
        <member name="M:FarPoint.Win.BorderConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts a string to a new border object.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="culture">CultureInfo</param>
            <param name="value">object</param>
            <returns>A new border object.</returns>
        </member>
        <member name="M:FarPoint.Win.BorderConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns a value indicating whether a border object can be converted to the specified type.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="destinationType">Type</param>
            <returns>True if a border object can be converted to the specified type, and false otherwise.</returns>
        </member>
        <member name="M:FarPoint.Win.BorderConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the border object to a string.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="culture">CultureInfo</param>
            <param name="value">object</param>
            <param name="destinationType">Type</param>
            <returns>String representation of a border object.</returns>
        </member>
        <member name="T:FarPoint.Win.CheckValue">
            <summary>
            Specifies the value of the check box.
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckValue.False">
            <summary>
            Sets the check box value to false
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckValue.True">
            <summary>
            Sets the check box value to true
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckValue.Indeterminate">
            <summary>
            Sets the check box value to indeterminate
            </summary>
        </member>
        <member name="T:FarPoint.Win.chkCheckState">
            <summary>
            Specifies the state for a check box.
            </summary>
        </member>
        <member name="F:FarPoint.Win.chkCheckState.False">
            <summary>
            Sets the state of the check box to false
            </summary>
        </member>
        <member name="F:FarPoint.Win.chkCheckState.True">
            <summary>
            Sets the state of the check box to true
            </summary>
        </member>
        <member name="F:FarPoint.Win.chkCheckState.FalsePressed">
            <summary>
            Sets the state of the check box to false and pressed
            </summary>
        </member>
        <member name="F:FarPoint.Win.chkCheckState.TruePressed">
            <summary>
            Sets the state of the check box to true and pressed
            </summary>
        </member>
        <member name="F:FarPoint.Win.chkCheckState.Indeterminate">
            <summary>
            Sets the state of the check box to indeterminate
            </summary>
        </member>
        <member name="F:FarPoint.Win.chkCheckState.IndeterminatePressed">
            <summary>
            Sets the state of the check box to indeterminate and pressed
            </summary>
        </member>
        <member name="T:FarPoint.Win.CheckBoxPictureIndex">
            <summary>
            Specifies the index for the picture for the states of a check box. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckBoxPictureIndex.False">
            <summary>
            Sets the index for the false state picture of the check box
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckBoxPictureIndex.True">
            <summary>
            Sets the index for the true state picture of the check box
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckBoxPictureIndex.FalsePressed">
            <summary>
            Sets the index for the false pressed state picture of the check box
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckBoxPictureIndex.TruePressed">
            <summary>
            Sets the index for the true pressed state picture of the check box
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckBoxPictureIndex.Indeterminate">
            <summary>
            Sets the index for the indeterminate state picture of the check box
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckBoxPictureIndex.IndeterminatePressed">
            <summary>
            Sets the index for the indeterminate pressed state picture of the check box
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckBoxPictureIndex.FalseDisabled">
            <summary>
            Sets the index for the false disabled state picture of the check box
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckBoxPictureIndex.TrueDisabled">
            <summary>
            Sets the index for the true disabled state picture of the check box
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckBoxPictureIndex.IndeterminateDisabled">
            <summary>
            Sets the index for the indeterminate disabled state picture of the check box
            </summary>
        </member>
        <member name="T:FarPoint.Win.CheckBoxPictureConverter">
            <summary>
            Converts CheckBoxPicture objects from one type to another.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CheckBoxPictureConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an object of this type by using a specified set of
            property values for the object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CheckBoxPictureConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines whether changing a value on this object should
            require a call to the CreateInstance method to create a new
            value.
            </summary>
        </member>
        <member name="T:FarPoint.Win.CheckBoxPicture">
            <summary>
            Represents the pictures (images) used for the different states of a check box. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.CheckBoxPicture.Item(System.Int32)">
            <summary>
            Gets or sets the index for the picture (image) of the check box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CheckBoxPicture.Item(FarPoint.Win.CheckBoxPictureIndex)">
            <summary>
            Gets or sets the index for the picture (image) of the check box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CheckBoxPicture.False">
            <summary>
            Gets or sets the picture (image) for the false state of the check box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CheckBoxPicture.FalseDisabled">
            <summary>
            Gets or sets the picture (image) for the false disabled state of the checkbox.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CheckBoxPicture.FalsePressed">
            <summary>
            Gets or sets the picture (image) for the false pressed state of the check box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CheckBoxPicture.Indeterminate">
            <summary>
            Gets or sets the picture (image) for the indeterminate state of the check box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CheckBoxPicture.IndeterminateDisabled">
            <summary>
            Gets or sets the picture (image) for the indeterminate disabled state of the check box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CheckBoxPicture.IndeterminatePressed">
            <summary>
            Gets or sets the picture (image) for the indeterminate pressed state of the check box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CheckBoxPicture.True">
            <summary>
            Gets or sets the picture (image) for the true state of the check box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CheckBoxPicture.TrueDisabled">
            <summary>
            Gets or sets the picture (image) for the true disabled state of the check box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CheckBoxPicture.TruePressed">
            <summary>
            Gets or sets the picture (image) for the true pressed state of the check box.
            </summary>
        </member>
        <member name="T:FarPoint.Win.FpCheckBox">
            <summary>
            Represents a FarPoint check box control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpCheckBox.DEFAULT_PICTURE_WIDTH">
            <summary>
            Default check box picture width.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpCheckBox.DEFAULT_PICTURE_HEIGHT">
            <summary>
            Default check box picture height.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.#ctor">
            <summary>
            Creates a new FarPoint check box control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.OnBackgroundImageChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when the background picture changes.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.ResetCaption">
            <summary>
            Resets the text for the check box to its default setting. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.ResetTextTrue">
            <summary>
            Resets the text for the true state of the check box to its default setting.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.ResetTextFalse">
            <summary>
            Resets the text for the false state of the check box to its default setting.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.ResetTextIndeterminate">
            <summary>
            Resets the text for the indeterminate state of the check box to its default setting.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.OnCheckedChanged(System.EventArgs)">
            <summary>
            Raises the CheckedChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.OnCheckStateChanged(System.EventArgs)">
            <summary>
            Raises the CheckStateChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.GetPreferredSize(System.Drawing.Graphics,System.Drawing.Size,System.Object,System.Drawing.Font,System.String,System.String,System.String,System.String,FarPoint.Win.CheckBoxPicture,FarPoint.Win.ButtonTextAlign,System.Boolean,System.Boolean,System.Drawing.Text.HotkeyPrefix)">
            <summary>
            Calculates the height and width to display the text and picture in the check box.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.CheckValue,System.Boolean,System.Drawing.Font,System.String,System.String,System.String,System.String,FarPoint.Win.ButtonTextAlign,FarPoint.Win.CheckBoxPicture,System.Boolean,System.Boolean,System.Boolean,FarPoint.Win.Picture,System.Drawing.StringFormat,System.Boolean)">
            <summary>
            Paints the check box with the default picture height and width.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.CheckValue,System.Boolean,System.Drawing.Font,System.String,System.String,System.String,System.String,FarPoint.Win.ButtonTextAlign,FarPoint.Win.CheckBoxPicture,System.Boolean,System.Boolean,System.Boolean,FarPoint.Win.Picture,System.Drawing.StringFormat,System.Boolean,System.Int32,System.Int32,FarPoint.Win.VisualStyles)">
            <summary>
            Paints the check box.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpCheckBox.CheckChanged">
            <summary>
            Occurs when the check state of the control has changed.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpCheckBox.CheckStateChanged">
            <summary>
            Occurs when the check state of the control is changing.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.BackgroundImage">
            <summary>
            Gets or sets the picture to use as the background image of the check box control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.PictureWidth">
            <summary>
            Gets or sets the width of the check box picture in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.PictureHeight">
            <summary>
            Gets or sets the height of the check box picture in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.PictureAlignH">
            <summary>
            Gets or sets the horizontal alignment of the check box picture in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.PictureAlignV">
            <summary>
            Gets or sets the vertical alignment of the check box picture in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.Caption">
            <summary>
            Gets or sets the default text displayed in the check box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.HotkeyPrefix">
            <summary>
            Gets or sets whether the ampersand character underlines text.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.VisualStyles">
            <summary>
            Gets or sets whether to use visual styles.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.TextTrue">
            <summary>
            Gets or sets the text displayed when the state of the check box control is true.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.TextFalse">
            <summary>
            Gets or sets the text displayed when the state of the check box control is false.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.TextIndeterminate">
            <summary>
            Gets or sets the text displayed when the state of the check box control is indeterminate.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.Checked">
            <summary>
            Gets or sets whether the check box is checked.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.AutoCheck">
            <summary>
            Gets or sets whether the user can toggle the state of the check box control  
            by clicking the control or by pressing the spacebar when the control has the focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.CheckState">
            <summary>
            Gets or sets the state of the check box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.TextAlign">
            <summary>
            Gets or sets the alignment of the text relative to the picture in the check box control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.ThreeState">
            <summary>
            Gets or sets whether the check box control has a third state.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.Value">
            <summary>
            Gets or sets the value of the check box control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.Picture">
            <summary>
            Gets or sets the array of pictures to use as the check box image.
            </summary>
        </member>
        <member name="T:FarPoint.Win.StringSearch">
            <summary>
            Class that provides string search capabilities using regular expressions.
            </summary>
        </member>
        <member name="M:FarPoint.Win.StringSearch.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:FarPoint.Win.StringSearch.BuildRegExprPattern(System.String)">
            <summary>
            Build a regular expression pattern string from a patten string that uses '*' and '?' 
            as search wildcard characters.
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.StringSearch.Find(System.String,System.Int32)">
            <summary>
            Search the value string, starting at a specified index, for a character 
            sequence that matches the provided pattern.
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="P:FarPoint.Win.StringSearch.SearchPattern">
            <summary>
            Set the search pattern.  Note: This is not a regular expression pattern.
            </summary>
        </member>
        <member name="P:FarPoint.Win.StringSearch.Greedy">
            <summary>
            Get or set whether the regular expression should do a greedy search. A non-Greedy search
            on the string "FarPoint Technologies" with the pattern "F*o" would return "FarPo".  A Greedy
            search of the same string would return "FarPoint Techno".
            </summary>
        </member>
        <member name="P:FarPoint.Win.StringSearch.RegularExpressionPattern">
            <summary>
            Get or set the regular expression pattern to use for the search.
            </summary>
        </member>
        <member name="P:FarPoint.Win.StringSearch.MatchExact">
            <summary>
            Get or set if the match must be exact.  An exact match is a string that is 
            delimited at the beginning and end by either whitespace or end of line.
            Note: This property does not have any affect on the search pattern if the 
            pattern was set using the RegularExpressionPattern property.
            </summary>
        </member>
        <member name="P:FarPoint.Win.StringSearch.MatchIndex">
            <summary>
            Get the index of the first character in the matched substring
            </summary>
        </member>
        <member name="P:FarPoint.Win.StringSearch.MatchLength">
            <summary>
            Get the length of the matched substring
            </summary>
        </member>
        <member name="P:FarPoint.Win.StringSearch.MatchString">
            <summary>
            Get the matched substring
            </summary>
        </member>
        <member name="T:FarPoint.Win.SliderOrientation">
            <summary>
            Specifies the orientation of the slider.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SliderOrientation.Horizontal">
            <summary>
            Displays the slider horizontally
            </summary>
        </member>
        <member name="F:FarPoint.Win.SliderOrientation.Vertical">
            <summary>
            Displays the slider vertically
            </summary>
        </member>
        <member name="F:FarPoint.Win.SliderOrientation.HorizontalRightToLeft">
            <summary>
            Displays slider horizontally with right to left orientation
            </summary>
        </member>
        <member name="F:FarPoint.Win.SliderOrientation.VerticalBottomToTop">
            <summary>
            Displays slider vertically with bottom to top orientation
            </summary>
        </member>
        <member name="T:FarPoint.Win.FpSlider">
            <summary>
            Represents the FarPoint slider (track bar) control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.#ctor">
            <summary>
            Creates a new FarPoint slider (track bar) control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnBackgroundImageChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs if the background picture changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.FpSlider.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the ValueChanged event.
            </summary>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnMouseEnter(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnMouseLeave(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Internal use only.  Paints the background.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Boolean,System.Drawing.Color,FarPoint.Win.SliderOrientation,System.Int32,System.Int32,System.Int32,FarPoint.Win.Picture,System.Int32,System.Int32,FarPoint.Win.Picture,System.Drawing.Color,FarPoint.Win.Picture,System.Boolean,System.Boolean,System.Boolean,FarPoint.Win.VisualStyles)">
            <param name="valueIsAdjusting">True if the slider knob is moving</param>
            <param name="ptInKnob">True if mouse is over the knob</param>
        </member>
        <member name="M:FarPoint.Win.FpSlider.GetPreferredSize(FarPoint.Win.SliderOrientation,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the size needed to display the entire slider control with the specified orientation and values.
            </summary>
            <param name="orientation">Orientation of the slider</param>
            <param name="minimum">Minimum value of the slider</param>
            <param name="maximum">Maximum value of the slider</param>
            <param name="tickSpacing">Space between ticks</param>
        </member>
        <member name="M:FarPoint.Win.FpSlider.IsPointInKnob(System.Int32,System.Int32,System.Drawing.Rectangle,System.Int32,FarPoint.Win.SliderOrientation,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the point is in the slider knob.
            </summary>
            <param name="x">X-coordinate of point</param>
            <param name="y">Y-coordinate of point</param>
            <param name="r">Image rectangle</param>
            <param name="value">Value</param>
            <param name="orientation">Orientation of slider</param>
            <param name="minimum">Minimum value</param>
            <param name="maximum">Maximum value</param>
            <param name="knobWidth">Width of slider knob</param>
            <param name="trackWidth">Width of slider track</param>
        </member>
        <member name="M:FarPoint.Win.FpSlider.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpSlider.ValueChanged">
            <summary>
            Occurs when the user moves the slider and changes the value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.BackgroundImage">
            <summary>
            Gets or sets the background image for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.VisualStyles">
            <summary>
            Gets or sets whether to use visual styles.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.TrackPicture">
            <summary>
            Gets or sets the picture displayed inside the track area of the slider.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.TrackColor">
            <summary>
            Gets or sets the color of the slider track.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.KnobPicture">
            <summary>
            Gets or sets the picture that displays on the slider knob.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.KnobWidth">
            <summary>
            Gets or sets the width of the slider knob.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.TrackWidth">
            <summary>
            Gets or sets the width of the slider track.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.KnobColor">
            <summary>
            Gets or sets the color of the slider knob.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.Minimum">
            <summary>
            Gets or sets the minimum value for the slider.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.Maximum">
            <summary>
            Gets or sets the maximum value for the slider.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.Orientation">
            <summary>
            Gets or sets the orientation of the slider.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.TickSpacing">
            <summary>
            Gets or sets how often ticks display in the slider.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.ChangeOnFocus">
            <summary>
            Gets or sets whether the slider knob moves when intially clicking on the track.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ButtonTextAlign">
            <summary>
            Specifies the alignment of the button text. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.ButtonTextAlign.TextBottomPictTop">
            <summary>
            Aligns text at the bottom of the control and the picture at the top
            </summary>
        </member>
        <member name="F:FarPoint.Win.ButtonTextAlign.TextTopPictBottom">
            <summary>
            Aligns text at the top of the control and the picture at the bottom
            </summary>
        </member>
        <member name="F:FarPoint.Win.ButtonTextAlign.TextLeftPictRight">
            <summary>
            Aligns text to the left of the control and the picture to the right
            </summary>
        </member>
        <member name="F:FarPoint.Win.ButtonTextAlign.TextRightPictLeft">
            <summary>
            Aligns text to the right of the control and the picture to the left
            </summary>
        </member>
        <member name="T:FarPoint.Win.FpButton">
            <summary>
            Represents the FarPoint button control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.#ctor">
            <summary>
            Creates a new FarPoint button control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnGotFocus(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnLostFocus(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnDoubleClick(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnMouseLeave(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnMouseEnter(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,System.Boolean,System.Boolean,System.String,System.String,FarPoint.Win.ButtonTextAlign,FarPoint.Win.TextOrientation,System.Boolean,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Image,System.Drawing.Image,System.Boolean)">
            <summary>
            Paints the cell with the button.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="r">Image rectangle</param>
            <param name="backColor">Background color</param>
            <param name="foreColor">Foreground (text) color</param>
            <param name="font">Font of text</param>
            <param name="halign">Horizontal alignment</param>
            <param name="valign">Vertical alignment</param>
            <param name="pressed">Whether the button is pressed</param>
            <param name="focus">Whether it is in focus</param>
            <param name="text">Text of button when not pressed</param>
            <param name="textDown">Text of pressed button</param>
            <param name="nAlign">Alignment of text with respect to image in button</param>
            <param name="textOrientation">Orientation of text</param>
            <param name="wordWrap">Whether text wraps to multiple lines</param>
            <param name="shadowSize">Size of the shadow around the button</param>
            <param name="darkColor">Color of the shadow (dark part of button)</param>
            <param name="lightColor">Color of light part of button</param>
            <param name="pictUp">Picture (image) when button is not pressed</param>
            <param name="pictDown">Picture (image) when button is pressed</param>
            <param name="bLocked">Whether the cell is locked</param>
        </member>
        <member name="M:FarPoint.Win.FpButton.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,System.Boolean,System.Boolean,System.String,System.String,FarPoint.Win.ButtonTextAlign,FarPoint.Win.TextOrientation,System.Boolean,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Image,System.Drawing.Image,System.Boolean,System.Drawing.Text.HotkeyPrefix,FarPoint.Win.VisualStyles,System.Boolean)">
            <param name="prefix">Whether the ampersand character underlines text</param>
            <param name="style">Determines the button style</param>
            <param name="mouseOver">True if mouse is over button</param>
        </member>
        <member name="M:FarPoint.Win.FpButton.GetPreferredSize(System.Drawing.Graphics,System.Drawing.Size,System.Drawing.Font,System.String,System.String,FarPoint.Win.ButtonTextAlign,System.Boolean,System.Int32,System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Calculates the height and width required to display the button text and picture.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="size">Size</param>
            <param name="font">Font</param>
            <param name="text">Text of button when not pressed</param>
            <param name="textDown">Text of button when pressed</param>
            <param name="nAlign">Alignment of text</param>
            <param name="wordWrap">Whether text wraps to multiple lines</param>
            <param name="shadowSize">Size of shadow around button</param>
            <param name="pictUp">Picture (image) when button is not pressed</param>
            <param name="pictDown">Picture (image) when button is pressed</param>
        </member>
        <member name="M:FarPoint.Win.FpButton.GetPreferredSize(System.Drawing.Graphics,System.Drawing.Size,System.Drawing.Font,System.String,System.String,FarPoint.Win.ButtonTextAlign,FarPoint.Win.TextOrientation,System.Boolean,System.Int32,System.Drawing.Image,System.Drawing.Image,System.Drawing.Text.HotkeyPrefix)">
            <summary>
            Calculates the height and width required to display the button text and picture.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="size">Size</param>
            <param name="font">Font</param>
            <param name="text">Text of button when not pressed</param>
            <param name="textDown">Text of button when pressed</param>
            <param name="nAlign">Alignment of text</param>
            <param name="wordWrap">Whether text wraps to multiple lines</param>
            <param name="shadowSize">Size of shadow around button</param>
            <param name="pictUp">Picture (image) when button is not pressed</param>
            <param name="pictDown">Picture (image) when button is pressed</param>
        </member>
        <member name="M:FarPoint.Win.FpButton.PerformClick">
            <summary>
            Generates a Click event for the control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.NotifyDefault(System.Boolean)">
            <summary>
            Notifies a control that this button is the default button for appearance sake.
            </summary>
            <param name="value">whether the control should behave as a default button</param>
        </member>
        <member name="P:FarPoint.Win.FpButton.HotkeyPrefix">
            <summary>
            Gets or sets whether the ampersand character underlines text.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.VisualStyles">
            <summary>
            Gets or sets whether to use visual styles.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.DarkColor">
            <summary>
            Gets or sets the color to draw the three-dimensional outside border of the button. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.LightColor">
            <summary>
            Gets or sets the color to draw the three-dimensional inside border of the button.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.WordWrap">
            <summary>
            Gets or sets whether the text that does not fit on one line wraps 
            to multiple lines within the button.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.ShadowSize">
            <summary>
            Gets or sets the size of shadow around the button.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.Picture">
            <summary>
            Gets or sets the image displayed in the button.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.PictureDown">
            <summary>
            Gets or sets the image displayed in the button when the button is pressed.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.TwoState">
            <summary>
            Gets or sets whether the button is a two-state button.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.Value">
            <summary>
            Gets or sets the value of the button.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.TextAlign">
            <summary>
            Gets or sets how text is aligned relative to the picture in the button.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.TextOrientation">
            <summary>
            Gets or sets how text orients itself when painting the button.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.TextDown">
            <summary>
            Gets or sets the text to display when the button is pressed.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of text in the button.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of text in the button.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.DialogResult">
            <summary>
            Gets or sets the value returned to the parent when the button is clicked. 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:FarPoint.Win.ClipboardChangeNotifier" -->
        <member name="F:FarPoint.Win.ClipboardChangeNotifier.nextViewerHandle">
            <summary>
            The next handle in the clipboard viewer chain when the 
            clipboard notification is installed, otherwise <see cref="F:System.IntPtr.Zero"/>
            </summary>
        </member>
        <member name="F:FarPoint.Win.ClipboardChangeNotifier.disposed">
            <summary>
            Whether this class has been disposed or not.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ClipboardChangeNotifier.installedHandle">
            <summary>
            The Window clipboard change notification was installed for.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ClipboardChangeNotifier.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Provides default WndProc processing and responds to
            clipboard change notifications.
            </summary>
            <param name="e">Message</param>
        </member>
        <member name="M:FarPoint.Win.ClipboardChangeNotifier.OnHandleChange">
            <summary>
            Responds to Window Handle change events and uninstalls
            the clipboard change notification if it is installed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ClipboardChangeNotifier.Install">
            <summary>
            Installs clipboard change notification.  The
            <see cref="!:AssignHandle"/> method of this class
            must have been called first.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ClipboardChangeNotifier.Uninstall">
            <summary>
            Uninstalls clipboard change notification.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ClipboardChangeNotifier.OnClipboardChanged(System.EventArgs)">
            <summary>
            Raises the <c>ClipboardChanged</c> event.
            </summary>
            <param name="e">Blank event arguments.</param>
        </member>
        <member name="M:FarPoint.Win.ClipboardChangeNotifier.Dispose">
            <summary>
            Uninstalls clipboard event notifications if necessary
            during dispose of this object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ClipboardChangeNotifier.#ctor">
            <summary>
            Constructs a new instance of this class.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ClipboardChangeNotifier.ClipboardChanged">
            <summary>
            Notifies of a change to the clipboard's content.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.ISEditFormatter">
            <summary>
            Interface that defines the methods and properties required by objects 
            used for converting from value to string and vice versa.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.ISEditFormatter.FromFormattedString(System.String)">
            <summary>
            Parses and returns the value from a formatted string.
            </summary>
            <param name="value">Formatted string</param>
            <returns>Parsed value</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.ISEditFormatter.ToFormattedString(System.Object)">
            <summary>
            Returns a formatted string (plus attributes) for the value passed.
            </summary>
            <param name="value">Object containing value</param>
            <returns>Formatted string (plus attributes)</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.ISEditFormatter.FromUnformattedString(System.String)">
            <summary>
            Parses and returns the value from an unformatted string.
            </summary>
            <param name="value">Unformatted string</param>
            <returns>Parsed value</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.ISEditFormatter.ToUnformattedString(System.Object)">
            <summary>
            Returns an unformatted string for the value passed.
            </summary>
            <param name="value">Object containing value</param>
            <returns>Unformatted string</returns>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.ISEditFormatter.RegionSettings">
            <summary>
            Gets or sets the Regional Settings (Regional Options).
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.ISEditFormatter.ManageInput">
            <summary>
            If implemented, it supports methods which allow an editor
            to use for validating and formatting user input.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.MaskType">
            <summary>
            List of Mask types (not Data types).
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.MaskFormatter">
            <summary>
            Implements the MaskFormatter interface.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFormatter.FromFormattedString(System.String)">
            <summary>
            Parses and returns the "value" from a formatted string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFormatter.ToFormattedString(System.Object)">
            <summary>
            Returns a formatted string (plus attributes) for the value passed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFormatter.FromUnformattedString(System.String)">
            <summary>
            Parses and returns the "value" from an unformatted string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFormatter.ToUnformattedString(System.Object)">
            <summary>
            Returns an unformatted string for the value passed.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.MaskFormatter.RegionSettings">
            <summary>
            Gets or sets the Regional settings.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.MaskFormatter.ManageInput">
            <summary>
            If implemented, it supports methods which allow an editor
            to use for validating and formatting user input.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.MaskFormatter.MaskType">
            <summary>
            Gets or sets the type of mask (ex: none, PicMask, Float).
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.MaskFormatter.IsFmtStrParsed">
            <summary>
            Indicates if the format string has been parsed since
            it was set or changed (or something else changed).
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.MaskFormatter.MaskChar">
            <summary>
            Gets or sets the mask character.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.MaskFormatter.FormatString">
            <summary>
            Gets or sets the format string.
            </summary>
        </member>
        <member name="T:FarPoint.Win.FpHyperlink">
            <summary>
            Represents the FarPoint hyperlink control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.#ctor">
            <summary>
            Creates a new FarPoint hyperlink control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the hyperlink control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.OnPaint(System.Windows.Forms.PaintEventArgs,System.Object)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>  
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.IsPointInPicture(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Rectangle,FarPoint.Win.Picture)">
            <summary>
            Determines if the point is in the picture of the hyperlink control.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="x">X-coordinate of point</param>
            <param name="y">Y-coordinate of point</param>
            <param name="faceRect">Image rectangle</param>
            <param name="pic">Picture (image)</param>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.IsPointInLink(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Rectangle,System.String,System.Drawing.Font,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,System.Windows.Forms.LinkArea[],FarPoint.Win.Picture)">
            <summary>
            Determines if the point is in the text of the link in the hyperlink control.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="x">X-coordinate of point</param>
            <param name="y">Y-coordinate of point</param>
            <param name="r">Image rectangle</param>
            <param name="text">Text of the hyperlink</param>
            <param name="f">Font of the text</param>
            <param name="horizontalAlignment">Horizontal alignment</param>
            <param name="verticalAlignment">Vertical alignment</param>
            <param name="area">Area of the hyperlink</param>
            <param name="pict">Picture (image)</param>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,System.Windows.Forms.LinkArea[],System.Drawing.Color,System.Drawing.Color,FarPoint.Win.Picture,System.Boolean[],System.Boolean)">
            <summary>
            Paints the cell.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="r">Image rectangle</param>
            <param name="text">Text of the hyperlink</param>
            <param name="backColor">Background color</param>
            <param name="foreColor">Foreground (text) color</param>
            <param name="font">Font of hyperlink text</param>
            <param name="horizontalAlignment">Horizontal alignment</param>
            <param name="verticalAlignment">Vertical alignment</param>
            <param name="area">Area that is hyperlinked</param>
            <param name="linkColor">Color of hyperlink</param>
            <param name="visitedColor">Color of the previously-visited hyperlink</param>
            <param name="pict">Picture (image)</param>
            <param name="visited">Whether the hyperlink has been clicked (visited) before</param>
            <param name="bLocked">Whether the control is locked</param>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.GetPreferredSize(System.Drawing.Graphics,System.Drawing.Font,System.Object)">
            <summary>
            Gets the size to display the text in the hyperlink control.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="font">Font</param>
            <param name="value">Value</param>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.OnLinkClicked(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.OnInvalidLink(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.Picture">
            <summary>
            Gets or sets the picture to display in the background of the hyperlink control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.VisitedLinkColor">
            <summary>
            Gets or sets the color to paint the link when it has been visited.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.LinkColor">
            <summary>
            Gets or sets the color of the link in the hyperlink control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.Links">
            <summary>
            Gets or sets the URL string.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.LinkAreas">
            <summary>
            Gets or sets the area of the text to use as the link.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.LinksVisited">
            <summary>
            Gets or sets whether link has been visited.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.Link">
            <summary>
            Gets or sets the URL string.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.LinkArea">
            <summary>
            Gets or sets the area of the text to use as the link.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.Visited">
            <summary>
            Gets or sets whether link has been visited.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of text in the hyperlink control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of text in the hyperlink control.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpHyperlink.LinkClicked">
            <summary>
            Occurs when the user clicks on the link.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpHyperlink.InvalidLink">
            <summary>
            Occurs when the user clicks on the link.
            </summary>
        </member>
        <member name="T:FarPoint.Win.AutoSearch">
            <summary>
            Specifies whether and how the list items in a combo box are searched and selected based on character key input. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.AutoSearch.None">
            <summary>
            Provides no searching based on character key input; ignores character key input
            </summary>
        </member>
        <member name="F:FarPoint.Win.AutoSearch.SingleCharacter">
            <summary>
            Searches the list items by first character based on a single character key input 
            and if there is a match, scrolls to the first item that matches it
            </summary>
        </member>
        <member name="F:FarPoint.Win.AutoSearch.MultipleCharacter">
            <summary>
            Searches the list items by any number of characters based on the character key input
            and if there is a match, scrolls to the first item that matches it
            </summary>
        </member>
        <member name="F:FarPoint.Win.AutoSearch.SingleGreaterThan">
            <summary>
            Searches the list items by first character based on a single character key input 
            and if there is a match, scrolls to the first item that matches it 
            and if not, moves to the next item in the list whose first character is greater than this character
            </summary>
        </member>
        <member name="T:FarPoint.Win.ListAlignment">
            <summary>
            Specifies which side of the combo box the drop-down list is aligned to.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ListAlignment.Left">
            <summary>
            Aligns the drop-down list to the left
            </summary>
        </member>
        <member name="F:FarPoint.Win.ListAlignment.Right">
            <summary>
            Aligns the drop-down list to the right
            </summary>
        </member>
        <member name="T:FarPoint.Win.ComboCharacterSet">
            <summary>
            Specifies the character set for valid cell contents.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComboCharacterSet.Ascii">
            <summary>
            Accepts any of the ASCII characters
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComboCharacterSet.Alpha">
            <summary>
            Accepts letters (alphabetic characters) only
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComboCharacterSet.AlphaNumeric">
            <summary>
            Accepts letters (alphabetic characters) or numbers (numeric characters) only
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComboCharacterSet.Numeric">
            <summary>
            Accepts numbers (numeric characters) only
            </summary>
        </member>
        <member name="T:FarPoint.Win.FpCombo">
            <summary>
            Represents the FarPoint combo box control.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEditBase">
            <summary>
            Represents the base for editing controls.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ISpinUpNotify">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ISpinDownNotify">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:FarPoint.Win.IPopUpNotify">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="T:FarPoint.Win.IDropDownNotify">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ISlideLeftNotify">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="T:FarPoint.Win.ISlideRightNotify">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnDropDown(System.Object,FarPoint.Win.DropDownEventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.SuperEditBase.DropDown"/> event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.#ctor">
            <summary>
            Creates a new SuperEditBase object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.Reset">
            <summary>
            Resets the contents of the control to the default value. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.IsNull">
            <summary>
            Gets whether the control contains a null value.
            </summary>
            <returns>Whether the control contains a null value.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.IsValid">
            <summary>
            Gets whether the contents of the control are valid.
            </summary>
            <returns>True if the contents are valid.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ResetFont">
            <summary>
            Resets the font of the control to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ShouldSerializeBackColor">
            <summary>
            Internal use only. 
            </summary>
            <returns>True if the property value has changed from its default; otherwise, false.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ResetBackColor">
            <summary>
            Resets the background color to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ShouldSerializeForeColor">
            <summary>
            Internal use only. 
            </summary>
            <returns>True if the property value has changed from its default; otherwise, false.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ResetForeColor">
            <summary>
            Resets the text color to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ShouldSerializeInvalidColor">
            <summary>
            Internal use only. 
            </summary>
            <returns>True if the property value has changed from its default; otherwise, false.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ResetInvalidColor">
            <summary>
            Resets the background color used when the control contains invalid data to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ShouldSerializeNullColor">
            <summary>
            Internal use only. 
            </summary>
            <returns>True if the property value has changed from its default; otherwise, false.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ResetNullColor">
            <summary>
            Resets the background color displayed when the control contains the null value to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ResetText">
            <summary>
            Resets the contents to the default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ShouldSerializeText">
            <summary>
            Internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ShouldSerializeButtonColor">
            <summary>
            Internal use only. 
            </summary>
            <returns>True if the property value has changed from its default; otherwise, false.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ResetButtonColor">
            <summary>
            Resets the background color of the buttons in the control to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ShouldSerializeButtonMarginColor">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ResetButtonMarginColor">
            <summary>
            Resets the margin color between the button and the text in the edit control to its default color.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ShouldSerializeBorder">
            <summary>
            Internal use only. 
            </summary>
            <returns>True if the property value has changed from its default; otherwise, false.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ResetBorder">
            <summary>
            Resets the border to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.GetDrawingText(System.String)">
            <summary>
            Gets a string containing the text to draw.
            </summary>
            <param name="paintString">String containing the text</param>
            <returns>String containing the text</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.GetDrawingStringFormat(System.Drawing.Rectangle@)">
            <summary>
            Gets a new string format for drawing the text in the specified rectangle.
            </summary>
            <param name="drawRect">Rectangle for drawing text</param>
            <returns>StringFormat object containing the string format</returns>
            <remarks>This method modifies the rect under certain settings.</remarks>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.Paint"/> event, which paints the edit control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnResize(System.EventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.Resize"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.SizeChanged"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnParentFontChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.ParentFontChanged"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnParentChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.ParentChanged"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.IsMouseOverButton">
            <summary>
            Gets whether the pointer is over a button in the edit control. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SetToolTip(System.Windows.Forms.ToolTip,System.String)">
            <summary>
            Sets the ToolTip text for embedded (inner child) controls.
            </summary>
            <param name="toolTipControl">Name of the ToolTip control</param>
            <param name="toolTipText">String of text to appear as the tip</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ToggleState">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.Select(System.Int32,System.Int32)">
            <summary>
            Selects the specified number of characters in the edit control starting at the specified location.
            </summary>
            <param name="selStart">Position of the first character in the control from which to start the selection</param>
            <param name="selLength">Number of characters to select</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SelectAll">
            <summary>
            Selects the entire contents of the control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.Click"/> event. 
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnCausesValidationChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.CausesValidationChanged"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.MouseEnter"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.MouseMove"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.MouseLeave"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.GetCharIndexAtPoint(System.Drawing.Point,System.Boolean)">
            <summary>
            Given a point and a graphics object, calc the char index
            at the point.
            </summary>
            <param name="pt"></param>
            <param name="g"></param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnDoubleClick(System.EventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.DoubleClick"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.GotFocus"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditTextPasted(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.EditTextPasted"/> event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.EditKeyDown"/> event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.EditKeyPress"/> event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditKeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.EditKeyUp"/> event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditValidating(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.EditValidating"/> event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditValidated(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.EditValidated"/> event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditTextChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.EditTextChanged"/> event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditClick(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.EditClick"/> event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.EditDoubleClick"/> event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditHelpRequested(System.Object,System.Windows.Forms.HelpEventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.EditHelpRequested"/> event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditMouseEnter(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.EditMouseEnter"/> event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditMouseLeave(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.EditMouseLeave"/> event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditMouseWheel(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.EditMouseWheel"/> event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.EditMouseUp"/> event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.EditMouseMove"/> event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.EditMouseDown"/> event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditGotFocus(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.EditGotFocus"/> event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.Validate(System.String)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.Validate">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.GetValueFromFreeFormat">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ForceValidation">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ForceText(FarPoint.Win.SuperEdit.ISEditFormatter,System.Object)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditLostFocus(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.EditLostFocus"/> event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnUserError(FarPoint.Win.SuperEdit.UserErrorEventArgs)">
            Occurs when the user performs an action that cannot be processed or is invalid.
            <summary>
            Raises the <see cref="E:FarPoint.Win.SuperEditBase.UserError"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnInvalidData(System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.SuperEditBase.InvalidData"/> event.
            </summary>
            <param name="e">Event arguments</param>
            Occurs when the control contains invalid data.
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnAdvance(System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.SuperEditBase.Advance"/> event. 
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.Layout"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.Copy">
            <summary>
            Copies the selected text in the edit control to the Clipboard.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.Cut">
            <summary>
            Cuts the selected contents in the edit control to the Clipboard.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.Paste">
            <summary>
            Pastes the contents of the Clipboard into the edit control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.Clear">
            <summary>
            Removes all of the selected contents of the edit control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.Undo">
            <summary>
            Reverses the previous edit command.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SetNull">
            <summary>
            Sets the value of the control to the null value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ClearAll">
            <summary>
            Removes all of the contents of the edit control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.MouseUp"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="!:FarPoint.Win.SuperEditBase.MouseDown"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SpinUpNotify(System.Object)">
            <summary>
            Internal use only.
            </summary>
            <param name="o">Object of the action</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SpinDownNotify(System.Object)">
            <summary>
            Internal use only.
            </summary>
            <param name="o">Object of the action</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.FirePopup">
            <summary>
            Internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.PopUpNotify(System.Object)">
            <summary>
            Internal use only.
            </summary>
            <param name="o">Object of the action</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.DropDownNotify(System.Object)">
            <summary>
            Internal use only.
            </summary>
            <param name="o">Object of the action</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SlideLeftNotify(System.Object)">
            <summary>
            Internal use only.
            </summary>
            <param name="o">Object of the action</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SlideRightNotify(System.Object)">
            <summary>
            Internal use only.
            </summary>
            <param name="o">Object of the action</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.CreateStringWithLiterals(System.String)">
            <summary>
            Creates a string composed of literal characters.
            </summary>
            <param name="originalString">String containing original characters</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.HandleValidCharacter(System.Int32@)">
            <summary>
            Internal use only. Character is valid if not handled by the control.
            </summary>
            <param name="c">Numerical value for an ASCII character</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.HandleValidKey(System.Int32)">
            <summary>
            Internal use only. Key is valid if not handled by the control.
            </summary>
            <param name="c">Numerical value for an ASCII character</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.GetLeftmostCharacters(System.Int32)">
            <summary>
            Gets a specified number of characters, starting with the leftmost character. 
            </summary>
            <param name="count">Number of characters to return</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.GetRightmostCharacters(System.Int32)">
            <summary>
            Gets a specified number of characters, starting with the rightmost character. 
            </summary>
            <param name="count">Number of characters to return</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.GetCharFromPos(System.Drawing.Point)">
            <summary>
            Internal use only.
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.Select(System.Boolean,System.Boolean)">
            <summary>
            Selects a control with the specified direction in the tab order 
            from which to select the control.
            </summary>
            <param name="directed">
            true to specify the direction of the control to select; false otherwise
            </param>
            <param name="forward">
            true to move forward in the tab order; false to move backward in the tab order
            </param>
        </member>
        <member name="E:FarPoint.Win.SuperEditBase.SpinUp">
            <summary>
            Occurs when a user clicks a spin up button in the edit control.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEditBase.SpinDown">
            <summary>
            Occurs when a user clicks a spin down button in the edit control.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEditBase.PopUp">
            <summary>
            Occurs when a user clicks a pop-up button in the edit control.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEditBase.DropDown">
            <summary>
            Occurs when a user clicks a drop-down button in the edit control.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEditBase.SlideLeft">
            <summary>
            Occurs when a user clicks a slide left button in the edit control.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEditBase.SlideRight">
            <summary>
            Occurs when a user clicks a slide right button in the edit control.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEditBase.UserError">
            <summary>
            Occurs when content is provided that cannot be processed or is invalid.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEditBase.InvalidData">
            <summary>
            Occurs when the control contains invalid data.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEditBase.Advance">
            <summary>
            Occurs when focus moves to the previous or next control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.Cursor">
            <summary>
            Gets or sets the image for the pointer when the pointer is over the edit control. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.VisualStyles">
            <summary>
            Gets or sets whether visual styles are used.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.Modified">
            <summary>
            Gets or sets whether the text in the edit control has been modified.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonAlign">
            <summary>
            Gets or sets the alignment of the button in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonWidth">
            <summary>
            Gets or sets the width of the button in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonMargin">
            <summary>
            Gets or sets the margin between the button and the text in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonWrap">
            <summary>
            Gets or sets whether the button index wraps when it reaches the value specified 
            by the ButtonMin and ButtonMax properties.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonIndex">
            <summary>
            Gets or sets the index value for the button in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonMin">
            <summary>
            Gets or sets the minimum value for the button index in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonMax">
            <summary>
            Gets or sets the maximum value for the button index in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonStyle">
            <summary>
            Gets or sets the type of button to display in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.DrawFocusRectangle">
            <summary>
            Gets or sets the focus rectangle drawing style for the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.EditModeCursorPosition">
            <summary>
            Gets or sets the position of the pointer in the edit control when it receives the focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.AllowClipboardKeys">
            <summary>
            Gets or sets whether the control supports the Clipboard shortcut keys.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.Focused">
            <summary>
            Gets whether the edit control has focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.Enabled">
            <summary>
            Gets or sets whether the control can receive focus and respond to user actions.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.AutoAdvance">
            <summary>
            Gets or sets whether the focus moves to another control when the pointer is moved with the arrow keys.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.InvalidOption">
            <summary>
            Gets or sets whether invalid data is displayed, hidden, or cleared when the control loses the focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.Font">
            <summary>
            Gets or sets the font for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.BackgroundImage">
            <summary>
            Gets or sets the background image for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ForeColor">
            <summary>
            Gets or sets the text color for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.InvalidColor">
            <summary>
            Gets or sets the background color to display when the control contains invalid data.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.NullColor">
            <summary>
            Gets or sets the background color displayed when the control contains the null value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.UserEntry">
            <summary>
            Gets or sets how data is validated when it is provided to the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.UserEntryPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.CausesValidation">
            <summary>
            Gets or sets whether data validation occurs on other controls when the control loses focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.CanValidate">
            <summary>
            Gets or sets whether the control validates data when it loses the focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.Selectable">
            <summary>
            Gets or sets whether the user can interact with the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.CanFocus">
            <summary>
            Gets or sets whether the edit control can receive focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.Text">
            <summary>
            Gets or sets the formatted contents or the control as a string 
            matching exactly what is displayed.  
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonColor">
            <summary>
            Gets or sets the background color of the button in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonMarginColor">
            <summary>
            Gets or sets the margin color between the button and the text in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.AllowNull">
            <summary>
            Gets or sets whether the control considers a null value valid.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.HideSelection">
            <summary>
            Gets or sets whether selected text loses its highlighting when the control loses focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.AutoHeight">
            <summary>
            Gets or sets whether the control resizes itself based on the font.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.AutoMenu">
            <summary>
            Gets or sets whether the control displays a context menu that provides basic edit operations.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ControlType">
            <summary>
            Gets or sets whether the control is read-write, read-only, static, or allows values to be changed by pressing buttons.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.PictureOrientation">
            <summary>
            Gets or sets the orientation of the picture in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.PictureTransparencyColor">
            <summary>
            Gets or sets the transparency color for the picture in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.TextOrientation">
            <summary>
            Gets or sets the orientation of the text in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.TextWrap">
            <summary>
            Gets or sets whether to automatically wrap text without line breaks. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.AlignText">
            <summary>
            Gets or sets the alignment of the text with respect to the alignment of the picture. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.Picture">
            <summary>
            Gets or sets the picture to display in the edit control. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.PictureMargin">
            <summary>
            Gets or sets the margin between the text and the picture.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.FormatText">
            <summary>
            Gets how text contents of the edit control are formatted.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.RightToLeft">
            <summary>
            Gets or sets whether the text appears from right to left in the edit control
            (as when using Hebrew or Arabic fonts).
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.Value">
            <summary>
            Gets or sets the unformatted value of the edit control. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.Border">
            <summary>
            Gets or sets the border for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.AlignHorz">
            <summary>
            Gets or sets the horizontal alignment of the control's contents.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.AlignVert">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.SelectionStart">
            <summary>
            Gets or sets the starting point of selected characters or the position of the 
            insertion point if no characters are selected. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.SelectionLength">
            <summary>
            Gets or sets the number of characters selected in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.SelectedText">
            <summary>
            Gets or sets the currently selected text in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.Formatter">
            <summary>
            Gets or sets the formatter for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.MaxLength">
            <summary>
            Gets or sets the maximum number of characters that can be typed or pasted into the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ContextMenu">
            <summary>
            Gets or sets the context menu to display for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.HotkeyPrefix">
            <summary>
            Gets or sets whether an ampersand typed in front of a character  
            underlines the character in a static control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.#ctor">
            <summary>
            Creates a FarPoint combo box control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.SelectNext">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.SelectPrevious">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnEditKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnEditMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.DoAutoSearching(System.Int32,FarPoint.Win.AutoSearch)">
            <summary>
            Performs an automatic search on the specified character.
            </summary>
            <param name="c">character</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.HandleValidCharacter(System.Int32@)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.HandleValidKey(System.Int32)">
            <summary>
            Internal use only.  Handles valid character key input.
            </summary>
            <param name="key">Character key entered</param>
            <returns>True if valid; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnCloseUp(System.EventArgs)">
            <summary>
            Raises the CloseUp event.
            </summary>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnDropDown(FarPoint.Win.DropDownEventArgs)">
            <summary>
            Raises the DropDown event.
            </summary>
            <param name="e">DropDownEventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Raises the SelectedIndexChanged event.
            </summary>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnSelectedValueChanged(System.EventArgs)">
            <summary>
            Raises the SelectedValueChanged event.
            </summary>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnSelectionChangeCommitted(System.EventArgs)">
            <summary>
            Raises the SelectionChangeCommitted event.
            </summary>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.DropDownDefaultAction">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Internal use only.
            </summary>	  
        </member>
        <member name="M:FarPoint.Win.FpCombo.DropDownNotify(System.Object)">
            <summary>
            Internal use only.
            </summary>
            <param name="o">Object of the action</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.ShowList(System.Boolean)">
            <summary>
            Determines whether to show the drop-down list of the combo box control.
            </summary>
            <param name="bShow">Whether to show the drop-down list</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.ToggleState">
            <summary>
            Internal use only.  Toggles the state of the control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.GetDroppedList">
            <summary>
            Gets the drop-down list box.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.DrawListBoxItem(System.Windows.Forms.ListBox,System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Draws one of the list box items.
            </summary>
            <param name="ctlListBox">List box control</param>
            <param name="e">DrawItem event containing item</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.ProcessDialogChar(System.Char)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpCombo.CloseUp">
            <summary>
            Occurs when the control goes away (closes up).
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpCombo.SelectedIndexChanged">
            <summary>
            Occurs when the index of the selected item in the combo box list has changed.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpCombo.SelectedValueChanged">
            <summary>
            Occurs when the value of the selected item in the combo box list has changed.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpCombo.SelectionChangeCommitted">
            <summary>
            Occurs when the change to the selected item in the combo box list is committed.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.ListControl">
            <summary>
            Gets or sets an alternate list box control for the drop-down list in the combo box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.AcceptsArrowKeys">
            <summary>
            Gets or sets how keyboard arrow keys are handled.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.ListAlignment">
            <summary>
            Gets or sets which side of the control the drop-down list is aligned to.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.WordWrap">
            <summary>
            Gets or sets whether text that does not fit on one line wraps to multiple lines.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.CharacterSet">
            <summary>
            Gets or sets which character set to use.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.CharacterCasing">
            <summary>
            Gets or sets the character casing.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.Editable">
            <summary>
            Gets or sets whether the text portion of the combo box is editable.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.BorderStyle">
            <summary>
            Gets or sets the border style.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.Multiline">
            <summary>
            Gets or sets whether the combo box displays text in multiple lines.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.AcceptsReturn">
            <summary>
            Gets or sets whether the combo box accepts a keyboard return (Enter key).
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.MaximumLength">
            <summary>
            Gets or sets the maximum number of characters for data in the text portion of the combo box.
            </summary>   
        </member>
        <member name="P:FarPoint.Win.FpCombo.ListOffset">
            <summary>
            Gets or sets the number of pixels to offset the list from the aligned edge of the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.BackgroundColor">
            <summary>
            Gets or sets the background color of the combo box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.ListWidth">
            <summary>
            Gets or sets the width of the drop-down list in the combo box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.MaxDrop">
            <summary>
            Gets or sets the number of items to show in the drop-down list at one time in the combo box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.AutoSearch">
            <summary>
            Gets or sets how a list of items in a combo box is searched based on input of a character key.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.List">
            <summary>
            Gets or sets the list of items of a combo box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.ItemData">
            <summary>
            Gets or sets the item data list of a combo box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.ImageList">
            <summary>
            Gets or sets the image list of a combo box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.SelectedItem">
            <summary>
            Gets or sets the selected item in the combo box list.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item in the combo box list.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.DroppedDown">
            <summary>
            Gets or sets whether the drop-down list is displayed (dropped down).
            </summary>
        </member>
        <member name="T:FarPoint.Win.IChangeNotify">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.FmtParsedExcel">
            <summary>
            ParsedFmtString
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedExcel.FMT_COND_POS">
            <summary>
            Use these define indexes into array.
            Last is the Number of conditions.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedExcel.FromFormattedString(System.String)">
            <summary>
            Parses and returns the "value" from a formatted string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedExcel.ToFormattedString(System.Object)">
            <summary>
            Returns a formatted string (plus attributes) for the value passed.
            Returned object is really of type FormattedExcelString,
            which is derived from String.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedExcel.fmtStrList">
            <summary>
            Format strings for each type (positive, negative, zero and text 
            or condition passed and condition failed).
            This array can have up to "NUM_OF_CONDS" elements (4).
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedExcel.fmtStrStartIndex">
            <summary>
            Keeps track of where each format "section" starts.
            Stores an index into the original format string for each part.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedExcel.fmtColorList">
            <summary>
            Color for each type (positive, negative, zero and text or 
            condition passed and condition failed).
            This array can have up to "NUM_OF_CONDS" elements (4).
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedExcel.operand">
            <summary>
            Operand is a temp var used by multiple methods. Values:
            0 for non-conditional, 
            1 for less-than,
            2 for less-than-or-equal-to (or equal-to-or-less-than)
            3 for equals, 
            4 for greater-than-or-equal-to (or equal-to-or-greater than),
            5 for greater-than,
            6 for less-than-or-greater-than (but not equal).
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedExcel.testValue">
            <summary>
            The value to compare to the passed-in value to determine 
            which format string to use.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.FmtParsedExcel.CompareType">
            <summary>
            0 for non-conditional, 
            1 for less-than,
            2 for less-than-or-equal-to (or equal-to-or-less-than)
            3 for equals, 
            4 for greater-than-or-equal-to (or equal-to-or-greater than),
            5 for greater-than,
            6 for less-than-or-greater-than (but not equal).
            </summary>
        </member>
        <member name="T:FarPoint.Win.XmlTypeConverter">
            <summary>
            Type converter for objects which implement ISerializeSupport (or other related serialization interface) which converts objects to and from their xml representations.
            </summary>
        </member>
        <member name="M:FarPoint.Win.XmlTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the specified type can be converted to a border object.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="sourceType">Type</param>
            <returns>True if sourceType is String, false otherwise.</returns>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.GeneralFormatter">
            <summary>
            Implements the GeneralFormatter interface.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.FromFormattedString(System.String)">
            <summary>
            Parses and returns the "value" from a formatted string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.ToFormattedString(System.Object)">
            <summary>
            Returns a formatted string (plus attributes) for the value passed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.FromUnformattedString(System.String,System.IFormatProvider@,System.String@)">
            <summary>
            Parses and returns the "value" from an unformatted string along with additional information about the parsed string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.FromUnformattedString(System.String)">
            <summary>
            Parses and returns the "value" from an unformatted string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.ToUnformattedString(System.Object)">
            <summary>
            Returns an unformatted string for the value passed.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.RegionSettings">
            <summary>
            Gets or sets the Regional settings.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.ManageInput">
            <summary>
            This class does not support "Managed Input".
            </summary>
        </member>
        <member name="T:FarPoint.Win.UnlockDialog">
            <summary>
            Summary description for UnlockDialog.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UnlockDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FarPoint.Win.UnlockDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:FarPoint.Win.UnlockDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:FarPoint.Win.MathOverride">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="F:FarPoint.Win.MathOverride.pow10">
            <summary>
            Provides quick lookup for some common powers of 10.
            </summary>
        </member>
        <member name="M:FarPoint.Win.MathOverride.Pow10(System.Int32)">
            <summary>
            Returns 10 raised to the specified power.
            </summary>
        </member>
        <member name="M:FarPoint.Win.MathOverride.ApproxEqual(System.Double,System.Double)">
            <summary>
            Tests the equalness of two numbers with an accuracy of the magnitude
            of the given values scaled by 2^-48 (4 bits stripped).  This is used
            by the rounding and truncating methods to iron out small roundoff
            errors.
            </summary>
        </member>
        <member name="M:FarPoint.Win.MathOverride.ApproxRound(System.Double,System.Int32)">
            <summary>
            A round method taking ApproxEqual into account.
            </summary>
        </member>
        <member name="M:FarPoint.Win.MathOverride.ApproxFloor(System.Double)">
            <summary>
            A floor method taking ApproxEqual into account.
            </summary>
        </member>
        <member name="M:FarPoint.Win.MathOverride.ApproxCeiling(System.Double)">
            <summary>
            A ceiling method taking ApproxEqual into account.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.FmtStrParserExcel">
            <summary>
            ParsedFmtString
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserExcel.#ctor">
            <summary>
            Constructor (without string table object).
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserExcel.#ctor(System.Collections.IDictionary)">
            <summary>
            Constructor with string table dictionary.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserExcel.ParseFormatString(System.String,FarPoint.Win.SuperEdit.MaskType)">
            <summary>
            Parses format string into its various parts.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserExcel.GetColorForColorIndex(System.Int32)">
            <summary>
            Converts a "color index" to a .NET "Color" object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserExcel.DivideString(System.String,FarPoint.Win.SuperEdit.FmtParsedExcel@)">
            <summary>
            This scans thru the string seperating it into sections 
            which are delimited by semicolons (;).
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserExcel.ParseForConditionals(FarPoint.Win.SuperEdit.FmtParsedExcel@)">
            <summary>
            Parses each "portion" of the format string looking
            for conditional situations.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.FmtStrParserExcel.FmtColor">
            <summary>
            Define the colors recognized in format string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.#ctor">
            <summary>
            Initializes a new TabStrip object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.#ctor(FarPoint.Win.ITabManager)">
            <summary>
            Initializes a new TabStrip object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.Init">
            <summary>
            Init
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.GetTabPicture(System.Int32)">
            <summary>
            Gets the picture displayed in the specified tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.SetTabPicture(System.Int32,FarPoint.Win.Picture)">
            <summary>
            Sets the picture to display in the specified tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.GetTabShape(System.Int32)">
            <summary>
            Gets the shape of the specified tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.SetTabShape(System.Int32,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Sets the shape of the specified tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.GetTabBackColor(System.Int32)">
            <summary>
            Gets the background color of the specified tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.GetTabForeColor(System.Int32)">
            <summary>
            Gets the text color of the specified tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.SetTabFont(System.Int32,System.Drawing.Font)">
            <summary>
            Sets the font settings for the specified tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.SetTabBackColor(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the background color for the specified tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.SetTabForeColor(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the text color for the specified tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.SetTabText(System.Int32,System.String)">
            <summary>
            Sets the text displayed in the specified tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.RefreshAllTabs">
            <summary>
            Redraws all tabs in the tab strip.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.RefreshTabs(System.Int32,System.Int32)">
            <summary>
            Redraws the range of tabs between the specified tabs.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.RefreshTab(System.Int32)">
            <summary>
            Redraws the specified tab.
            </summary>
            <param name="index">Tab index</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.SelectTab(System.Int32,System.Int32)">
            <summary>
            Selects the range of tabs between the specified tabs.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            OnPaint - Paints the tabstrip control
            </summary>
            <param name="e">PaintEventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.GetTabText(System.Int32)">
            <summary>
            Gets the text displayed in the specified tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.GetTabRectangle(System.Int32)">
            <summary>
            Gets the rectangle for the specified tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.CalculateTabLayout(System.Drawing.Graphics,System.Boolean)">
            <summary>
            CalculateTabLayout
            </summary>
            <param name="g">Graphics device</param>
            <param name="adjustLayout">Whether to adjust the layout</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.DrawTabs(System.Windows.Forms.PaintEventArgs)">
            DrawTabs - Compute the tab layout and paint the tabs
            The tab layout is computed going left-to-right and then the tabs are
            painted right-to-left to take care of painting issues with the overlapped tabs.
            <summary>
            Draws the tabs after computing the tab layout.
            </summary>
            <param name="e">PaintEventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.DrawNavArrow(FarPoint.Win.NavButton,System.Windows.Forms.PaintEventArgs,System.Int32,System.Int32)">
            <summary>
            Draws the navigation button arrows.
            </summary>
            <param name="navbutton">Navigation button</param>
            <param name="e">PaintEventArgs object containing the event data</param>
            <param name="X">X coordinate</param>
            <param name="Y">Y coordinate</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.DrawNavButtons(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draws the navigation buttons.
            </summary>
            <param name="e">PaintEventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.SetTabInsertionBar(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Sets the tab insertion bar.
            </summary>
            <param name="hitTestTab">Integer tab index</param>
            <param name="rightOfTabs">Whether to set it to the right of the tabs</param>
            <param name="setBar">Whether to set the bar</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.HitTestNavButton(System.Drawing.Point)">
            <summary>
            Determines which navigation button the mouse is over.
            </summary>
            <param name="pt">Point</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.HitTestNavButton(System.Int32)">
            <summary>
            Determines which navigation button is pressed.
            </summary>
            <param name="x">Index of tab</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.HitTestTab(System.Drawing.Point,System.Boolean@)">
            <summary>
            Determines the selected tab index.
            </summary>
            <param name="pt">Point</param>
            <param name="rightOfTabs">Whether right of tabs</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.MouseOverNavButton(System.Drawing.Point)">
            <summary>
            Gets the coordinates of the pointer.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.MouseOverTab(System.Drawing.Point)">
            <summary>
            Gets the coordinates of the pointer.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.HitTestTab(System.Drawing.Point)">
            <summary>
            Determines the selected tab index.
            </summary>
            <param name="pt">Point</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.MovePreviousEvent(System.Object,System.EventArgs)">
            <summary>
            MovePreviousEvent
            </summary>
            <param name="o">Object source of event</param>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.MoveNextEvent(System.Object,System.EventArgs)">
            <summary>
            MoveNextEvent
            </summary>
            <param name="o">Object source of event</param>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.MoveFirst">
            <summary>
            MoveFirst - Moves to the first tab
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.MovePrevious">
            <summary>
            MovePrevious - Moves to the previous tab
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.MoveNext">
            <summary>
            MoveNext - Moves to the next tab
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.MoveLast">
            <summary>
            MoveLast - Moves to the last tab
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            OnMouseDown
            </summary>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            OnMouseMove
            </summary>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            OnMouseUp
            </summary>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.OnResize(System.EventArgs)">
            <summary>
            OnResize - Override the resize event
            </summary>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.MoveTab(System.Int32,System.Int32)">
            <summary>
            Moves the specified tab to a new position in the tab strip.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.Finalize">
            <summary>
            Finalize
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.ShowNavButtons">
            <summary>
            Gets or sets whether the tab strip displays buttons.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.SelectedTabOutlineColor">
            <summary>
            Gets or sets the outline color of the selected tab.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.DefaultTabShape">
            <summary>
            Gets or sets the default tab shape.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.ActiveTabInflate">
            <summary>
            Gets or sets whether the active tab appears larger than the other tabs.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.Orientation">
            <summary>
            Gets or sets the tab strip orientation.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.SelectedTabBackColor">
            <summary>
            Gets or sets the background color of the selected tab.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.SelectedTabForeColor">
            <summary>
            Gets or sets the text color of the selected tab.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.ButtonBackColor">
            <summary>
            Gets or sets the background color of the tab strip buttons.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.ButtonForeColor">
            <summary>
            Gets or sets the foreground color of the tab strip buttons.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.BackColor">
            <summary>
            Gets or sets the background color for the tab strip.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.ForeColor">
            <summary>
            Gets or sets the text color for the tabs.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.Font">
            <summary>
            Gets or sets the font properties for the text in the tabs.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.Count">
            <summary>
            Gets or sets the number of tabs.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.SelectedTab">
            <summary>
            Gets or sets the selected tab.
            </summary>
        </member>
        <member name="E:FarPoint.Win.TabStrip.TabStripSelect">
            <summary>
            Represents the method that handles the TabStripSelect event.
            </summary>
        </member>
        <member name="E:FarPoint.Win.TabStrip.TabStripNavigate">
            <summary>
            Represents the method that handles the TabStripNavigate event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.TextAlign">
            <summary>
            Specifies the alignment of text and pictures in a control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.TextAlign.TextBottomPictTop">
            <summary>
            Positions the text at the bottom of the control and the picture, 
            if any, is positioned above it
            </summary>
        </member>
        <member name="F:FarPoint.Win.TextAlign.TextTopPictBottom">
            <summary>
            Positions the text at the top of the control and the picture, 
            if any, is positioned below it
            </summary>
        </member>
        <member name="F:FarPoint.Win.TextAlign.TextLeftPictRight">
            <summary>
            Positions the text on the left side of the control and the picture, 
            if any, is positioned to the right of it
            </summary>
        </member>
        <member name="F:FarPoint.Win.TextAlign.TextRightPictLeft">
            <summary>
            Positions the text on the right side of the control and the picture, 
            if any, is positioned to the left of it
            </summary>
        </member>
        <member name="T:FarPoint.Win.DrawFocusRectangle">
            <summary>
            Specifies the display and location of the focus rectangle.
            </summary>
        </member>
        <member name="F:FarPoint.Win.DrawFocusRectangle.Default">
            <summary>
            Inherits the focus rectangle from the system settings
            </summary>
        </member>
        <member name="F:FarPoint.Win.DrawFocusRectangle.None">
            <summary>
            Does not display the focus rectangle
            </summary>
        </member>
        <member name="F:FarPoint.Win.DrawFocusRectangle.AroundText">
            <summary>
            Draws a focus rectangle around the text only
            </summary>
        </member>
        <member name="F:FarPoint.Win.DrawFocusRectangle.AroundPicture">
            <summary>
            Draws a focus rectangle around the picture only
            </summary>
        </member>
        <member name="F:FarPoint.Win.DrawFocusRectangle.AroundTextAndPicture">
            <summary>
            Draws a focus rectangle around the text and the picture
            </summary>
        </member>
        <member name="F:FarPoint.Win.DrawFocusRectangle.AroundEdge">
            <summary>
            Draws a focus rectangle around the edge of the element
            </summary>
        </member>
        <member name="T:FarPoint.Win.TextOrientation">
            <summary>
            Specifies the orientation of the text in a control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.TextOrientation.TextHorizontal">
            <summary>
            Aligns the text horizontally in the control
            </summary>
        </member>
        <member name="F:FarPoint.Win.TextOrientation.TextHorizontalFlipped">
            <summary>
            Aligns the text horizontally in the control and flipped
            </summary>
        </member>
        <member name="F:FarPoint.Win.TextOrientation.TextVertical">
            <summary>
            Aligns the text vertically in the control
            </summary>
        </member>
        <member name="F:FarPoint.Win.TextOrientation.TextVerticalFlipped">
            <summary>
            Aligns the text vertically in the control and flipped
            </summary>
        </member>
        <member name="F:FarPoint.Win.TextOrientation.TextTopDown">
            <summary>
            Aligns the text from the top to the bottom of the control and wraps left to right
            </summary>
        </member>
        <member name="F:FarPoint.Win.TextOrientation.TextTopDownRTL">
            <summary>
            Aligns the text from the top to the bottom of the control and wraps right to left
            </summary>
        </member>
        <member name="F:FarPoint.Win.TextOrientation.TextRotateCustom">
            <summary>
            Aligns the text based on a rotation angle for shape-related objects only
            </summary>
        </member>
        <member name="T:FarPoint.Win.PictureOrientation">
            <summary>
            Specifies the orientation of the picture in the control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PictureOrientation.PictureRotateNone">
            <summary>
            Does not rotate the picture
            </summary>
        </member>
        <member name="F:FarPoint.Win.PictureOrientation.PictureRotate90">
            <summary>
            Rotates the picture 90 degrees to the right
            </summary>
        </member>
        <member name="F:FarPoint.Win.PictureOrientation.PictureRotate180">
            <summary>
            Rotates the picture 180 degrees to the right
            </summary>
        </member>
        <member name="F:FarPoint.Win.PictureOrientation.PictureRotate270">
            <summary>
            Rotates the picture 270 degrees to the right
            </summary>
        </member>
        <member name="F:FarPoint.Win.PictureOrientation.PictureRotateCustom">
            <summary>
            Rotates the picture a custom number of degrees to the right
            </summary>
        </member>
        <member name="T:FarPoint.Win.ElementState">
            <summary>
            Specifies the state of the element for display. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementState.Normal">
            <summary>
            Display state is normal (active)
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementState.Inverted">
            <summary>
            Display state is inverted (as if it has been pressed)
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementState.Inactive">
            <summary>
            Display state is inactive
            </summary>
        </member>
        <member name="T:FarPoint.Win.ElementWithButtonsStyle">
            <summary>
            Specifies the button style to use in the ElementWithButtons class.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementWithButtonsStyle.StaticNoButtons">
            <summary>
            Does not display a button
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementWithButtonsStyle.Scroll">
            <summary>
            Displays a button on either side
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementWithButtonsStyle.DropDown">
            <summary>
            Displays a drop-down button on the right side
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementWithButtonsStyle.PopUp">
            <summary>
            Displays a pop-up button on the right side
            </summary>
        </member>
        <member name="T:FarPoint.Win.IStateNotify">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:FarPoint.Win.IElementNotify">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:FarPoint.Win.IElementDeletedNotify">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:FarPoint.Win.IInternalCommunication">
            <summary>
            
            </summary>
        </member>
        <member name="T:FarPoint.Win.IElementEnhanced">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ElementWithButtons">
            <summary>
            Represents windowless elements that display buttons.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ElementWindowless">
            <summary>
            Represents the windowless element for a control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementWindowless.PICTURE_MARGIN_DEFAULT">
            <summary>
            Represents the default picture margin for the element, namely 2 pixels.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementWindowless.BACK_COLOR_DEFAULT">
            <summary>
            Represents the default color background for the element, namely SystemColors.Control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementWindowless.FORE_COLOR_DEFAULT">
            <summary>
            Represents the default text color for the element, namely SystemColors.ControlText.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.#ctor">
            <summary>
            Creates a new windowless element object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.#ctor(System.Object)">
            <summary>
            Creates a new windowless element object based on the specified object. 
            </summary>
            <param name="cloneFrom">Object from which to make copy</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.CopyTo(System.Object)">
            <summary>
            Copies the properties of this windowless element object into the target object. 
            </summary>
            <param name="target">Target object</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetPictureMargin">
            <summary>
            Resets the margin between text and picture to its default value. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetMarginBottom">
            <summary>
            Resets the margin between the bottom of the element and its contents to the default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetMarginTop">
            <summary>
            Resets the margin between the top of the element and its contents to the default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetMarginLeft">
            <summary>
            Resets the margin between the left side of the element and its contents to the default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetMarginRight">
            <summary>
            Resets the margin between the right side of the element and its contents to the default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.SetRedraw(System.Boolean,System.Boolean)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the object to XML.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the object from XML.
            </summary>
            <param name="r">XmlNodeReader from which to read (load) the object.</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.BringToFront(System.Object)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.SendToBack(System.Object)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetVisible">
            <summary>
            Resets to the default value whether an element is visible.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetEnabled">
            <summary>
            Resets to the default value whether the element is enabled.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetCanFocus">
            <summary>
            Resets to the default value whether the element can have the focus.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetBorder">
            <summary>
            Resets the border of the element to its default settings.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetAlignText">
            <summary>
            Resets the text alignment of the element to the default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetTextOrientation">
            <summary>
            Resets the orientation of text in an element to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ShouldSerializeTextRotationAngle">
            <summary>
            Indicates whether the TextRotationAngle property should be persisted.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetTextRotationAngle">
            <summary>
            Resets the rotation angle for text in the element to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetPictureOrientation">
            <summary>
            Resets the orientation of the picture in the element to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ShouldSerializePictureTransparencyTolerance">
            <summary>
            Indicates whether the PictureTransparencyTolerance property should be persisted.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetPictureTransparencyTolerance">
            <summary>
            Resets the transparency tolerance for a picture in the element to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ShouldSerializePictureTransparencyColor">
            <summary>
            Indicates whether the PictureTransparencyColor property should be persisted.
            </summary>
            <returns>The transparency color</returns>
            <example>
            <code lang="csharp">
            control.Picture = Image.FromFile("d:\overlay.bmp");
            control.MarginTop = 3;
            control.MarginBottom = 3;
            control.PictureTransparencyColor = Color.Blue;
            </code>
            <code lang="vb">
            control.Picture = Image.FromFile("d:\overlay.bmp")
            control.MarginTop = 3
            control.MarginBottom = 3
            control.PictureTransparencyColor = Color.Blue
            </code>
            </example>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetPictureTransparencyColor">
            <summary>
            Resets the transparency of a picture in the element to its default value.
            </summary>
            <example>
            <code lang="csharp">
            control.Picture = Image.FromFile("d:\overlay.bmp");
            control.MarginTop = 3;
            control.MarginBottom = 3;
            control.PictureTransparencyColor = Color.Blue;
            private void button1_Click(object sender, System.EventArgs e)
            {
            control.ResetPictureTransparencyColor()
            }
            </code>
            <code lang="vb">
            control.Picture = Image.FromFile("d:\overlay.bmp")
            control.MarginTop = 3
            control.MarginBottom = 3
            control.PictureTransparencyColor = Color.Blue
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
            control.ResetPictureTransparencyColor()
            End Sub
            </code>
            </example> 
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetPicture">
            <summary>
            Resets the image for the element to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetForegroundImage">
            <summary>
            Resets the foreground image for the element to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetBackgroundImage">
            <summary>
            Resets the background image of the element to the default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ShouldSerializeFont">
            <summary>
            Indicates whether the Font property should be persisted. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetFont">
            <summary>
            Resets the font for the element to it default value.
            </summary>
            <example>
            <code lang="csharp">
            Font f = new System.Drawing.Font("MS Sans Serif", 12, FontStyle.Bold);
            element.Font = f;
            element.State = FarPoint.Win.ElementState.Inverted;
            element.ResetFont();
            </code>
            <code lang="vb">
            Dim f As New System.Drawing.Font("MS Sans Serif", 12, FontStyle.Bold)
            element.Font = f
            element.State = FarPoint.Win.ElementState.Inverted
            element.ResetFont();
            </code>
            </example>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.GetFont">
            <summary>
            Gets the default font used by the element, if the Font property is null.
            </summary>
            <example>
            <code lang="csharp">
            Font f = element.GetFont();
            }
            </code>
            <code lang="vb">
            Font f = element.GetFont()
            </code>
            </example>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetText">
            <summary>
            Resets the text in an element to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ShouldSerializeTag">
            <summary>
            Indicates whether the Tag property should be persisted.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetTag">
            <summary>
            Resets the Tag object for the element to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ShouldSerializeBackColor">
            <summary>
            Indicates whether the BackColor property should be persisted.
            </summary>
            <returns>New backcolor</returns>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetBackColor">
            <summary>
            Resets the background color to its default setting.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ShouldSerializeForeColor">
            <summary>
            Indicates whether the ForeColor property should be persisted.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetForeColor">
            <summary>
            Resets the text color for the element to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetAlignHorz">
            <summary>
            Resets the horizontal alignment of the element to the default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetAlignVert">
            <summary>
            Resets the vertical alignment of the element to the default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnGotFocus(System.EventArgs)">
            <summary>
             Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnLostFocus(System.EventArgs)">
            <summary>
             Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.Select(System.Boolean)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.GetControl">
            <summary>
            Gets the Control object if the element is derived from the ElementWindowless class.  
            </summary>
            <returns>Null if ElementControl derived</returns>   
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnFontChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.FontChanged"/> event when the 
            font in the control has changed.
            </summary>
            <param name="e">EventArgs object containing event data</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.Update">
            <summary>
            Causes the control to redraw the invalidated regions with its client area.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.AdjustClientArea">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the bounds of the element to the location and size of the bound rectangle of the specified dimensions. 
            </summary>
            <param name="x">X-coordinate of the top left corner of the bounding rectangle</param>
            <param name="y">Y-coordinate of the top left corner of the bounding rectangle</param>
            <param name="width">Number of pixels in the width of the bounding rectangle</param>
            <param name="height">Number of pixels in the height of the bounding rectangle</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.SetBoundsFloat(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the bounds of the element to the location and size of the bound rectangle of the specified dimensions. 
            </summary>
            <param name="x">X-coordinate of the top left corner of the bounding rectangle</param>
            <param name="y">Y-coordinate of the top left corner of the bounding rectangle</param>
            <param name="width">Number of pixels in the width of the bounding rectangle</param>
            <param name="height">Number of pixels in the height of the bounding rectangle</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.SetBounds(System.Drawing.Rectangle)">
            <summary>
            Sets the bounds of the element to the location and size of the specified bounding rectangle object. 
            </summary>
            <param name="rectInput">Rectangle object containing the bounding rectangle</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.SetBounds(System.Drawing.RectangleF)">
            <summary>
            Sets the bounds of the element to the location and size of the specified bounding rectangle object. 
            </summary>
            <param name="rectInput">Rectangle object containing the bounding rectangle</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.Focus(System.Boolean)">
            <summary>
            Moves the focus to the element.
            </summary>
            <param name="giveFocus">Whether the element is to receive focus</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.AttachMouseListeners">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DetachListeners">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnBackgroundImageChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.BackgroundImageChanged"/> event when the 
            background picture has changed.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnForegroundImageChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.ForegroundImageChanged"/> event when the 
            foreground picture has changed.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnPictureChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.PictureChanged"/> event when the 
            picture has changed.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnParentChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.ParentChanged"/> event when the 
            the parent of the element has changed.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.Changed"/> event when the 
            element has changed.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.PropertyChanged"/> event when the 
            property on an element has changed.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ProcessMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseDown processing.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.MouseDown"/> event when the 
            pointer button is pressed while the cursor is over the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DoMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ProcessMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseDown processing.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.MouseUp"/> event when the 
            pointer button is released while the cursor is over the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DoMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.MouseMove"/> event when the 
            pointer is moved within the control and the cursor is over the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DoMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.Click"/> event when the 
            use clicks on the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DoClick(System.Object,System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnDoubleClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.DoubleClick"/> event when the 
            use double clicks on the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DoDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.Refresh">
            <summary>
            Forces the element to invalidate its client area and immediately repaint.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetElements">
            <summary>
             Resets the elements to their default settings.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.Reset">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.Clone">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.SetState(FarPoint.Win.ElementState)">
            <summary>
            Sets the state of the element.
            </summary>
            <param name="eState">The enumerated state in which to place the element</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ToggleState">
            <summary>
            Toggles the state of the element.
            </summary> 
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.GetClientRectangle">
            <summary>
            Gets the coordinates of the element.
            </summary>
            <returns>Coordinates of the element</returns>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.GetClientRectangle(System.Drawing.Rectangle)">
            <summary>
            Gets the coordinates of the element.
            </summary>
            <param name="rectInput">Rectangle object containing the rectangle</param>
            <returns>Coordinates of the element</returns>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.GetClientRectangleF">
            <summary>
            Gets the coordinates of the element.
            </summary>
            <returns>Coordinates of the element</returns>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.GetClientRectangleF(System.Drawing.RectangleF)">
            <summary>
            Gets the coordinates of the element.
            </summary>
            <param name="rectInput">Rectangle object containing the rectangle</param>
            <returns>Coordinates of the element</returns>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the element (text and picture).
            </summary>
            <param name="g">Graphics device</param>
            <param name="rectInput">Coordinates of the element</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle,FarPoint.Win.ElementStyle)">
            <summary>
            Paints the element (both text and picture) using an overriding style.
            </summary>
            <param name="g">Graphics device</param>
            <param name="rectInput">Coordinates of the element</param>
            <param name="overrideStyle">Style to use when overriding</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.GetTextAndPictureRectangles(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle@,System.Drawing.Rectangle@)">
            <summary>
            Gets the rectangles for the text and pictures of the element.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle object containing the element coordinates</param>
            <param name="rPict">Returned rectangle of the picture</param>
            <param name="rText">Returned rectangle of the text</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.AdjustStringFormat(System.Drawing.StringFormat@)">
            <summary>
            Internal use only.
            </summary>
            <param name="fmt">String format</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.PaintText(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the text of the element in the specified rectangle.
            </summary>
            <param name="g">Graphics device</param>
            <param name="rText">Rectangle bounding the text</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.PaintPicture(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the picture in the element.
            </summary>
            <param name="g">Graphics device</param>
            <param name="rPict">Rectangle bounding the picture</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.PaintTextAndPicture(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the text and picture in the element.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding both the text and picture</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.PaintForegroundImage(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints foreground image.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.PaintFocusRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints focus rectangle.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.PaintElements(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints elements.
            </summary>
            <param name="g">Graphics device</param>
            <param name="faceRect">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.PaintBorder(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints borders.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.PaintBackgroundImage(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints background image.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.PaintSpecialBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints special background.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.PaintSpecialForeground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints special foreground.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.PaintBackColor(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints background color.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnPaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the background of the element.
            </summary>
            <param name="g">Graphics device</param>
            <param name="rectInput">Coordinates of the element</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnPaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle,FarPoint.Win.ElementStyle)">
            <summary>
            Paints the background of the element using an overriding style.
            </summary>
            <param name="g">Graphics device</param>
            <param name="rectInput">Coordinates of the element</param>
            <param name="overrideStyle">Style to use when overriding</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.SetElementStyle(FarPoint.Win.ElementStyle)">
            <summary>
            Sets the style for the element.
            </summary>
            <param name="style">ElementStyle object containing the style of the element</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.SetElementStyle(FarPoint.Win.ElementStyle,System.Boolean)">
            <summary>
            Sets the style for the element and clears unset properties.
            </summary>
            <param name="style">ElementStyle object containing the style of the element</param>
            <param name="clearUnsetProps">Whether to reset properties that are not set 
               in the element to their default settings</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.GetElementStyle">
            <summary>
            Gets the style for the element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.AddStateNotify(FarPoint.Win.IStateNotify)">
            <summary>
            Internal use only.
            </summary>
            <param name="target">Target</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.RemoveStateNotify(FarPoint.Win.IStateNotify)">
            <summary>
            Internal use only.
            </summary>
            <param name="target">Target</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.FireStateNotify">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.GetRotatedTextSize(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Rectangle,FarPoint.Win.TextOrientation,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming)">
            <summary>
            Gets the size of the specified text when drawn with the specified font, orientation, wrapping, hotkey prefix, and string trimming.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="s">String</param>
            <param name="font">Font</param>
            <param name="r">Rectangle</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">True to wrap text, false otherwise.</param>
            <param name="hotkeyPrefix">HotkeyPrefix</param>
            <param name="stringTrim">StringTrimming</param>
            <returns>Size</returns>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.GetRotatedTextSize(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.RectangleF,FarPoint.Win.TextOrientation,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming)">
            <summary>
            Gets the size of the specified text when drawn with the specified font, orientation, wrapping, hotkey prefix and string trimming.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="s">String</param>
            <param name="font">Font</param>
            <param name="r">RectangleF</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">True to wrap text, false otherwise</param>
            <param name="hotkeyPrefix">HotkeyPrefix</param>
            <param name="stringTrim">StringTrimming</param>
            <returns>SizeF</returns>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DrawRotatedText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Rectangle,FarPoint.Win.HorizontalAlignment,FarPoint.Win.TextOrientation,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming,System.Int32)">
            <summary>
            Draws the specified string in the specified rectangle, with the specified font, color, alignments, orientation, hotkey prefix and wrapping.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="s">String to draw</param>
            <param name="font">Font to use</param>
            <param name="foreColor">Color of text</param>
            <param name="rectText">Rectangle in which to draw string</param>
            <param name="halign">Horizontal alignment</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">True to </param>
            <param name="hotkeyPrefix">HotkeyPrefix</param>
            <param name="stringtrim">StringTrimming</param>
            <param name="drawRectHeight">Height of the target rectangle in pixels</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DrawRotatedText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,FarPoint.Win.HorizontalAlignment,FarPoint.Win.TextOrientation,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming,System.Int32)">
            <summary>
            Draws the specified string in the specified rectangle, with the specified font, color, alignment, orientation, wrapping, hotkey prefix and string trimming.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="s">String to draw</param>
            <param name="font">Font to use</param>
            <param name="foreColor">Color of text</param>
            <param name="rectText">Rectangle in which to draw string</param>
            <param name="halign">Horizontal alignment</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">True to wrap text, false otherwise</param>
            <param name="hotkeyPrefix">HotkeyPrefix</param>
            <param name="stringTrim">StringTrimming</param>
            <param name="drawRectHeight">Height of the target rectangle in pixels</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DrawRotatedText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.TextOrientation,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming,System.Int32)">
            <summary>
            Draws the specified string in the specified rectangle, with the specified font, color, alignment, orientation, wrapping, hotkey prefix and string trimming.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="s">String to draw</param>
            <param name="font">Font to use</param>
            <param name="foreColor">Color of text</param>
            <param name="rectText">Rectangle in which to draw string</param>
            <param name="halign">Horizontal alignment</param>
            <param name="valign">Vertical alignment</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">True to wrap text, false otherwise</param>
            <param name="hotkeyPrefix">HotkeyPrefix</param>
            <param name="stringTrim">StringTrimming</param>
            <param name="drawRectHeight">Height of the target rectangle in pixels</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DrawRotatedText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.TextOrientation,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming,System.Int32,System.Boolean)">
            <summary>
            Draws the specified string in the specified rectangle, with the specified font, color, alignment, orientation, wrapping, hotkey prefix and string trimming.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="s">String to draw</param>
            <param name="font">Font to use</param>
            <param name="foreColor">Color of text</param>
            <param name="rectText">Rectangle in which to draw string</param>
            <param name="halign">Horizontal alignment</param>
            <param name="valign">Vertical alignment</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">True to wrap text, false otherwise</param>
            <param name="hotkeyPrefix">HotkeyPrefix</param>
            <param name="stringTrim">StringTrimming</param>
            <param name="drawRectHeight">Height of the target rectangle in pixels</param>
            <param name="adjust">Whether to adjust the rectangle for alignment</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DrawRotatedText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.TextOrientation,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming,System.Int32,System.Boolean,System.Single)">
            <summary>
            Draws the specified string in the specified rectangle, with the specified font, color, alignment, orientation, wrapping, hotkey prefix, string trimming and rotation angle.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="s">String to draw</param>
            <param name="font">Font to use</param>
            <param name="foreColor">Color of text</param>
            <param name="rectText">Rectangle in which to draw string</param>
            <param name="halign">Horizontal alignment</param>
            <param name="valign">Vertical alignment</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">True to wrap text, false otherwise</param>
            <param name="hotkeyPrefix">HotkeyPrefix</param>
            <param name="stringTrim">StringTrimming</param>
            <param name="drawRectHeight">Height of the target rectangle in pixels</param>
            <param name="adjust">Whether to adjust the rectangle for alignment</param>
            <param name="rotationAngle">Angle to rotate text</param>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.BackgroundImageChanged">
            <summary>
            Occurs when the background image for the element changes.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.Click">
            <summary>
            Occurs when the user clicks the element.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.DoubleClick">
            <summary>
            Occurs when the user double-clicks the element.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.FontChanged">
            <summary>
            Occurs when the font for the element changes.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.ForegroundImageChanged">
            <summary>
            Occurs when the foreground image for the element changes.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.MouseDown">
            <summary>
            Occurs if the user presses a mouse button while the cursor is over the element.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.MouseMove">
            <summary>
            Occurs if the user moves the cursor while the cursor is over the element.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.MouseUp">
            <summary>
            Occurs if the user releases a mouse button while the cursor is over the element.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.PictureChanged">
            <summary>
            Occurs when the picture in the element changes.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.ParentChanged">
            <summary>
            Occurs when the parent of the element changes.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.Changed">
            <summary>
            Occurs when the element changes.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.PropertyChanged">
            <summary>
            Occurs when a property on the element changes.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.TextWrap">
            <summary>
            Gets or sets whether to wrap the text in the element.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.TextWrapPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Focused">
            <summary>
            Gets whether the element has focus.
            </summary>
            <example>
            <code lang="csharp">
            bool vbool;
            element.AlignHorz = FarPoint.Win.HorizontalAlignment.Left;
            element.AlignVert = FarPoint.Win.VerticalAlignment.Top;
            element.TextWrap = true;
            element.Text = "Let's plan on meeting at 10.";
            vbool = element.Focused;
            textBox1.Text = Convert.ToString(vbool);
            </code>
            <code lang="vb">
            Dim vbool As Boolean
            element.AlignHorz = FarPoint.Win.HorizontalAlignment.Left
            element.AlignVert = FarPoint.Win.VerticalAlignment.Top
            element.TextWrap = true
            element.Text = "Let's plan on meeting at 10."
            vbool = control.Focused
            TextBox1.Text = vbool
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.ContainsFocus">
            <summary>
            Gets whether the element currently has the input focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.CancelMouse">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.PictureMargin">
            <summary>
            Gets or sets the margin between the text and the picture.
            </summary>
            <example>
            <code lang="csharp">
            element.Picture = System.Drawing.Image.FromFile("d:\\mail16A.ico");
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            element.PictureMargin = 25;
            </code>
            <code lang="vb">
            element.Picture = System.Drawing.Image.FromFile("d:\mail16A.ico")
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            element.PictureMargin = 25
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.MarginBottom">
            <summary>
            Gets or sets the margin between the bottom of the element and its contents.
            </summary>
            <example>
            <code lang="csharp">
            element.Picture = System.Drawing.Image.FromFile("d:\\mail16A.ico");
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            element.PictureMargin = 25;
            element.MarginBottom = 20;
            </code>
            <code lang="vb">
            element.Picture = System.Drawing.Image.FromFile("d:\mail16A.ico")
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            element.PictureMargin = 25
            element.MarginBottom = 20
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.MarginTop">
            <summary>
            Gets or sets the margin between the top of the element and its contents.
            </summary>
            <example>
            <code lang="csharp">
            element.Picture = System.Drawing.Image.FromFile("d:\\mail16A.ico");
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            element.PictureMargin = 25;
            element.MarginTop = 20;
            </code>
            <code lang="vb">
            element.Picture = System.Drawing.Image.FromFile("d:\mail16A.ico")
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            element.PictureMargin = 25
            element.MarginTop = 20
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.MarginLeft">
            <summary>
            Gets or sets the margin between the left edge of the element and its contents.
            </summary>
            <example>
            <code lang="csharp">
            element.Picture = System.Drawing.Image.FromFile("d:\\mail16A.ico");
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            element.PictureMargin = 25;
            element.MarginLeft = 20;
            </code>
            <code lang="vb">
            element.Picture = System.Drawing.Image.FromFile("d:\mail16A.ico")
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            element.PictureMargin = 25
            element.MarginLeft = 20
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.MarginRight">
            <summary>
            Gets or sets the margin between the right edge of the element and its contents.
            </summary>
            <example>
            <code lang="csharp">
            element.Picture = System.Drawing.Image.FromFile("d:\\mail16A.ico");
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            element.PictureMargin = 25;
            element.MarginRight = 20;
            </code>
            <code lang="vb">
            element.Picture = System.Drawing.Image.FromFile("d:\mail16A.ico")
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            element.PictureMargin = 25
            element.MarginRight = 20
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Redraw">
            <summary>
            Gets or sets whether the element is allowed to paint.
            </summary>
            <example>
            <code lang="csharp">
            private void button1_Click(object sender, System.EventArgs e)
            {
            element.Redraw = true;
            }
            </code>
            <code lang="vb">
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
            element.Redraw = True
            End Sub
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Selectable">
            <summary>
            Gets or sets whether the control can receive focus. 
            </summary>
            <example>
            <code lang="csharp">
            private void button1_Click(object sender, System.EventArgs e)
            {
            element.Visible = true;
            element.Enabled = false;
            element.Selectable = false;
            }
            </code>
            <code lang="vb">
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
            element.Visible = True
            element.Enabled = False
            element.Selectable = False
            End Sub
            </code>
            </example>        
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.DrawFocusRectangle">
            <summary>
            Gets or sets the focus rectangle drawing style in the element.
            </summary>
            <example>
            <code lang="csharp">
            element.Picture = System.Drawing.Image.FromFile("d:\\mail16A.ico");
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            element.PictureMargin = 25;
            element.MarginBottom = 20;
            element.DrawFocusRectangle = FarPoint.Win.DrawFocusRectangle.AroundText;
            </code>
            <code lang="vb">
            element.Picture = System.Drawing.Image.FromFile("d:\mail16A.ico")
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            element.PictureMargin = 25
            element.MarginBottom = 20
            element.DrawFocusRectangle = FarPoint.Win.DrawFocusRectangle.AroundText
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Parent">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Visible">
            <summary>
            Gets or sets whether the element is visible. 
            </summary>
            <example>
            <code lang="csharp">
            private void button1_Click(object sender, System.EventArgs e)
            {
            element.Visible = true;
            element.Enabled = false;
            element.Selectable = false;
            }
            </code>
            <code lang="vb">
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
            element.Visible = True
            element.Enabled = False
            element.Selectable = False
            End Sub
            </code>
            </example>       
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Enabled">
            <summary>
            Gets or sets whether the element is enabled.  
            </summary>
            <example>
            <code lang="csharp">
            private void button1_Click(object sender, System.EventArgs e)
            {
            element.Visible = true;
            element.Enabled = false;
            element.Selectable = false;
            }
            </code>
            <code lang="vb">
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
            element.Visible = True
            element.Enabled = False
            element.Selectable = False
            End Sub
            </code>
            </example>       
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.CanFocus">
            <summary>
            Gets or sets whether the element can receive focus.
            </summary>
            /// <example>
            <code lang="csharp">
            private void button1_Click(object sender, System.EventArgs e)
            {
            element.Visible = true;
            element.Enabled = false;
            element.Selectable = false;
            element.CanFocus = false;
            }
            </code>
            <code lang="vb">
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
            element.Visible = True
            element.Enabled = False
            element.Selectable = False
            element.CanFocus = False
            End Sub
            </code>
            </example> 
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Border">
            <summary>
            Gets or sets the border for the element.
            </summary>
            <example>
            <code lang="csharp">
            element.Picture = System.Drawing.Image.FromFile("d:\\mail16A.ico");
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            element.PictureMargin = 25;
            element.MarginBottom = 20;
            element.DrawFocusRectangle = FarPoint.Win.DrawFocusRectangle.AroundText;
            element.Border = new FarPoint.Win.BevelBorder(FarPoint.Win.BevelBorderType.Lowered,SystemColors.ControlLightLight,SystemColors.ControlDark,3,true,true,false,false);
            </code>
            <code lang="vb">
            element.Picture = System.Drawing.Image.FromFile("d:\mail16A.ico")
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            element.PictureMargin = 25
            element.MarginBottom = 20
            element.DrawFocusRectangle = FarPoint.Win.DrawFocusRectangle.AroundText
            element.Border = New FarPoint.Win.BevelBorder(FarPoint.Win.BevelBorderType.Lowered,SystemColors.ControlLightLight,SystemColors.ControlDark,3,True,True,False,False)
            </code>
            </example>   
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.AlignText">
            <summary>
            Gets or sets the text alignment for the element.
            </summary>
            <example>
            <code lang="csharp">
            element.Picture = System.Drawing.Image.FromFile("d:\\mail16A.ico");
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            element.PictureMargin = 25;
            element.MarginBottom = 20;
            element.DrawFocusRectangle = FarPoint.Win.DrawFocusRectangle.AroundText;
            element.Border = new FarPoint.Win.BevelBorder(FarPoint.Win.BevelBorderType.Lowered,SystemColors.ControlLightLight,SystemColors.ControlDark,3,true,true,false,false);
            </code>
            <code lang="vb">
            element.Picture = System.Drawing.Image.FromFile("d:\mail16A.ico")
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            element.PictureMargin = 25
            element.MarginBottom = 20
            element.DrawFocusRectangle = FarPoint.Win.DrawFocusRectangle.AroundText
            element.Border = New FarPoint.Win.BevelBorder(FarPoint.Win.BevelBorderType.Lowered,SystemColors.ControlLightLight,SystemColors.ControlDark,3,True,True,False,False)
            </code>
            </example>   
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.TextOrientation">
            <summary>
            Gets or sets the text orientation for the element.
            </summary>
            <example>
            <code lang="csharp">
            element.Picture = System.Drawing.Image.FromFile("d:\\mail16A.ico");
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            element.PictureMargin = 25;
            element.MarginBottom = 20;
            element.DrawFocusRectangle = FarPoint.Win.DrawFocusRectangle.AroundText;
            element.Border = new FarPoint.Win.BevelBorder(FarPoint.Win.BevelBorderType.Lowered,SystemColors.ControlLightLight,SystemColors.ControlDark,3,true,true,false,false);
            element.TextOrientation = FarPoint.Win.TextOrientation.TextTopDown;
            </code>
            <code lang="vb">
            element.Picture = System.Drawing.Image.FromFile("d:\mail16A.ico")
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            element.PictureMargin = 25
            element.MarginBottom = 20
            element.DrawFocusRectangle = FarPoint.Win.DrawFocusRectangle.AroundText
            element.Border = New FarPoint.Win.BevelBorder(FarPoint.Win.BevelBorderType.Lowered,SystemColors.ControlLightLight,SystemColors.ControlDark,3,True,True,False,False)
            element.TextOrientation = FarPoint.Win.TextOrientation.TextTopDown
            </code>
            </example>   
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.TextOrientationPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.TextRotationAngle">
            <summary>
            Gets or sets the rotation angle of the text in the element.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.TextRotationAnglePriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.PictureOrientation">
            <summary>
            Gets or sets the picture orientation for the element.
            </summary>
            <example>
            <code lang="csharp">
            element.Picture = System.Drawing.Image.FromFile("d:\\mail16A.ico");
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            element.PictureMargin = 25;
            element.MarginBottom = 20;
            element.DrawFocusRectangle = FarPoint.Win.DrawFocusRectangle.AroundText;
            element.Border = new FarPoint.Win.BevelBorder(FarPoint.Win.BevelBorderType.Lowered,SystemColors.ControlLightLight,SystemColors.ControlDark,3,true,true,false,false);
            element.TextOrientation = FarPoint.Win.TextOrientation.TextTopDown;
            element.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate90;
            </code>
            <code lang="vb">
            element.Picture = System.Drawing.Image.FromFile("d:\mail16A.ico")
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            element.PictureMargin = 25
            element.MarginBottom = 20
            element.DrawFocusRectangle = FarPoint.Win.DrawFocusRectangle.AroundText
            element.Border = New FarPoint.Win.BevelBorder(FarPoint.Win.BevelBorderType.Lowered,SystemColors.ControlLightLight,SystemColors.ControlDark,3,True,True,False,False)
            element.TextOrientation = FarPoint.Win.TextOrientation.TextTopDown
            element.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate90
            </code>
            </example>   
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.PictureOrientationPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.PictureTransparencyTolerance">
            <summary>
            Gets or sets the picture transparency tolerance for the element.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.PictureTransparencyColor">
            <summary>
            Gets or sets the picture transparency color for the element.
            </summary>
            <example>
            <code lang="csharp">
            control.Picture = Image.FromFile("d:\overlay.bmp");
            control.MarginTop = 3;
            control.MarginBottom = 3;
            control.PictureTransparencyColor = Color.Blue;
            </code>
            <code lang="vb">
            control.Picture = Image.FromFile("d:\overlay.bmp")
            control.MarginTop = 3
            control.MarginBottom = 3
            control.PictureTransparencyColor = Color.Blue
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Picture">
            <summary>
            Gets or sets the picture for the element.
            </summary>
            <example>
            <code lang="csharp">
            control.Picture = Image.FromFile("d:\overlay.bmp");
            control.MarginTop = 3;
            control.MarginBottom = 3;
            control.PictureTransparencyColor = Color.Blue;
            </code>
            <code lang="vb">
            control.Picture = Image.FromFile("d:\overlay.bmp")
            control.MarginTop = 3
            control.MarginBottom = 3
            control.PictureTransparencyColor = Color.Blue
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.ForegroundImage">
            <summary>
            Gets or sets the foreground image for the element.
            </summary>
            <example>
            <code lang="csharp">
            control.ForegroundImage = new FarPoint.Win.Picture(Image.FromFile("d:\overlay.bmp"));
            control.MarginTop = 3;
            control.MarginBottom = 3;
            </code>
            <code lang="vb">
            control.ForegroundImage = New FarPoint.Win.Picture(Image.FromFile("d:\overlay.bmp"))
            control.MarginTop = 3
            control.MarginBottom = 3
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.ForegroundImagePriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.BackgroundImage">
            <summary>
            Gets or sets the background image for the control.
            </summary>
            <example>
            <code lang="csharp">
            control.BackgroundImage = new FarPoint.Win.Picture(Image.FromFile("d:\overlay.bmp"));
            control.MarginTop = 3;
            control.MarginBottom = 3;
            </code>
            <code lang="vb">
            control.BackgroundImage = New FarPoint.Win.Picture(Image.FromFile("d:\overlay.bmp"))
            control.MarginTop = 3
            control.MarginBottom = 3
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.BackgroundImagePriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.State">
            <summary>
            Gets or sets the state of the element.
            </summary>
            <example>
            <code lang="csharp">
            Font f = new System.Drawing.Font("MS Sans Serif", 12, FontStyle.Bold);
            element.Font = f;
            element.State = FarPoint.Win.ElementState.Inverted;
            </code>
            <code lang="vb">
            Dim f As New System.Drawing.Font("MS Sans Serif", 12, FontStyle.Bold)
            element.Font = f
            element.State = FarPoint.Win.ElementState.Inverted
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Font">
            <summary>
            Gets or sets the font for the element.
            </summary>
            <example>
            <code lang="csharp">
            Font f = new System.Drawing.Font("MS Sans Serif", 12, FontStyle.Bold);
            element.Font = f;
            element.State = FarPoint.Win.ElementState.Inverted;
            </code>
            <code lang="vb">
            Dim f As New System.Drawing.Font("MS Sans Serif", 12, FontStyle.Bold)
            element.Font = f
            element.State = FarPoint.Win.ElementState.Inverted
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.FontPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Text">
            <summary>
            Gets or sets the text for the element.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.TextPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Name">
            <summary>
            Gets or sets the name of the element.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Tag">
            <summary>
            Gets or sets the Tag object for the element.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.BackColor">
            <summary>
            Gets or sets the background color for the element.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.BackColorPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.ForeColor">
            <summary>
            Gets or sets the foreground color for the element.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.ForeColorPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.AlignHorz">
            <summary>
            Gets or sets the horizontal alignment of the contents of the element. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.AlignVert">
            <summary>
            Gets or sets the vertical alignment of the contents of the element. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Rectangle">
            <summary>
            Gets the rectangular coordinates of the element.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.RectangleF">
            <summary>
            Gets the rectangular coordinates of the element.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.StateNotifyList">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Elements">
            <summary>
            Gets the collection of IElement-derived objects that the current ElementWindowless object contains.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.#ctor(System.Object)">
            <summary>
            Creates a new element with buttons by copying a specified object.
            </summary>
            <param name="cloneFrom">Object from which to make a copy</param>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.Dispose">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.Reset">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.InitializeButtons">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.SetRedraw(System.Boolean,System.Boolean)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.AttachListeners">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.GetClientRectangle(System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.ProcessMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the MouseDown event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.ProcessMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the MouseUp event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.OnScrollClick(System.Object,System.EventArgs)">
            <summary>
            Processes the Click events that occur in scroll buttons.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.OnScrollMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the MouseDown events that occur in scroll buttons.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.OnScrollDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Processes the DoubleClick events that occur in scroll buttons.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.OnDropClick(System.Object,System.EventArgs)">
            <summary>
            Processes the Click events that occur in a drop-down button.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.OnDropDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Processes the DoubleClick events that occur in a drop-down button.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.OnPopUpClick(System.Object,System.EventArgs)">
            <summary>
            Processes the Click events that occur in the pop-up button.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.OnPopUpDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Processes the DoubleClick events that occur in the pop-up button.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.Clone">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.SetBoundsFloat(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the bounds of the element to the location and size of the bound rectangle of the specified dimensions. 
            </summary>
            <param name="x">X-coordinate of the top left corner of the bounding rectangle</param>
            <param name="y">Y-coordinate of the top left corner of the bounding rectangle</param>
            <param name="width">Number of pixels in the width of the bounding rectangle</param>
            <param name="height">Number of pixels in the height of the bounding rectangle</param>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.SetElementBounds(System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.DoClick(System.Object,System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.DoMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWithButtons.Redraw">
            <summary>
            Gets or sets whether the element is allowed to paint. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWithButtons.Parent">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWithButtons.ButtonStyle">
            <summary>
            Gets or sets the button style for ElementsWithButtons objects.
            </summary>
            <example>
            <code lang="csharp">
            element.ButtonStyle = FarPoint.Win.ElementWithButtonsStyle.DropDown;
            element.ButtonWidth = 5;
            </code>
            <code lang="vb">
            element.ButtonStyle = FarPoint.Win.ElementWithButtonsStyle.DropDown
            element.ButtonWidth = 5
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWithButtons.ButtonWidth">
            <summary>
            Gets or sets the button width.
            </summary>
            <example>
            <code lang="csharp">
            element.ButtonStyle = FarPoint.Win.ElementWithButtonsStyle.DropDown;
            element.ButtonWidth = 5;
            </code>
            <code lang="vb">
            element.ButtonStyle = FarPoint.Win.ElementWithButtonsStyle.DropDown
            element.ButtonWidth = 5
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWithButtons.VisualStyles">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWithButtons.ButtonWidthInternal">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWithButtons.ScrollUpButton">
            <summary>
            Gets whether a scroll up button has been implemented.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWithButtons.ScrollDownButton">
            <summary>
            Gets whether a scroll down button has been implemented.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWithButtons.DropDownButton">
            <summary>
            Gets whether a drop-down button has been implemented.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWithButtons.PopUpButton">
            <summary>
            Gets whether a pop-up button has been implemented.
            </summary>
        </member>
        <member name="T:FarPoint.Win.NoFocusChangeException">
            <summary>
            Represents the no focus change exception.
            </summary>
        </member>
        <member name="T:FarPoint.Win.DropDownButtonElement">
            <summary>
            Represents the drop-down button element.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ButtonElement">
            ==========================================================================================
             <summary>
             Represents a button element object.
             </summary>
        </member>
        <member name="M:FarPoint.Win.ButtonElement.#ctor">
            <summary>
            Creates a button element object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ButtonElement.#ctor(System.Object)">
            <summary>
            Creates a button element object by copying another.
            </summary>
            <param name="cloneFrom">Object from which to make a copy</param>
        </member>
        <member name="M:FarPoint.Win.ButtonElement.Clone">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ButtonElement.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseDown processing.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ButtonElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseUp processing.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DropDownButtonElement.#ctor">
            <summary>
            Creates a new drop-down button element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DropDownButtonElement.AttachMouseListeners">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DropDownButtonElement.DetachListeners">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DropDownButtonElement.DoMouseEnter(System.Object,System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DropDownButtonElement.DoMouseLeave(System.Object,System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DropDownButtonElement.OnPaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DropDownButtonElement.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DropDownButtonElement.DoMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DropDownButtonElement.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.DropDownButtonElement.VisualStyles">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="T:FarPoint.Win.SpinUpButtonElement">
            <summary>
            Represents a spin-up button element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinUpButtonElement.#ctor">
            <summary>
            Creates a new spin-up button element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinUpButtonElement.AttachMouseListeners">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinUpButtonElement.DetachListeners">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinUpButtonElement.DoMouseEnter(System.Object,System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinUpButtonElement.DoMouseLeave(System.Object,System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinUpButtonElement.OnPaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinUpButtonElement.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinUpButtonElement.DoMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinUpButtonElement.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SpinUpButtonElement.VisualStyles">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="T:FarPoint.Win.SpinDownButtonElement">
            <summary>
            Represents a spin-down button element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinDownButtonElement.#ctor">
            <summary>
            Creates a new spin-down button element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinDownButtonElement.AttachMouseListeners">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinDownButtonElement.DetachListeners">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinDownButtonElement.DoMouseEnter(System.Object,System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinDownButtonElement.DoMouseLeave(System.Object,System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinDownButtonElement.OnPaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinDownButtonElement.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinDownButtonElement.DoMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinDownButtonElement.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SpinDownButtonElement.VisualStyles">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="T:FarPoint.Win.Elements">
            <summary>
            Represents a collection of elements.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.#ctor">
            <summary>
            Creates a collection of elements.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.Find(System.String)">
            <summary>
            Finds an element in the collection that matches the specified name.
            </summary>
            <param name="elementName">Name of the element</param>
        </member>
        <member name="M:FarPoint.Win.Elements.Contains(System.Object)">
            <summary>
            Gets whether an element is in the collection.
            </summary>
            <param name="element">Element object</param>
        </member>
        <member name="M:FarPoint.Win.Elements.IndexOf(System.Object)">
            <summary>
            Get the index of an element in the collection.
            </summary>
            <param name="element">Element object</param>
        </member>
        <member name="M:FarPoint.Win.Elements.FindByType(System.Type,System.String)">
            <summary>
            Finds an element in the collection that matches the specified type and name.
            </summary>
            <param name="t">Type of element</param>
            <param name="elementName">Name of element</param>
        </member>
        <member name="M:FarPoint.Win.Elements.Add(System.Object)">
            <summary>
            Adds an element to the collection and returns its index.
            </summary>
            <param name="e">Element object</param>
        </member>
        <member name="M:FarPoint.Win.Elements.Add(System.Object,System.Boolean)">
            <summary>
            Adds an element to the collection and returns its index.
            </summary>
            <param name="e">Element object</param>
            <param name="noClone">Whether to add as is, no cloning</param>
        </member>
        <member name="M:FarPoint.Win.Elements.Clear">
            <summary>
            Removes all the elements from the collection.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.Remove(System.Object)">
            <summary>
            Removes the specified element from the collection.
            </summary>
            <param name="e">Element object</param>
        </member>
        <member name="M:FarPoint.Win.Elements.RemoveAt(System.Int32)">
            <summary>
            Removes the specified element (by index) from the collection.
            </summary>
            <param name="index">Index of the element</param>
        </member>
        <member name="M:FarPoint.Win.Elements.RemoveByName(System.String)">
            <summary>
            Removes the specified element (by name) from the collection.
            </summary>
            <param name="elementName">Name of the element</param>
        </member>
        <member name="M:FarPoint.Win.Elements.Replace(System.Object,System.Object)">
            <summary>
            Replaces an existing element with a new one. 
            </summary>
            <param name="newObj">The new element to be used</param>
            <param name="oldObj">The element to be replaced</param>
            <returns>New element if successful, otherwise -1</returns>
        </member>
        <member name="M:FarPoint.Win.Elements.ReplaceAt(System.Int32,System.Object)">
            <summary>
            Replaces an existing element at index with a new one. 
            </summary>
            <param name="index">Index of the element to be replaced</param>
            <param name="newObj">New element to be used</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Elements.GetEnumerator(System.Int32,System.Int32)">
            <summary>
            Returns the index and number of the array list of elements.
            </summary>
            <param name="index">Location of the element</param>
            <param name="count">Number of elements in the collection</param>
            <returns>Index and number of the elements' array list</returns>
        </member>
        <member name="M:FarPoint.Win.Elements.GetEnumerator">
            <summary>
            Returns the array list of elements.
            </summary>
            <returns>Elements' array list</returns>
        </member>
        <member name="M:FarPoint.Win.Elements.AddNotify(FarPoint.Win.IElementNotify)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.RemoveNotify(FarPoint.Win.IElementNotify)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.FireElementNotify(System.Object)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.AddDeletedNotify(FarPoint.Win.IElementDeletedNotify)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.RemoveDeletedNotify(FarPoint.Win.IElementDeletedNotify)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.FireElementDeletedNotify(System.Object)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.CopyTo(System.Array,System.Int32)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.AddRange(System.Object[])">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Elements.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Elements.Item(System.Int32)">
            <summary>
            Gets the element at the specified index within the collection.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Elements.IsSynchronized">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Elements.SyncRoot">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Elements.ElementEnumerator">
            <summary>
            Implements IEnumerator for all of the various types of enumerators 
            (All, Days, RecurringDates, and SpecificDates).
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.ElementEnumerator.#ctor(FarPoint.Win.Elements)">
            <summary>
            Creates an enumerator for the elements in the specified array.
            </summary>
            <param name="elementArray">Elements array</param>
        </member>
        <member name="M:FarPoint.Win.Elements.ElementEnumerator.#ctor(FarPoint.Win.Elements,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates an enumerator for the elements in the specified array with the specified start and end.
            </summary>
            <param name="elementArray">Elements array</param>
            <param name="returnIndex">Whether to return the index</param>
            <param name="startIndex">Starting index</param>
            <param name="endIndex">Ending index</param>
        </member>
        <member name="M:FarPoint.Win.Elements.ElementEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element in the Elements array.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.ElementEnumerator.Reset">
            <summary>
            Resets the enumerator to its initial position, which is
            before the first element in the Elements array.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Elements.ElementEnumerator.Current">
            <summary>
            Gets the current element in the enumerator.
            </summary>
        </member>
        <member name="T:FarPoint.Win.IElementStyle">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ElementStyle">
            <summary>
            Represents the element style object. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.#ctor">
            <summary>
            Creates an element style (ElementStyle object).
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.Reset">
            <summary>
            Resets the element style.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsPictureMarginSet">
            <summary>
            Gets whether the PictureMargin property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsMarginBottomSet">
            <summary>
            Gets whether the MarginBottom property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsMarginTopSet">
            <summary>
            Gets whether the MarginTop property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsMarginLeftSet">
            <summary>
            Gets whether the MarginLeft property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsMarginRightSet">
            <summary>
            Gets whether the MarginRight property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsSelectableSet">
            <summary>
            Gets whether the Selectable property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsDrawFocusRectangleSet">
            <summary>
            Gets whether the DrawFocusRectangle property is set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsVisibleSet">
            <summary>
            Gets whether the Visible property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsEnabledSet">
            <summary>
            Gets whether the Enabled property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsTextWrapSet">
            <summary>
            Gets whether the TextWrap property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsCanFocusSet">
            <summary>
            Gets whether the CanFocus property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsBorderSet">
            <summary>
            Gets whether the Border property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsAlignTextSet">
            <summary>
            Gets whether the AlignText property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsTextOrientationSet">
            <summary>
            Gets whether the TextOrientation property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsPictureOrientationSet">
            <summary>
            Gets whether the PictureOrientation property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsPictureTransparencyColorSet">
            <summary>
            Gets whether the PictureTransparencyColor property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsPictureSet">
            <summary>
            Gets whether the Picture property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsForegroundImageSet">
            <summary>
            Gets whether the ForegroundImage property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsBackgroundImageSet">
            <summary>
            Gets whether the BackgroundImage property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsFontSet">
            <summary>
            Gets whether the Font property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsTextSet">
            <summary>
            Gets whether the Text property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsStyleNameSet">
            <summary>
            Gets whether the StyleName property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsBackColorSet">
            <summary>
            Gets whether the BackColor property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsForeColorSet">
            <summary>
            Gets whether the ForeColor property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsAlignHorzSet">
            <summary>
            Gets whether the AlignHorz property is set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsAlignVertSet">
            <summary>
            Gets whether the AlignVert property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.PictureMargin">
            <summary>
            Gets or sets the margin between the text and the picture for the style.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.MarginBottom">
            <summary>
            Gets or sets the margin between the bottom of the object and its contents. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.MarginTop">
            <summary>
            Gets or sets the margin between the top of the object and its contents. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.MarginLeft">
            <summary>
            Gets or sets the margin between the left edge of the object and its contents. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.MarginRight">
            <summary>
            Gets or sets the margin between the right edge of the object and its contents. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.Selectable">
            <summary>
            Gets or sets whether the user can interact with the element. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.DrawFocusRectangle">
            <summary>
            Gets or sets the focus rectangle drawing style for the object. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.Visible">
            <summary>
            Gets or sets, for the style, whether the element is visible. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.Enabled">
            <summary>
            Gets or sets whether the object can receive focus and respond to user actions. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.TextWrap">
            <summary>
            Gets or sets whether to automatically wrap text without line breaks. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.CanFocus">
            <summary>
            Gets or sets whether the object can receive focus. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.Border">
            <summary>
            Gets or sets the border for the style. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.AlignText">
            <summary>
            Gets or sets the alignment of the text with respect to the alignment of the picture for the style. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.TextOrientation">
            <summary>
            Gets or sets the orientation of the text. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.PictureOrientation">
            <summary>
            Gets or sets the orientation of the picture for the style.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.PictureTransparencyColor">
            <summary>
            Gets or sets the transparency color for the picture for the style.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.Picture">
            <summary>
            Gets or sets the picture for the style. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.ForegroundImage">
            <summary>
            Gets or sets the foreground image for the style. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.BackgroundImage">
            <summary>
            Gets or sets the background image for the style. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.Font">
            <summary>
            Gets or sets the font for the style. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.Text">
            <summary>
            Gets or sets the contents of the control as a string matching exactly what is displayed.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.StyleName">
            <summary>
            Gets or sets the name for the created style. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.BackColor">
            <summary>
            Gets or sets the background color for the style. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.ForeColor">
            <summary>
            Gets or sets the text color for the stylet. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.AlignHorz">
            <summary>
            Gets or sets the horizontal alignment for the style. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.AlignVert">
            <summary>
            Gets or sets the vertical alignment for the style. 
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.IRegionalSettings">
            <summary>
            Interface that defines the methods and properties required by objects 
            for defining Regional Settings (Regional Options).
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.NumberLeadingZero">
            <summary>
            Gets or sets whether to display a leading zero in float numbers.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.NumberDecimalDigits">
            <summary>
            Gets or sets the number of decimal places in float numbers.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.NumberGroupSeparator">
            <summary>
            Gets or sets the string that separates a number group.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.NumberGroupSize">
            <summary>
            Gets or sets the number of digits in each number group.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.NumberNegativePattern">
            <summary>
            Gets or sets the format for negative values.
            </summary>
            <remarks>
            Setting values match the .NET Framework's 
            NumberFormatInfo.NumberNegativePattern values.
            </remarks>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.PercentSign">
            <summary>
            Gets or sets the string that indicates a percent value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.PercentDecimalDigits">
            <summary>
            Gets or sets the number of decimal places in percent values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.PercentNegativePattern">
            <summary>
            Gets or sets the format for negative percent values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.PercentPositivePattern">
            <summary>
            Gets or sets the format for positive percent values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.NegativeSign">
            <summary>
            Gets or sets the string that indicates a negative value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.PositiveSign">
            <summary>
            Gets or sets the string that indicates a positive value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.DecimalSeparator">
            <summary>
            Gets or sets the string that indicates the decimal symbol.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.CurrencyDecimalDigits">
            <summary>
            Gets or sets the number of decimal places in currency values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.CurrencySymbol">
            <summary>
            Gets or sets the string that indicates the currency symbol.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.CurrencyNegativePattern">
            <summary>
            Gets or sets the format for negative currency values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.CurrencyPositivePattern">
            <summary>
            Gets or sets the format for positive currency values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.AbbreviatedDayNames">
            <summary>
            Gets or sets an array of abbreviated names of days.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.AbbreviatedMonthNames">
            <summary>
            Gets or sets an array of abbreviated names of months.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.DayNames">
            <summary>
            Gets or sets an array of day names.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.MonthNames">
            <summary>
            Gets or sets an array of month names.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.DateSeparator">
            <summary>
            Gets or sets a string that indicates the separation of date components.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.ShortDateFormat">
            <summary>
            Gets or sets the format of a short date.
            </summary>
            <remarks>
            Use for decoding a generic date value.
            </remarks>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.LongDateFormat">
            <summary>
            Gets or sets the format of a long date.
            </summary>
            <remarks>
            Use for decoding a generic date value.
            </remarks>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.TimeFormat">
            <summary>
            Gets or sets the format of time value.
            </summary>
            <remarks>
            Use for decoding a generic time value.
            </remarks>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.TimeSeparator">
            <summary>
            Gets or sets the string that indicates the separation of time components.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.AMDesignator">
            <summary>
            Gets or sets a string to indicate morning in a 12-hour time.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.PMDesignator">
            <summary>
            Gets or sets a string to indicate afternoon and evening in a 12-hour time.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.CurrentYear">
            <summary>
            Gets or sets the current year if the year is not specified in a date value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.DateTimeFormat">
            <summary>
            Gets the DateTimeFormatInfo object associated with the current culture.
            </summary>
            <remarks>
            If no current culture is set, a new object is returned but not
            stored. (Any changes will not persist).
            </remarks>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.TwoDigitYearMax">
            <summary>
            Gets or sets the last year of a 100-year range that can be 
            represented by a two-digit year.  
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.Calendar">
            <summary>
            Gets or sets the Calendar for formatting date values
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.MatchAbbrevList(System.String,System.String[],System.Int32@,System.Boolean)">
            <summary>
            Returns the index number starting with "1" (not 0) if the passed string 
            matches (or partially matches) one of the items in the list. 
            Also indicates if the string matches more than one item. 
            To be used for matching 3-letter months and 3-letter days.
            Returns 0 if no match was found.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.CmpStringsIgnoreLen(System.String,System.String)">
            <summary>
            Compares two strings ignoring their lengths. Example:
            "Ab" and "abCD" will compare equal, since the short string is
            a subset of the longer string.  The only case where the lengths
            matter on the compare is when one "" (or null) and the other 
            is not "" (or null), then the "" will be less than the non-"".
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.Match_AMPM_Strings(System.String,System.String,System.String,System.Int32@)">
             <summary>
             Returns index into the list of AM/PM strings (0..uAmPmStrCount-1) of the
             first string which matches the target.
            
             Also indicates if the string matches more than one string.
            
             Returns -1 if no match was found.
             </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.VerifyCharFor_MM_or_HH(System.Boolean)">
            <summary>
            Returns 1 if ok, 0 if error.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.VerifyCharFor_M_or_H(System.Boolean)">
            <summary>
            Returns 2 if char is for next fld, 1 if ok, 0 if error.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.VerifyCharFor_DD">
            <summary>
            Returns 1 if ok, 0 if error.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.VerifyCharFor_D">
            <summary>
            Returns 2 if char is for next fld, 1 if ok, 0 if error.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.VerifyCharFor_HH24">
            <summary>
            Returns 1 if ok, 0 if error.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.VerifyCharFor_H24">
            <summary>
            Returns 2 if char is for next fld, 1 if ok, 0 if error.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.VerifyCharFor_NN_or_SS">
            <summary>
            Returns 1 if ok, 0 if error.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.VerifyCharFor_N_or_S">
            <summary>
            Returns 2 if char is for next fld, 1 if ok, 0 if error.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.VerifyCharFor_AllDigits(System.Int32)">
            <summary>
            Returns 1 if ok, 0 if error.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.VerifyCharFor_ListFld(System.String[],System.Int32@)">
            <summary>
            Returns 2 if char is for next fld, 1 if ok, 0 if error.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.VerifyCharFor_Ts(System.String,System.String)">
            <summary>
            This method builds a list from strAM and strPM, 
            and calls VerifyCharFor_ListFld().
            It returns 2 if char is for next fld, 1 if ok, 0 if error.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.CustomMaskEventArgs">
            <summary>
            Represents the event data for the CustomMask event. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CustomMaskEventArgs.#ctor(System.Int32,System.Char)">
            <summary>
            Constructs a new CustomMaskEventArgs object.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.CustomMaskEventArgs.InputCharacter">
            <summary>
            Gets or sets the input character.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.CustomMaskEventArgs.CustomMaskCharacter">
            <summary>
            Gets the custom mask character.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.CustomMaskEventArgs.CustomMaskIndex">
            <summary>
            Gets the index of the custom mask.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.CustomMaskEventArgs.Valid">
            <summary>
            Gets or sets whether the value is valid.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.CustomMaskEventHandler">
            <summary>
            Represents a defined method that handles the CustomMask event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.FmtParsedPicMask">
            <summary>
            FmtParsedPicMask
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.FromFormattedString(System.String)">
            <summary>
            Parses and returns the value from a formatted string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.ToFormattedString(System.Object)">
            <summary>
            Returns a formatted string (plus attributes) for the value passed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.FromUnformattedString(System.String)">
            <summary>
            Parses and returns the value from an unformatted string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.ToUnformattedString(System.Object)">
            <summary>
            Returns an unformatted string for the value passed.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedPicMask.maskList">
            <summary>
            List of the mask chars and literals.  For literals, the position
            in maskList only indicates that there is a literal in that position,
            the get the actual literal char, you have to get it from the 
            "literals" field.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.GetInitialText">
            <summary>
            This returns the initial text for a format.  Used when
            starting a new value.  Note: this gives the same results as
            "ChangeText()" called with all the text selected and the
            "insertText" parameter null or empty.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.CharInput(System.Int32,System.Char,System.String,System.Int32,System.Int32,System.String@,System.Int32@,System.Boolean)">
            <summary>
            Returns the resulting text and position if char is 
            allowed under given conditions. If not allowed, 
            false is returned.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.ChangeText(System.String,System.String@)">
            <summary>
            Returns the resulting text if change
            is allowed for the given conditions.  If no changes
            were made (due to invalid input), false is returned.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.ChangeText(System.String,System.Int32,System.Int32,System.String,System.String@,System.Int32@,System.Boolean)">
            <summary>
            Returns the resulting text and position if change
            is allowed for the given conditions.  If no changes
            were made (do to invalid input), false is returned.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.GetInitialInputPos(System.String)">
            <summary>
            Returns the initial input position for the given text.
            This initial position may not be first input position.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.IsInputAllowedAtPos(System.String,System.Int32)">
            <summary>
            Returns whether input is allowed at the specified 
            position (index) for the given text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.GetLastPosInputIsAllowed(System.String)">
            <summary>
            Returns the last position which can receive input 
            for the given text, 
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.GetNextInputPos(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the next input position dependent on the direction,
            the current text and the current position.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.GetCaretTypeAtPos(System.String,System.Int32)">
            <summary>
            Returns one of the following values for the position in
            the given text:  
              InputPosType.InsertPos, .FixedFldPos, or .LiteralPos
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.IncrementValue(System.String,System.Int32,System.Object,System.Boolean,System.Object,System.String@,System.Int32@)">
            <summary>
            Increments or decrements (dependent on sign of "incrAmt")
            the value represented by the text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.GetFormatStringAtPos(System.String,System.Int32)">
            <summary>
            Returns the format string for the field at the specified
            position in the given text.  
            Example: Format String: "d/mm/yy", currText: "25/12/02"
                     position: 3.  This method will return "mm".
            Returns "" if bad position.  If at a literal position,
            then the char at that position, preceded with a backslash,
            is returned ("\c" where 'c' is the actual char).
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.FmtParsedPicMask.MinimumValue">
            <summary>
            Minimum value, optional. To clear, set to null.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.FmtParsedPicMask.MaximumValue">
            <summary>
            Maximum value, optional. To clear, set to null.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.FmtParsedPicMask.InitialValue">
            <summary>
            Initial value if string is null, optional. 
            To clear, set to null.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.EraList">
            <summary>
            EraList
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.EraList.IsDateInEra(System.DateTime,System.Int32)">
            <summary>
            Returns true if specified date is within the start and
            end dates of this era.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.EraList.AdjustDateForEra(FarPoint.Win.SuperEdit.EraList,System.DateTime,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            This method will adjust the date for era that relates 
            to a cooresponding period in the specified date.
            Returns true if successful, false is returned if no adjustment.
            Note: "era" is 1 based (1..eraList.Length).
            </summary>
        </member>
        <member name="T:FarPoint.Win.AboutDialog">
            <summary>
            Summary description for AboutDialog.
            </summary>
        </member>
        <member name="F:FarPoint.Win.AboutDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FarPoint.Win.AboutDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:FarPoint.Win.AboutDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:FarPoint.Win.BorderEditor">
            <summary>
            Represents the border editor.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BorderEditor.SetEditorProps(FarPoint.Win.IBorder,FarPoint.Win.BorderEditorUI)">
            <summary>
            Sets the border to be edited into the editor.
            </summary>
            <param name="border">IBorder to be edited</param>
            <param name="editor">BorderEditorUI</param>
        </member>
        <member name="M:FarPoint.Win.BorderEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the border editor.
            </summary>
            <param name="context">Context</param>
            <param name="provider">Provider</param>
            <param name="value">Value</param>
        </member>
        <member name="M:FarPoint.Win.BorderEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the style of the border editor for the specified context.
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="M:FarPoint.Win.BorderEditor.GetEditStyle">
            <summary>
            Gets the style of the border editor.
            </summary>
        </member>
        <member name="T:FarPoint.Win.AboutEditor">
            <summary>
            Represents the About dialog editor.
            </summary>
        </member>
        <member name="M:FarPoint.Win.AboutEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the values for the About dialog.
            </summary>
            <param name="context">Context</param>
            <param name="provider">Provider</param>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.AboutEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the style for the About dialog for the specified context.
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="M:FarPoint.Win.AboutEditor.GetEditStyle">
            <summary>
            Gets the style for the About dialog.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.FmtStrParserPicMask">
            <summary>
            ParsedPicMaskString
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserPicMask.ParseFormatString(System.String,FarPoint.Win.SuperEdit.MaskType)">
            <summary>
            Parses format string into its various parts.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserPicMask.GetMaskCodeForChar(System.Char)">
            <summary>
            Returns "Mask code" for passed char.  Returns SE_MASK_LIT if not
            a mask char.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserPicMask.IsMaskChar(System.Char)">
            <summary>
            Returns TRUE if char is a member of the Pic Mask set. 
            </summary>
        </member>
        <member name="T:FarPoint.Win.LicenseDialog">
            <summary>
            Summary description for LicenseDialog.
            </summary>
        </member>
        <member name="F:FarPoint.Win.LicenseDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FarPoint.Win.LicenseDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:FarPoint.Win.LicenseDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.UserErrorCode">
            <summary>
            Specifies error codes for the UserError event.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.UserErrorCode.InvalidCharacter">
            <summary>
            [1] Occurs when the user provides an invalid character; 
            only when the UserEntry property is set to UserEntry.Formatted
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.UserErrorCode.InvalidMovement">
            <summary>
            [2] Occurs when the user attempts to move the cursor left from before the 
            first character or right from after the last character; 
            only occurs when the AutoAdvance property is set to False
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.UserErrorCode.InvalidAction">
            <summary>
            [3] Occurs for all other invalid actions 
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.UserErrorCode.ExceedLimit">
            <summary>
            [4] Occurs when the user adds text that causes the length of the data to exceed the maximum limit 
            set by the MaxLength property
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.UserErrorCode.ButtonMin">
            <summary>
            [5] Occurs when the user clicks a button that causes the value of the ButtonIndex property
            to be less than the value set by the ButtonMin property; 
            only occurs when the ButtonWrap property is set to False 
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.UserErrorCode.ButtonMax">
            <summary>
            [6] Occurs when the user clicks a button that causes the value of the ButtonIndex property
            to be more than the value set by the ButtonMax property;
            only occurs when the ButtonWrap property is set to False     
            /// </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.UserErrorCode.OutOfRange">
            <summary>
            [7] Occurs when the user enters a value that exceeds the minimum or maximum value 
            set by the maximum and minimum value properties
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.UserErrorCode.PopupOrDropdownVisible">
            <summary>
            [8] Occurs when the user interacts with the control while a 
            pop-up or drop-down is displayed 
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.UserErrorCode.DataNotAllowed">
            <summary>
            [9] Occurs when the user provides data that is not allowed, 
            such as a value greater than the maximum value allowed in the control 
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.UserErrorCode.GenericError">
            <summary>
            [999] Occurs when some other type of error occurs (not corresponding to any other error code)
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.ErrorEventArgs">
            <summary>
            Represents the event data for an Error event.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.ErrorEventArgs.#ctor(System.Int32)">
            <summary>
            Occurs when an error state is created by the control.
            </summary>
            <param name="errorCode">Error code that is being raised</param>
            <example>
            <code lang="csharp">
            private void control_UserError(object sender, FarPoint.Win.Input.ErrorEventArgs e)
            {
            Messagebox.Show(Convert.ToString(e.ErrorCode));
            }
            </code>
            <code lang="vb">
            Private Sub control_UserError(ByVal sender As Object, ByVal e As FarPoint.Win.Input.ErrorEventArgs) Handles control.UserError
              Messagebox.Show(e.ErrorCode);
            End Sub
            </code>
            </example>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.ErrorEventArgs.#ctor(System.Int32,System.String)">
            <summary>
            Occurs when an error state is created by the control
            </summary>
            <param name="errorCode">The error code for the error that is being raised</param>
            <param name="errorText">Additional error information for the error that is being raised</param>
            <example>
            <code lang="csharp">
            private void control_UserError(object sender, FarPoint.Win.Input.ErrorEventArgs e)
            {
            Messagebox.Show(Convert.ToString(e.ErrorCode) + e.ErrorInfo);
            }
            </code>
            <code lang="vb">
            Private Sub control_UserError(ByVal sender As Object, ByVal e As FarPoint.Win.Input.ErrorEventArgs) Handles control.UserError
              Messagebox.Show(e.ErrorCode + e.ErrorInfo);
            End Sub
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.ErrorEventArgs.ErrorCode">
            <summary>
            Gets the error code associated with an error event.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.ErrorEventArgs.ErrorInfo">
            <summary>
            Gets the additional error information associated with an error event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.UserErrorEventHandler">
            <summary>
            Represents the method that handles the UserError event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.UserErrorEventArgs">
            <summary>
            Represents the data for a user error event. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.UserErrorEventArgs.#ctor(FarPoint.Win.SuperEdit.UserErrorCode)">
            <summary>
            Occurs when an user error state is created by the control
            </summary>
            <param name="errorCode">The user error code that is being raised</param>
            <example>
            <code lang="csharp">
            private void control_UserError(object sender, FarPoint.Win.Input.UserErrorEventArgs e)
            {
            Messagebox.Show(Convert.ToString(e.ErrorCode));
            }
            </code>
            <code lang="vb">
            Private Sub control_UserError(ByVal sender As Object, ByVal e As FarPoint.Win.Input.UserErrorEventArgs) Handles control.UserError
              Messagebox.Show(e.ErrorCode);
            End Sub
            </code>
            </example>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.UserErrorEventArgs.#ctor(FarPoint.Win.SuperEdit.UserErrorCode,System.String)">
            <summary>
            Occurs when a user error state is created by the control
            </summary>
            <param name="errorCode">The user error code for the error that is being raised</param>
            <param name="errorText">Additional error information for the error that is being raised</param>
            <example>
            <code lang="csharp">
            private void control_UserError(object sender, FarPoint.Win.Input.UserErrorEventArgs e)
            {
            Messagebox.Show(Convert.ToString(e.ErrorCode) + e.ErrorInfo);
            }
            </code>
            <code lang="vb">
            Private Sub control_UserError(ByVal sender As Object, ByVal e As FarPoint.Win.Input.UserErrorEventArgs) Handles control.UserError
              Messagebox.Show(e.ErrorCode + e.ErrorInfo);
            End Sub
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.UserErrorEventArgs.UserErrorCode">
            <summary>
            Gets the error code associated with a user error event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.TextPastedEventHandler">
            <summary>
            Represents the method that handles the TextPasted event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.AdvanceEventHandler">
            <summary>
            Represents the method that handles the Advance event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.AcceptsArrowKeys">
            <summary>
            Specifies how the control processes the keyboard arrow keys in the text box.  
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.AcceptsArrowKeys.None">
            <summary>
            Does not process any of the arrow keys.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.AcceptsArrowKeys.Arrows">
            <summary>
            Processes the keyboard arrow keys but not with the Ctrl key.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.AcceptsArrowKeys.CtrlArrows">
            <summary>
            Processes the keyboard arrow keys only when the Ctrl key is also pressed.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.AcceptsArrowKeys.AllArrows">
            <summary>
            Processes all the keyboard arrow keys (like Arrows and CtrlArrows combined).
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.AcceptsArrowKeys.AllArrowsIgnoringMultiline">
            <summary>
            Processes all the keyboard arrow keys regardless of the Multiline property setting.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.SEditTextBox">
            <summary>
            Represents a text editor in the control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.ProcessSendMessage(System.Windows.Forms.Message@)">
            <summary>
            Internal use only.
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.GetLineCount">
            <summary>
            Returns the line count for a text editor with multiple lines.
            </summary>
            <returns>Number of lines</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.GetLineLength(System.Int32)">
            <summary>
            Returns the length of the line.
            </summary>
            <param name="lineIndex">Index of the line</param>
            <returns>Length of the line</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.OnSEditKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes the key the user pressed.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.PasteFromClipboard">
            <summary>
            Pastes the data from the Clipboard.
            </summary>
            <returns>True if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.Increment(System.Object,System.Boolean)">
            <summary>
            Return the increment value.
            </summary>
            <param name="incValue">Increment value</param>
            <param name="wrap">Whether there are multiple lines and the value wraps</param>
            <returns>Increment value</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.Decrement(System.Object,System.Boolean)">
            <summary>
            Returns the decrement value.
            </summary>
            <param name="decValue">Decrement value</param>
            <param name="wrap">Whether there are multiple lines and the value wraps</param>
            <returns>Decrement value</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines which keys are processed by this control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.ResetRedoText">
            <summary>
            Resets the Redo Text buffer, which is set when a
            call to UndoChanges() is made.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.UndoChanges">
            <summary>
            Allows the user to set the text to the text saved in the
            "Undo buffer".  Also sets the SelectionStart and SelectionLength
            properties.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEdit.SEditTextBox.TextPasted">
            <summary>
            Occurs when text is pasted into the control.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEdit.SEditTextBox.UserError">
            <summary>
            Occurs when content is provided that cannot be processed or is invalid.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEdit.SEditTextBox.Advance">
            <summary>
            Occurs when the AutoAdvance property is set to True and the focus moves 
            to the next or previous control in response to an arrow key being pressed. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.SEditTextBox.RedrawFlag">
            <summary>
            Gets or sets whether the redraw flag has been set. 
            If the value in the control has changed, it's time to redraw.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.SEditTextBox.LastKeyDown">
            <summary>
            Gets or sets the key code of the last key down.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.SEditTextBox.Formatter">
            <summary>
            Gets or sets the formatter for the editing control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.SEditTextBox.AutoAdvance">
            <summary>
            Gets or sets whether to advance the value based on the arrow key pressed.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.SEditTextBox.Value">
            <summary>
            Gets or sets the value of the string or object in the text editor.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.SEditTextBox.AcceptsArrowKeys">
            <summary>
            Gets or sets the property which determines if this control
            processes the Up arrow and Down arrow keys.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.SEditTextBox.Text">
            <summary>
            Gets or sets the string. Overrides the Text property for control of the 
            Undo and Redo buffer.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.SEditTextBox.UndoText">
            <summary>
            Get or set the contents of the Undo buffer. The buffer is used
            when the user presses Ctrl-Z or the owner calls "UndoChanges()".
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.SEditTextBox.UndoSelStart">
            <summary>
            Get or set the Undo selection start position.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.SEditTextBox.UndoSelLength">
            <summary>
            Get or set the Undo selection length position.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.MaskFldValue">
            <summary>
            MaskFldValue
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFldValue.RemoveNegPosPattern(System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            NOTE: This method does not check if the text actually
            has the negative pattern, if removes the char positions
            assuming the text has the negative pattern.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFldValue.AdjustSelectionForNegPosPattern(System.Int32,System.Int32@,System.Int32@,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Adjusts the selection after the negative pattern has
            been removed from the text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFldValue.AdjustForValidValue">
             <summary>
             Check that the values in the fields make a valid date and/or time,
             if not, adjust the values.  
            
             NOTE: Not all fields have to be supplied, for example, if we are 
             given only the month and day for a date field, we can verify that
             the day specified is valid for the given month, but without the 
             year, we cannot give a exact number of days for febraury. However, we
             at least know that there can't ever be more than 29 days in that month.
            
             Returns TRUE if any values were adjusted.
             </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFldValue.GetBinaryValue">
            <summary>
            Returns the "binary object" for the value stored in
            "this". Example: for date, DateTime object is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFldValue.FormatThousSep(System.Boolean,System.String,System.Int32,System.String)">
            <summary>
            Used by FormatValue(), adds Neg sign and thousands seperator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFldValue.PrivAdjustForLimitVal(System.Object,System.Boolean,System.Boolean,System.Object)">
            <summary>
            </summary>
            <returns>1 if adjustment was needed, 0 if not adjusted, -1
            if there was an error.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFldValue.GetMonthsInYear">
            <summary>
            Given what is currently set (year and possible era), return
            the max number of month (if no year or is leap year, and is
            Hebrew calendar, return 13, otherwise 12).
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFldValue.GetDaysInMonth">
            <summary>
            Given what is currently set (month, year and possible era), return
            the max number of days in month. If not enough things are set
            (if no year or month), then default to 31, else
            call calendar method.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFldValue.ChangeDateForWeekday(System.Int32,System.Object,System.Object)">
            <summary>
            Adjust the date for the "closest" specified dayOfWeek.
            Returns true if everything is ok, otherwise false if
            there's a problem with the change.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFldValue.ChangeDateForEra(System.Int32,System.Object,System.Object)">
            <summary>
            Ensure that the date with the new era is valid.
            Returns true if everything is ok, otherwise false if
            there is a problem with the change.
            Note: minValue and maxValue, if specified, are DateTime
            objects and restrict the entire date, not just the era.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ApplyBorderEventArgs">
            <summary>
            Represents the event data for the ApplyBorder event. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ApplyBorderEventArgs.#ctor(FarPoint.Win.IBorder)">
            <summary>
            Constructs a new ApplyBorderEventArgs object.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ApplyBorderEventArgs.Border">
            <summary>
            Gets a border.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ApplyBorderEventHandler">
            <summary>
            Represents a defined method that handles the ApplyBorder event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.BorderEditorUI">
            <summary>
            Represents the border editor user interface.
            </summary>
        </member>
        <member name="F:FarPoint.Win.BorderEditorUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BorderEditorUI.#ctor(FarPoint.Win.IBorder)">
            <summary>
            Creates a new border editor user interface.
            </summary>
            <param name="border"></param>
        </member>
        <member name="M:FarPoint.Win.BorderEditorUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BorderEditorUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:FarPoint.Win.BorderEditorUI.ApplyChanged">
            <summary>
            Occurs when the change is applied.
            </summary>
        </member>
        <member name="E:FarPoint.Win.BorderEditorUI.DiscardChanged">
            <summary>
            Occurs when the change is discarded.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.RegionalSettingsProps">
            <summary>
            
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.RegionalSettings">
            <summary>
            Represents the Regional Settings interface.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.RegionalSettings.#ctor">
            <summary>
            Creates a new set of regional settings. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.RegionalSettings.#ctor(FarPoint.Win.SuperEdit.IRegionalSettings)">
            <summary>
            Creates a new set of regional settings based on settings 
            inherited from the specified parent interface.
            </summary>
            <param name="parentRegionSettings">IRegionalSettings interface from which to inherit settings</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.RegionalSettings.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Creates a new set of regional settings based on culture-specific information 
            from the specified CultureInfo object.
            </summary>
            <param name="cultureInfo">CultureInfo object that contains the culture-specific information</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.RegionalSettings.#ctor(FarPoint.Win.SuperEdit.RegionalSettings)">
            <summary>
            Creates a new set of regional settings by copying the specified object.
            </summary>
            <param name="src">Source regional settings to copy</param>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettings.defRgnSettings">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.RegionalSettings.Clone">
            <summary>
            Creates and returns a set of regional settings that is a copy of the current instance.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettings.numberNegPattern">
            Setting values match MS .NET NumberFormatInfo.NumberNegativePattern values.
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettings.shortDateFormat">
            Used for decoding a generic date value.
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettings.longDateFormat">
            Used for decoding a generic date value.
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettings.timeFormat">
            Used for decoding a generic time value.
        </member>
        <member name="M:FarPoint.Win.SuperEdit.RegionalSettings.Set(System.Object,System.Boolean)">
            <summary>
            Updates the bit map to indicate that a property has been set
            </summary>
            <param name="prop">Object containing the property</param>
            <param name="f">Flag indicating whether the property is set</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.RegionalSettings.IsDefined(System.Object)">
            <summary>
            Queries the bit map to determine if a property has been set.
            </summary>
            <param name="prop">Object containing the property</param>
            <returns>true if set; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.RegionalSettings.Reset(System.Object)">
            <summary>
            Resets the bit map to false and frees any object that the property has created.
            </summary>
            <param name="prop">Object containing the property</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.RegionalSettings.ResetAll">
            <summary>
            Resets the entire bit map to false indicating that all properties are at their default state.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.RegionalSettings.IsAllBlanks(System.String)">
            <summary>
            Determines whether a string is all blanks.
            </summary>
            <param name="value">String containing the value</param>
            <returns>true if string is all blanks; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.RegionalSettings.FirstNonBlankChar(System.String,System.Char@)">
            <summary>
            Returns the first non-blank character in the string, or else null.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.CultureInfoSetting">
            <summary>
            Gets or sets the culture-specific information.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.ParentRegionSettings">
            <summary>
            Gets or sets the parent regional settings.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.PropertySet">
            <summary>
            Gets the property set as an array.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.DefaultSettings">
            <summary>
            Gets or sets a copy of the default regional settings.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.NumberGroupSeparator">
            <summary>
            Gets or sets the character used to separate groups of digits in numeric values. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.NumberGroupSize">
            <summary>
            Gets or sets the number of digits by which to group numeric values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.NumberNegativePattern">
            <summary>
            Gets or sets how to format negative values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.NegativeSign">
            <summary>
            Gets or sets the string to use as the negative sign in numeric values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.PositiveSign">
            <summary>
            Gets or sets the string to use as the positive sign in numeric values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.DecimalSeparator">
            <summary>
            Gets or sets the string used to separate the integer 
            and decimal portions of a decimal value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.NumberLeadingZero">
            <summary>
            Gets or sets whether to display a leading zero in float numbers.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.NumberDecimalDigits">
            <summary>
            Gets or sets the number of decimal places to display in numeric values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.PercentSign">
            <summary>
            Gets or sets the character as the percent symbol to display with numeric values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.PercentNegativePattern">
            <summary>
            Gets or sets the format for displaying negative percent values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.PercentPositivePattern">
            <summary>
            Gets or sets the format for displaying positive percent values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.PercentDecimalDigits">
            <summary>
            Gets or sets the number of digits in the decimal portion of a percent value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.CurrencyDecimalDigits">
            <summary>
            Gets or sets the number of digits in the decimal portion of a currency value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.CurrencySymbol">
            <summary>
            Gets or sets the string to use as the currency symbol in currency values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.CurrencyNegativePattern">
            <summary>
            Gets or sets the format for negative currency values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.CurrencyPositivePattern">
            <summary>
            Gets or sets the format for positive currency values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.AbbreviatedDayNames">
            <summary>
            Gets or sets an array of abbreviated names of the days of the week.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.AbbreviatedMonthNames">
            <summary>
            Gets or sets an array of abbreviated names of the months of the year.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.DayNames">
            <summary>
            Gets or sets an array of names of the days of the week.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.MonthNames">
            <summary>
            Gets or sets an array of names of the days of the week.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.DateSeparator">
            <summary>
            Gets or sets the string used to separate the portions of a date value. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.ShortDateFormat">
            <summary>
            Gets or sets the string to format the short date value 
            when the DateTimeFormat property is set to ShortDate or ShortDateWithTime.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.LongDateFormat">
            <summary>
            Gets or sets the string to format the long date value 
            when the DateTimeFormat property is set to LongDate or LongDateWithTime.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.TimeFormat">
            <summary>
            Gets or sets the format used to represent time values 
            when the DateTimeFormat property is set to TimeOnly, LongDateWithTime, or ShortDateWithTime.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.TimeSeparator">
            <summary>
            Gets or sets the string used to separate the portions of a time value. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.AMDesignator">
            <summary>
            Gets or sets the string to indicate morning for 12-hour time format. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.PMDesignator">
            <summary>
            Gets or sets the string to indicate afternoon for 12-hour time format. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.DateTimeFormat">
             <summary>
             Gets or sets a DateTimeFormatInfo object that defines the format for displaying dates and times.
            </summary>
             Returns DateTimeFormatInfo associated with current culture.
             If no current culture is set, a new object is returned but not
             stored. (Any changes won't persist).
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.CurrentYear">
            <summary>
            Gets or sets the current year if the year is not specified in a date value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.TwoDigitYearMax">
            <summary>
            Gets or sets the year value used to calculate the century for two-digit year values. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.Calendar">
            <summary>
            Gets or sets the Calendar used for formatting DateTime values.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Rect">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:FarPoint.Win.HorizontalAlignment">
            <summary>
            Specifies the horizontal alignment of the contents of the control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.HorizontalAlignment.Left">
            <summary>
            Left aligns the contents of the control along the horizontal axis
            </summary>
        </member>
        <member name="F:FarPoint.Win.HorizontalAlignment.Center">
            <summary>
            Centers the contents of the control along the horizontal axis
            </summary>
        </member>
        <member name="F:FarPoint.Win.HorizontalAlignment.Right">
            <summary>
            Right aligns the contents of the control along the horizontal axis
            </summary> 
        </member>
        <member name="T:FarPoint.Win.VerticalAlignment">
            <summary>
            Specifies the vertical alignment of the contents of the control.
            </summary>    
        </member>
        <member name="F:FarPoint.Win.VerticalAlignment.Top">
            <summary>
            Aligns the contents of the control to the top of the vertical axis
            </summary>
        </member>
        <member name="F:FarPoint.Win.VerticalAlignment.Center">
            <summary>
            Aligns the contents of the control between the top and bottom of the vertical axis
            </summary> 
        </member>
        <member name="F:FarPoint.Win.VerticalAlignment.Bottom">
            <summary>
            Aligns the contents of the control to the bottom of the vertical axis
            </summary> 
        </member>
        <member name="T:FarPoint.Win.AppearanceProps">
            <summary>
            Internal use only. Specifies the appearance properties.
            </summary>
        </member>
        <member name="T:FarPoint.Win.PictureProps">
            <summary>
            Internal use only. Specifies the picture properties.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PictureProps.Stretch">
            <summary>
            Stretches the picture to fit the control
            </summary>
        </member>
        <member name="F:FarPoint.Win.PictureProps.MaintainScale">
            <summary>
            Maintains the ratio of the picture in the control
            </summary>
        </member>
        <member name="F:FarPoint.Win.PictureProps.HorizontalAlignment">
            <summary>
            Aligns the picture horizontally
            </summary>
        </member>
        <member name="F:FarPoint.Win.PictureProps.VerticalAlignment">
            <summary>
            Aligns the picture vertically
            </summary>
        </member>
        <member name="F:FarPoint.Win.PictureProps.Image">
            <summary>
            Set the picture image
            </summary>
        </member>
        <member name="T:FarPoint.Win.RenderStyle">
            <summary>
            Specifies the rendering style for images.
            </summary>
        </member>
        <member name="F:FarPoint.Win.RenderStyle.Normal">
            <summary>
            Displays image with its actual dimensions in the control (and no resizing)
            </summary>
        </member>
        <member name="F:FarPoint.Win.RenderStyle.Stretch">
            <summary>
            Sizes image to fit in the control without regard to its aspect ratio
            </summary>
        </member>
        <member name="F:FarPoint.Win.RenderStyle.StretchAndScale">
            <summary>
            Sizes image to fit in the control with regard to its aspect ratio
            </summary>
        </member>
        <member name="F:FarPoint.Win.RenderStyle.Tile">
            <summary>
            Displays image multiple times (in a tile fashion) in order to fill the control
            </summary>
        </member>
        <member name="T:FarPoint.Win.VisualStyles">
            <summary>
            Specifies if visual styles are applied to the control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyles.Auto">
            <summary>
            Uses the system settings to determine how the control is displayed
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyles.On">
            <summary>
            Applies visual styles when displaying the control 
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyles.Off">
            <summary>
            Does not use visual styles when displaying the control
            </summary>
        </member>
        <member name="T:FarPoint.Win.VisualStyle">
            <summary>
            Represents a visual style.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Picture">
            <summary>
            Represents a picture to display. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.Picture.#ctor">
            <summary>
            Creates a picture.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Picture.#ctor(System.Drawing.Image)">
            <summary>
            Creates a picture with the specified image.
            </summary>
            <param name="i">Image</param>
        </member>
        <member name="M:FarPoint.Win.Picture.#ctor(System.Drawing.Image,FarPoint.Win.RenderStyle)">
            <summary>
            Creates a picture with the specified image and style.
            </summary>
            <param name="i">Image</param>
            <param name="style">Style</param>
        </member>
        <member name="M:FarPoint.Win.Picture.#ctor(System.Drawing.Image,System.Drawing.Color)">
            <summary>
            Creates a picture with the specified image and transparency color.
            </summary>
            <param name="i">Image</param>
            <param name="transparencyColor">Which color is transparent</param>
        </member>
        <member name="M:FarPoint.Win.Picture.#ctor(System.Drawing.Image,FarPoint.Win.RenderStyle,System.Drawing.Color)">
            <summary>
            Creates a picture with the specified image, style, and transparency color.
            </summary>
            <param name="i">Image</param>
            <param name="style">Style</param>
            <param name="transparencyColor">Which color is transparent</param>
        </member>
        <member name="M:FarPoint.Win.Picture.#ctor(System.Drawing.Image,FarPoint.Win.RenderStyle,System.Drawing.Color,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment)">
            <summary>
            Creates a picture with the specified image, style, transparency color, and alignment.
            </summary>
            <param name="i">Image</param>
            <param name="style">Stle</param>
            <param name="transparencyColor">Which color is transparent</param>
            <param name="alignHorz">Horizontal alignment of image</param>
            <param name="alignVert">Vertical alignment of image</param>
        </member>
        <member name="M:FarPoint.Win.Picture.#ctor(System.Drawing.Image,FarPoint.Win.RenderStyle,System.Drawing.Color,System.Int32)">
            <summary>
            Creates a picture with the specified image, style, transparency color, and transparency tolerance.
            </summary>
            <param name="i">Image</param>
            <param name="style">Picture style</param>
            <param name="transparencyColor">Which color is transparent</param>
            <param name="transparencyTolerance">Tolerance of the transparency specified</param>
        </member>
        <member name="M:FarPoint.Win.Picture.#ctor(System.Drawing.Image,FarPoint.Win.RenderStyle,System.Drawing.Color,System.Int32,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment)">
            <summary>
            Creates a picture with the specified image, style, transparency color (with tolerance), and alignments of contents.
            </summary>
            <param name="i">Image</param>
            <param name="style">Picture style</param>
            <param name="transparencyColor">Which color is transparent</param>
            <param name="transparencyTolerance">Tolerance of the transparency specified</param>
            <param name="alignHorz">Horizontal alignment of image</param>
            <param name="alignVert">Vertical alignment of image</param>
        </member>
        <member name="M:FarPoint.Win.Picture.#ctor(System.Object)">
            <summary>
            Creates a picture by copying another.
            </summary>
            <param name="cloneFrom">Object from which to copy or clone this picture</param>
        </member>
        <member name="M:FarPoint.Win.Picture.Reset">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Picture.Clone">
            <summary>
            Internal use only. Creates and returns a copy of the picture.
            </summary>
            <returns>Copy of the picture</returns>
        </member>
        <member name="M:FarPoint.Win.Picture.Paint(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the picture in the specified rectangle.
            </summary>
            <param name="g">Graphics to display</param>
            <param name="rect">Rectangle area in which to paint</param>
        </member>
        <member name="M:FarPoint.Win.Picture.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints the picture from the specified location.
            </summary>
            <param name="g">Graphics to display </param>
            <param name="x">x-coordinate for the top-left corner</param>
            <param name="y">y-coordinate for the top-left corner</param>
            <param name="width">Width of the picture in pixels</param>
            <param name="height">Height of the picture in pixels</param>
        </member>
        <member name="M:FarPoint.Win.Picture.OnPictureChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.Picture.PictureChanged"/> event when the picture changes.
            </summary>
            <param name="e">EventArgs object with event data</param>
        </member>
        <member name="M:FarPoint.Win.Picture.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the picture to XML.
            </summary>
            <param name="w">XmlTextWriter to which to write (save) the picture</param>
        </member>
        <member name="M:FarPoint.Win.Picture.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the picture from XML. 
            </summary>
            <param name="r">XmlNodeReader from which to read the picture</param>
        </member>
        <member name="E:FarPoint.Win.Picture.PictureChanged">
            <summary>
            Occurs when the picture changes.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Picture.TransparencyColor">
            <summary>
            Gets or sets the transparency color for rendering the picture. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.Picture.TransparencyTolerance">
            <summary>
            Gets or sets the tolerance for the transparency color range. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.Picture.Style">
            <summary>
            Gets or sets the style used for rendering the picture.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Picture.AlignHorz">
            <summary>
            Gets or sets the horizontal alignment of the picture.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Picture.AlignVert">
            <summary>
            Gets or sets the vertical alignment of the picture.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Picture.Image">
            <summary>
            Gets or sets the picture to display. 
            </summary>
        </member>
        <member name="T:FarPoint.Win.PictureConverter">
            <summary>
            Converts Picture objects from one type to another.
            </summary>
        </member>
        <member name="M:FarPoint.Win.PictureConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an object of this type by using a specified set of
            property values for the object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.PictureConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines whether changing a value on this object requires
            a call to the CreateInstance method to create a new value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.PictureConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether a picture can be converted from the specified type.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="sourceType">Source file type</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.PictureConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Deterines whether a picture can be converted to the specified type.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="destinationType">Destination file type</param>
        </member>
        <member name="M:FarPoint.Win.PictureConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a picture to the specified file type.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="culture">CultureInfo</param>
            <param name="value">Object</param>
            <param name="destinationType">File type</param>
        </member>
        <member name="T:FarPoint.Win.FpImageConverter">
            <summary>
            Converts Image objects from one type to another.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpImageConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether a Image can be converted from the specified type.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="sourceType">Source file type</param>
            <returns></returns>
        </member>
        <member name="T:FarPoint.Win.PictureEditor">
            <summary>
            Represents a picture editor.
            </summary>
        </member>
        <member name="M:FarPoint.Win.PictureEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Returns the value in the editor.
            </summary>
            <param name="context">Context (ITypeDescriptorContext)</param>
            <param name="provider">Provider (IServiceProvider)</param>
            <param name="value">Value</param>
        </member>
        <member name="M:FarPoint.Win.PictureEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Paints the value in the editor.
            </summary>
            <param name="e">PaintValueEventArgs object containing event data</param>
        </member>
        <member name="T:FarPoint.Win.EditMessage">
            <summary>
            Specifies the edit message.
            </summary>
        </member>
        <member name="T:FarPoint.Win.EditModeCursorPosition">
            <summary>
            Specifies the position of the pointer when the edit control receives the focus.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditModeCursorPosition.MouseLocation">
            <summary>
            Positions the pointer at the location of the pointer device,
            without any text selected
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditModeCursorPosition.FirstInputPosition">
            <summary>
            Positions the pointer at the first input position in the control,
            without any text selected
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditModeCursorPosition.End">
            <summary>
            Positions the pointer at the end of the text in the control,
            without any text selected
            </summary> 
        </member>
        <member name="F:FarPoint.Win.EditModeCursorPosition.LastKnownPosition">
            <summary>
            Positions the pointer at its last location prior to the control losing focus,
            without any text selected
            </summary> 
        </member>
        <member name="F:FarPoint.Win.EditModeCursorPosition.SelectAll">
            <summary>
            Positions the pointer at the end of the text in the control,
            with all text selected
            </summary> 
        </member>
        <member name="T:FarPoint.Win.NumberNegativeFormat">
            <summary>
            Specifies the formatting of a negative value in a numeric edit control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.NumberNegativeFormat.UseRegional">
            <summary>
            Displays the sign and value according to the Windows regional settings
            </summary>
        </member>
        <member name="F:FarPoint.Win.NumberNegativeFormat.Parentheses">
            <summary>
            Displays the negative sign and the value in the control in parentheses
            </summary>
        </member>
        <member name="F:FarPoint.Win.NumberNegativeFormat.NegativeSignBefore">
            <summary>
            Displays the negative sign before the value in the control
            </summary>
        </member>
        <member name="F:FarPoint.Win.NumberNegativeFormat.NegativeSignBeforeWithSpace">
            <summary>
            Displays the negative sign with a space before the value in the control
            </summary>
        </member>
        <member name="F:FarPoint.Win.NumberNegativeFormat.NegativeSignAfter">
            <summary>
            Displays the negative sign after the value in the control
            </summary>
        </member>
        <member name="F:FarPoint.Win.NumberNegativeFormat.NegativeSignAfterWithSpace">
            <summary>
            Displays the negative sign with a space after the value in the control
            </summary>
        </member>
        <member name="T:FarPoint.Win.UserEntry">
            <summary>
            Specifies whether data is validated when it is provided to the editing control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UserEntry.Formatted">
            <summary>
            Checks the data as it is provided to the control 
            </summary>
        </member>
        <member name="F:FarPoint.Win.UserEntry.FreeFormat">
            <summary>
            Does not check the data as it is provided to the control 
            </summary> 
        </member>
        <member name="T:FarPoint.Win.ControlType">
            <summary>
            Specifies how the contents of the control can be handled.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ControlType.Normal">
            <summary>
            Allows changes to the contents based on the default settings
            </summary>
        </member>
        <member name="F:FarPoint.Win.ControlType.ReadOnly">
            <summary>
            Allows no changes to the contents but allows some interaction, such as copying 
            </summary>
        </member>
        <member name="F:FarPoint.Win.ControlType.Static">
            <summary>
            Allows contents to be seen only, as in a label, but not set focus to 
            </summary> 
        </member>
        <member name="F:FarPoint.Win.ControlType.ButtonEdit">
            <summary>
            Allows contents to be changed only by means of buttons
            </summary>
        </member>
        <member name="T:FarPoint.Win.ButtonAlign">
            <summary>
            Specifies the alignment of the button in the edit control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ButtonAlign.Right">
            <summary>
            Aligns the button on the right side of the control
            </summary>
        </member>
        <member name="F:FarPoint.Win.ButtonAlign.Left">
            <summary>
            Aligns the button on the left side of the control
            </summary>
        </member>
        <member name="T:FarPoint.Win.ButtonStyle">
            <summary>
            Specifies the style of the button to display in the edit control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ButtonStyle.None">
            <summary>
            Displays no buttons
            </summary>
        </member>
        <member name="F:FarPoint.Win.ButtonStyle.Spin">
            <summary>
            Displays two spin buttons to increment and decrement values
            </summary>
        </member>
        <member name="F:FarPoint.Win.ButtonStyle.PopUp">
            <summary>
            Displays a button with ellipsis points to launch a dialog or pop-up calendar or clock
            </summary>
        </member>
        <member name="F:FarPoint.Win.ButtonStyle.DropDown">
            <summary>
            Displays a button with a drop-down arrow for a drop-down list or drop-down calendar or clock
            </summary>
        </member>
        <member name="F:FarPoint.Win.ButtonStyle.Slide">
            <summary>
            Displays two buttons to scroll horizontally through long data
            </summary>
        </member>
        <member name="T:FarPoint.Win.InvalidOption">
            <summary>
            Specifies what to do with invalid data when the edit control loses focus.
            </summary>
        </member>
        <member name="F:FarPoint.Win.InvalidOption.ShowData">
            <summary>
            Displays invalid data in the control at all times
            </summary>
        </member>
        <member name="F:FarPoint.Win.InvalidOption.HideData">
            <summary>
            Hides invalid data when the control loses the focus (and displays it again when the focus returns)
            </summary>
        </member>
        <member name="F:FarPoint.Win.InvalidOption.ClearData">
            <summary>
            Clears invalid data from the control when the control loses the focus
            </summary>
        </member>
        <member name="T:FarPoint.Win.SpinUpEventArgs">
            Derives from System.EventArgs.
            <summary>
            Represents the event data for the SpinUp event.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinUpEventArgs.#ctor">
            <summary>
            Constructs a new SpinUpEventArgs object.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SpinUpEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether default processing should be cancelled.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SpinUpEventHandler">
            Delegate declaration.
            <summary>
            Represents a defined method that handles the SpinUp event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SpinDownEventArgs">
            Derives from System.EventArgs.
            <summary>
            Represents the event data for the SpinDown event.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinDownEventArgs.#ctor">
            <summary>
            Constructs a new SpinDownEventArgs object.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SpinDownEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether default processing should be cancelled.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SpinDownEventHandler">
            Delegate declaration.
            <summary>
            Represents a defined method that handles the SpinDown event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.PopUpEventArgs">
            Derives from System.EventArgs.
            <summary>
            Represents the event data for the PopUp event.
            </summary>
        </member>
        <member name="M:FarPoint.Win.PopUpEventArgs.#ctor">
            <summary>
            Constructs a new PopUpEventArgs object.
            </summary>
        </member>
        <member name="P:FarPoint.Win.PopUpEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether default processing should be cancelled.
            </summary>
        </member>
        <member name="T:FarPoint.Win.PopUpEventHandler">
            Delegate declaration.
            <summary>
            Represents a defined method that handles the PopUp event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.DropDownEventArgs">
            Derives from System.EventArgs.
            <summary>
            Represents the event data for the DropDown event.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DropDownEventArgs.#ctor">
            <summary>
            Constructs a new DropDownEventArgs object.
            </summary>
        </member>
        <member name="P:FarPoint.Win.DropDownEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether default processing should be cancelled.
            </summary>
        </member>
        <member name="T:FarPoint.Win.DropDownEventHandler">
            Delegate declaration.
            <summary>
            Represents a defined method that handles the DropDown event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SlideLeftEventArgs">
            <summary>
            Represents the event data for the SlideLeft event.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SlideLeftEventArgs.#ctor">
            <summary>
            Constructs a new SlideLeftEventArgs object.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SlideLeftEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether default processing should be cancelled.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SlideLeftEventHandler">
            Delegate declaration.
            <summary>
            Represents a defined method that handles the SlideLeft event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SlideRightEventArgs">
            SlideRight event
            Derives from System.EventArgs.
            <summary>
            Represents the event data for the SlideRight event.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SlideRightEventArgs.#ctor">
            <summary>
            Constructs a new SlideRightEventArgs object.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SlideRightEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether default processing should be cancelled.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SlideRightEventHandler">
            Delegate declaration.
            <summary>
            Represents a defined method that handles the SlideRight event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.InvalidDataEventHandler">
            Delegate declaration.
            <summary>
            Represents a defined method that handles the InvalidData event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEditPreview">
            <summary>
            Represents a preview of the editing control.
            </summary>
        </member>
        <member name="T:FarPoint.Win.InputTextBox">
            <summary>
            Represents a text editor in the edit control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.InputTextBox.IsInputChar(System.Char)">
            <summary>
            Determines whether a character is an input character that the control recognizes.
            </summary>
            <param name="charCode">Character to check</param>
            <returns>true if the character can be handled by the control and not preprocessed; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.InputTextBox.#ctor">
            <summary>
            Constructs a text editor (input text box).
            </summary>
        </member>
        <member name="M:FarPoint.Win.InputTextBox.SetTextNoUndo(System.String)">
            <summary>
            Sets the text editor to no undo. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.InputTextBox.EditModeCursorPosition">
            <summary>
            Gets or sets the position of the pointer in the control when it receives the focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.InputTextBox.LastCaretPos">
            <summary>
            Gets or sets the last caret position.
            </summary>
        </member>
        <member name="P:FarPoint.Win.InputTextBox.Value">
            <summary>
            Gets or sets the value in the control.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SEditButtonElement">
            <summary>
            Represents a button element for an editing control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SEditButtonElement.ToggleState">
            <summary>
            Toggle the state of the button.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SEditButton">
            <summary>
            Represents a button for an editing control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SEditButton.#ctor">
            <summary>
            Constructs a new button for an editing control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SEditButton.InitializeButtons">
            <summary>
            Initialize the control elements.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SEditButton.PaintBackColor(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints background color.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.SEditButton.UpdateClientArea">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SEditButton.AdjustClientArea">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SEditButton.ToggleState">
            <summary>
            Toggles the state of the control. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.SEditButton.SpecialResetState">
            <summary>
            Reset the control to a specific state.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SEditButton.DoMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the mouse up processing.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SEditButton.BackColor">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SEditButton.SpinVisible">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SEditButton.PopupVisible">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SEditButton.VisualStyles">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="P:FarPoint.Win.SEditButton.DropdownVisible">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SEditButton.SlideVisible">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ProgressTextStyle">
            <summary>
            Specifies the appearance of the text portion of the progress indicator.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ProgressTextStyle.Value">
            <summary>
            Displays the raw value as text.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ProgressTextStyle.Percent">
            <summary>
            Displays the percentage.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ProgressTextStyle.PercentRemaining">
            <summary>
            Displays the percent remaining.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ProgressTextStyle.Custom">
            <summary>
            Displays the custom text defined by the value of the Text property.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ProgressOrientation">
            <summary>
            Specifies the orientation of the progress indicator in the control. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.ProgressOrientation.LeftToRight">
            <summary>
            Displays the progress indicator horizontally left to right
            </summary>
        </member>
        <member name="F:FarPoint.Win.ProgressOrientation.RightToLeft">
            <summary>
            Displays the progress indicator horizontally right to left
            </summary>
        </member>
        <member name="F:FarPoint.Win.ProgressOrientation.TopToBottom">
            <summary>
            Displays the progress indicator vertically top to bottom
            </summary>
        </member>
        <member name="F:FarPoint.Win.ProgressOrientation.BottomToTop">
            <summary>
            Displays the progress indicator vertically bottom to top
            </summary>
        </member>
        <member name="T:FarPoint.Win.ProgressStyle">
            <summary>
            Specifies the appearance of the progress indicator in the control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ProgressStyle.Default">
            <summary>
            Displays a progress indicator as solid.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ProgressStyle.Bars">
            <summary>
            Displays a progress indicator as a series of small bars.
            </summary>
        </member>
        <member name="T:FarPoint.Win.FpProgress">
            <summary>
            Represents the FarPoint progress indicator control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpProgress.maximum">
            <summary>
            Progress control orientation constants
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpProgress.#ctor">
            FpProgress base class.
            <summary>
            Creates a new FarPoint progress indicator control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpProgress.OnBackgroundImageChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs if the background picture changes.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.FpProgress.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the progress indicator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpProgress.OnPaint(System.Windows.Forms.PaintEventArgs,System.Object)">
            <summary>
            Paints the control. Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpProgress.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,System.Int32,System.Int32,System.Int32,FarPoint.Win.ProgressOrientation,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,System.Drawing.Color,System.Drawing.Color,System.Boolean,FarPoint.Win.Picture,System.Boolean,FarPoint.Win.ProgressStyle,FarPoint.Win.VisualStyles,FarPoint.Win.ProgressTextStyle,System.String)">
            <param name="style">Style of the progress indicator</param>
        </member>
        <member name="M:FarPoint.Win.FpProgress.GetPreferredSize(System.Drawing.Graphics,System.Drawing.Font,System.Int32,System.Int32,System.Int32,FarPoint.Win.ProgressOrientation)">
            <summary>
            Calculates the height and width required to display the text and picture in the progress indicator.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="font">Font of text</param>
            <param name="value">Value</param>
            <param name="minimum">Minimum allowed value</param>
            <param name="maximum">Maximum allowed value</param>
            <param name="orientation">Orientation of the progress indicator</param>        
        </member>
        <member name="M:FarPoint.Win.FpProgress.GetPreferredSize(System.Drawing.Graphics,System.Drawing.Font,System.Int32,System.Int32,System.Int32,FarPoint.Win.ProgressOrientation,FarPoint.Win.ProgressTextStyle,System.String)">
            <summary>
            Calculates the height and width required to display the text and picture in the progress indicator.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="font">Font of text</param>
            <param name="value">Value</param>
            <param name="minimum">Minimum allowed value</param>
            <param name="maximum">Maximum allowed value</param>
            <param name="orientation">Orientation of the progress indicator</param>   
            <param name="textStyle">Determines what to display as the text</param>
            <param name="textStr">Text string to display</param>
        </member>
        <member name="P:FarPoint.Win.FpProgress.BackgroundImage">
            <summary>
            Gets or sets the background image for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.TextStyle">
            <summary>
            Gets or sets how the text portion of the progress indicator is displayed.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.Orientation">
            <summary>
            Gets or sets the orientation of the progress indicator.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.Style">
            <summary>
            Gets or sets how the progress indicator is displayed.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.VisualStyles">
            <summary>
            Gets or sets whether to use visual styles.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.Maximum">
            <summary>
            Gets or sets the maximum value of the progress indicator.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.Minimum">
            <summary>
            Gets or sets the minimum value of the progress indicator.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.Value">
            <summary>
            Gets or sets the current value of the progress indicator.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.FillColor">
            <summary>
            Gets or sets the color used to draw the progress indicator.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.FillTextColor">
            <summary>
            Gets or sets the color of the text of the progress indicator.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.ShowText">
            <summary>
            Gets or sets whether percentage displays as text inside the progress indicator.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of text in the progress indicator.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of text in the progress indicator.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Inset">
            <summary>
            Represents the dimensions of borders and margins.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Inset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="P:FarPoint.Win.Inset.Left">
            <summary>
            Gets the inset from the left.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Inset.Top">
            <summary>
            Gets the inset from the top.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Inset.Right">
            <summary>
            Gets the inset from the right.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Inset.Bottom">
            <summary>
            Gets the inset from the bottom.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ColorPicker.OnColorChanged(System.EventArgs)">
            <summary>
            Fires the ColorChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FarPoint.Win.ColorPicker.FireColorChanged">
            <summary>
            </summary> 
        </member>
        <member name="T:FarPoint.Win.SuperEdit.InputPosType">
            <summary>
            List of Mask types (not Data types).
            </summary>
        </member>
    </members>
</doc>
